{
  "address": "0xB9cC0Bb020cF55197C4C3d826AC87CAdba51f272",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_operator",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "AccessControlBadConfirmation",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "neededRole",
          "type": "bytes32"
        }
      ],
      "name": "AccessControlUnauthorizedAccount",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "AddressIsZero",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ECDSAInvalidSignature",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "length",
          "type": "uint256"
        }
      ],
      "name": "ECDSAInvalidSignatureLength",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "s",
          "type": "bytes32"
        }
      ],
      "name": "ECDSAInvalidSignatureS",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "EmitterInvalid",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidShortString",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "MethodNotFound",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "OnlyEmitter",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "SIDAlreadyExists",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "SIDNotExists",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "SchemaAlreadyExists",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "SchemaNameMissing",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "SchemaNotExist",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "SchemaStringMissing",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "SenderIsNotPeer",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "SignatureInvalid",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "str",
          "type": "string"
        }
      ],
      "name": "StringTooLong",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "UnknownSelector",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [],
      "name": "EIP712DomainChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "schemaId",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "emitter",
          "type": "address"
        }
      ],
      "name": "EmitterRevoked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "schemaId",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newEmitterAddress",
          "type": "address"
        }
      ],
      "name": "EmitterUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "previousAdminRole",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "newAdminRole",
          "type": "bytes32"
        }
      ],
      "name": "RoleAdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleRevoked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "SIDId",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "SIDRegistered",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "SIDId",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "SIDRevoked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "SIDId",
          "type": "bytes32"
        }
      ],
      "name": "SIDUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "schemaId",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "emitter",
          "type": "address"
        }
      ],
      "name": "SchemaRegistered",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "router",
          "type": "address"
        }
      ],
      "name": "SetRouter",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "DEFAULT_ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "NAME",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "OPERATOR_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "VERSION",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "eip712Domain",
      "outputs": [
        {
          "internalType": "bytes1",
          "name": "fields",
          "type": "bytes1"
        },
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "version",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "chainId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "verifyingContract",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "salt",
          "type": "bytes32"
        },
        {
          "internalType": "uint256[]",
          "name": "extensions",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleAdmin",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "grantRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "bytes32",
              "name": "schemaId",
              "type": "bytes32"
            },
            {
              "internalType": "address",
              "name": "user",
              "type": "address"
            },
            {
              "internalType": "uint64",
              "name": "expirationDate",
              "type": "uint64"
            },
            {
              "internalType": "bytes",
              "name": "data",
              "type": "bytes"
            },
            {
              "internalType": "string",
              "name": "metadata",
              "type": "string"
            }
          ],
          "internalType": "struct MessageLib.SendMessage",
          "name": "_payload",
          "type": "tuple"
        }
      ],
      "name": "registrySID",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "callerConfirmation",
          "type": "address"
        }
      ],
      "name": "renounceRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_sidId",
          "type": "bytes32"
        }
      ],
      "name": "revoke",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "revokeRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "router",
      "outputs": [
        {
          "internalType": "contract SingleRouter",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "bytes32",
              "name": "schemaId",
              "type": "bytes32"
            },
            {
              "internalType": "string",
              "name": "name",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "description",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "schema",
              "type": "string"
            },
            {
              "internalType": "address",
              "name": "emitter",
              "type": "address"
            }
          ],
          "internalType": "struct SIDSchema",
          "name": "_schema",
          "type": "tuple"
        },
        {
          "internalType": "bytes",
          "name": "_signature",
          "type": "bytes"
        }
      ],
      "name": "schemaRegistry",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "schemaId",
          "type": "bytes32"
        }
      ],
      "name": "schemas",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "schemaId",
          "type": "bytes32"
        },
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "description",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "schema",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "emitter",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_router",
          "type": "address"
        }
      ],
      "name": "setRouter",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "id",
          "type": "bytes32"
        }
      ],
      "name": "singleIdentifierData",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "SIDId",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "schemaId",
          "type": "bytes32"
        },
        {
          "internalType": "uint64",
          "name": "expirationDate",
          "type": "uint64"
        },
        {
          "internalType": "uint64",
          "name": "revocationDate",
          "type": "uint64"
        },
        {
          "internalType": "bool",
          "name": "revoked",
          "type": "bool"
        },
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        },
        {
          "internalType": "string",
          "name": "metadata",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "bytes32",
              "name": "id",
              "type": "bytes32"
            },
            {
              "internalType": "uint64",
              "name": "expirationDate",
              "type": "uint64"
            },
            {
              "internalType": "bytes",
              "name": "data",
              "type": "bytes"
            },
            {
              "internalType": "string",
              "name": "metadata",
              "type": "string"
            }
          ],
          "internalType": "struct MessageLib.UpdateMessage",
          "name": "_payload",
          "type": "tuple"
        }
      ],
      "name": "updateSID",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_schemaId",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "_emitter",
          "type": "address"
        }
      ],
      "name": "updateSchemaEmitter",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xe1257332e310afbbcf7173465d87d6fc493608ecef394a3cfc86225e467f45ad",
  "receipt": {
    "to": null,
    "from": "0x72f46FFBd3213218137015EBCcf70bFAaF619513",
    "contractAddress": "0xB9cC0Bb020cF55197C4C3d826AC87CAdba51f272",
    "transactionIndex": 2,
    "gasUsed": "1986151",
    "logsBloom": "0x
    "blockHash": "0xf4589b558e26582e0815a063f2e282116adcb33dfb39ab8fadbe7dd4a4c133ed",
    "transactionHash": "0xe1257332e310afbbcf7173465d87d6fc493608ecef394a3cfc86225e467f45ad",
    "logs": [
      {
        "transactionIndex": 2,
        "blockNumber": 5976863,
        "transactionHash": "0xe1257332e310afbbcf7173465d87d6fc493608ecef394a3cfc86225e467f45ad",
        "address": "0xB9cC0Bb020cF55197C4C3d826AC87CAdba51f272",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0x97667070c54ef182b0f5858b034beac1b6f3089aa2d3188bb1e8929f4fa9b929",
          "0x00000000000000000000000072f46ffbd3213218137015ebccf70bfaaf619513",
          "0x00000000000000000000000072f46ffbd3213218137015ebccf70bfaaf619513"
        ],
        "data": "0x",
        "logIndex": 2,
        "blockHash": "0xf4589b558e26582e0815a063f2e282116adcb33dfb39ab8fadbe7dd4a4c133ed"
      },
      {
        "transactionIndex": 2,
        "blockNumber": 5976863,
        "transactionHash": "0xe1257332e310afbbcf7173465d87d6fc493608ecef394a3cfc86225e467f45ad",
        "address": "0xB9cC0Bb020cF55197C4C3d826AC87CAdba51f272",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0x97667070c54ef182b0f5858b034beac1b6f3089aa2d3188bb1e8929f4fa9b929",
          "0x000000000000000000000000381c031baa5995d0cc52386508050ac947780815",
          "0x00000000000000000000000072f46ffbd3213218137015ebccf70bfaaf619513"
        ],
        "data": "0x",
        "logIndex": 3,
        "blockHash": "0xf4589b558e26582e0815a063f2e282116adcb33dfb39ab8fadbe7dd4a4c133ed"
      }
    ],
    "blockNumber": 5976863,
    "cumulativeGasUsed": "2102036",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x381c031bAA5995D0Cc52386508050Ac947780815"
  ],
  "numDeployments": 2,
  "solcInputHash": "0cbf7cfbe136b839052e6e1e71a1c86a",
  "metadata": "{\"compiler\":{\"version\":\"0.8.24+commit.e11b9ed9\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"AccessControlBadConfirmation\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"neededRole\",\"type\":\"bytes32\"}],\"name\":\"AccessControlUnauthorizedAccount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"AddressIsZero\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ECDSAInvalidSignature\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"length\",\"type\":\"uint256\"}],\"name\":\"ECDSAInvalidSignatureLength\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"ECDSAInvalidSignatureS\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"EmitterInvalid\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidShortString\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"MethodNotFound\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OnlyEmitter\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SIDAlreadyExists\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SIDNotExists\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SchemaAlreadyExists\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SchemaNameMissing\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SchemaNotExist\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SchemaStringMissing\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"SenderIsNotPeer\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SignatureInvalid\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"str\",\"type\":\"string\"}],\"name\":\"StringTooLong\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"UnknownSelector\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"EIP712DomainChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"schemaId\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"emitter\",\"type\":\"address\"}],\"name\":\"EmitterRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"schemaId\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newEmitterAddress\",\"type\":\"address\"}],\"name\":\"EmitterUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"SIDId\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"SIDRegistered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"SIDId\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"SIDRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"SIDId\",\"type\":\"bytes32\"}],\"name\":\"SIDUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"schemaId\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"emitter\",\"type\":\"address\"}],\"name\":\"SchemaRegistered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"router\",\"type\":\"address\"}],\"name\":\"SetRouter\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"NAME\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"OPERATOR_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"VERSION\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"eip712Domain\",\"outputs\":[{\"internalType\":\"bytes1\",\"name\":\"fields\",\"type\":\"bytes1\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"version\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"verifyingContract\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"salt\",\"type\":\"bytes32\"},{\"internalType\":\"uint256[]\",\"name\":\"extensions\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"schemaId\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"expirationDate\",\"type\":\"uint64\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"internalType\":\"string\",\"name\":\"metadata\",\"type\":\"string\"}],\"internalType\":\"struct MessageLib.SendMessage\",\"name\":\"_payload\",\"type\":\"tuple\"}],\"name\":\"registrySID\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"callerConfirmation\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_sidId\",\"type\":\"bytes32\"}],\"name\":\"revoke\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"router\",\"outputs\":[{\"internalType\":\"contract SingleRouter\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"schemaId\",\"type\":\"bytes32\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"schema\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"emitter\",\"type\":\"address\"}],\"internalType\":\"struct SIDSchema\",\"name\":\"_schema\",\"type\":\"tuple\"},{\"internalType\":\"bytes\",\"name\":\"_signature\",\"type\":\"bytes\"}],\"name\":\"schemaRegistry\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"schemaId\",\"type\":\"bytes32\"}],\"name\":\"schemas\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"schemaId\",\"type\":\"bytes32\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"schema\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"emitter\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_router\",\"type\":\"address\"}],\"name\":\"setRouter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"}],\"name\":\"singleIdentifierData\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"SIDId\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"schemaId\",\"type\":\"bytes32\"},{\"internalType\":\"uint64\",\"name\":\"expirationDate\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"revocationDate\",\"type\":\"uint64\"},{\"internalType\":\"bool\",\"name\":\"revoked\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"internalType\":\"string\",\"name\":\"metadata\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"},{\"internalType\":\"uint64\",\"name\":\"expirationDate\",\"type\":\"uint64\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"internalType\":\"string\",\"name\":\"metadata\",\"type\":\"string\"}],\"internalType\":\"struct MessageLib.UpdateMessage\",\"name\":\"_payload\",\"type\":\"tuple\"}],\"name\":\"updateSID\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_schemaId\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"_emitter\",\"type\":\"address\"}],\"name\":\"updateSchemaEmitter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"errors\":{\"AccessControlBadConfirmation()\":[{\"details\":\"The caller of a function is not the expected one. NOTE: Don't confuse with {AccessControlUnauthorizedAccount}.\"}],\"AccessControlUnauthorizedAccount(address,bytes32)\":[{\"details\":\"The `account` is missing a role.\"}],\"ECDSAInvalidSignature()\":[{\"details\":\"The signature derives the `address(0)`.\"}],\"ECDSAInvalidSignatureLength(uint256)\":[{\"details\":\"The signature has an invalid length.\"}],\"ECDSAInvalidSignatureS(bytes32)\":[{\"details\":\"The signature has an S value that is in the upper half order.\"}]},\"events\":{\"EIP712DomainChanged()\":{\"details\":\"MAY be emitted to signal that the domain could have changed.\"},\"RoleAdminChanged(bytes32,bytes32,bytes32)\":{\"details\":\"Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole` `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite {RoleAdminChanged} not being emitted signaling this.\"},\"RoleGranted(bytes32,address,address)\":{\"details\":\"Emitted when `account` is granted `role`. `sender` is the account that originated the contract call, an admin role bearer except when using {AccessControl-_setupRole}.\"},\"RoleRevoked(bytes32,address,address)\":{\"details\":\"Emitted when `account` is revoked `role`. `sender` is the account that originated the contract call:   - if using `revokeRole`, it is the admin role bearer   - if using `renounceRole`, it is the role bearer (i.e. `account`)\"}},\"kind\":\"dev\",\"methods\":{\"eip712Domain()\":{\"details\":\"See {IERC-5267}.\"},\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `callerConfirmation`. May emit a {RoleRevoked} event.\"},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/SingleIdentifierRegistry.sol\":\"SingleIdentifierRegistry\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts/access/AccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IAccessControl} from \\\"./IAccessControl.sol\\\";\\nimport {Context} from \\\"../utils/Context.sol\\\";\\nimport {ERC165} from \\\"../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```solidity\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```solidity\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it. We recommend using {AccessControlDefaultAdminRules}\\n * to enforce additional security measures for this role.\\n */\\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\\n    struct RoleData {\\n        mapping(address account => bool) hasRole;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 role => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with an {AccessControlUnauthorizedAccount} error including the required role.\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual returns (bool) {\\n        return _roles[role].hasRole[account];\\n    }\\n\\n    /**\\n     * @dev Reverts with an {AccessControlUnauthorizedAccount} error if `_msgSender()`\\n     * is missing `role`. Overriding this function changes the behavior of the {onlyRole} modifier.\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Reverts with an {AccessControlUnauthorizedAccount} error if `account`\\n     * is missing `role`.\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert AccessControlUnauthorizedAccount(account, role);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `callerConfirmation`.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function renounceRole(bytes32 role, address callerConfirmation) public virtual {\\n        if (callerConfirmation != _msgSender()) {\\n            revert AccessControlBadConfirmation();\\n        }\\n\\n        _revokeRole(role, callerConfirmation);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Attempts to grant `role` to `account` and returns a boolean indicating if `role` was granted.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual returns (bool) {\\n        if (!hasRole(role, account)) {\\n            _roles[role].hasRole[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Attempts to revoke `role` to `account` and returns a boolean indicating if `role` was revoked.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual returns (bool) {\\n        if (hasRole(role, account)) {\\n            _roles[role].hasRole[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa0e92d42942f4f57c5be50568dac11e9d00c93efcb458026e18d2d9b9b2e7308\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/IAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev The `account` is missing a role.\\n     */\\n    error AccessControlUnauthorizedAccount(address account, bytes32 neededRole);\\n\\n    /**\\n     * @dev The caller of a function is not the expected one.\\n     *\\n     * NOTE: Don't confuse with {AccessControlUnauthorizedAccount}.\\n     */\\n    error AccessControlBadConfirmation();\\n\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `callerConfirmation`.\\n     */\\n    function renounceRole(bytes32 role, address callerConfirmation) external;\\n}\\n\",\"keccak256\":\"0xb6b36edd6a2999fd243ff226d6cbf84bd71af2432bbd0dfe19392996a1d9cb41\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC5267.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/IERC5267.sol)\\n\\npragma solidity ^0.8.20;\\n\\ninterface IERC5267 {\\n    /**\\n     * @dev MAY be emitted to signal that the domain could have changed.\\n     */\\n    event EIP712DomainChanged();\\n\\n    /**\\n     * @dev returns the fields and values that describe the domain separator used by this contract for EIP-712\\n     * signature.\\n     */\\n    function eip712Domain()\\n        external\\n        view\\n        returns (\\n            bytes1 fields,\\n            string memory name,\\n            string memory version,\\n            uint256 chainId,\\n            address verifyingContract,\\n            bytes32 salt,\\n            uint256[] memory extensions\\n        );\\n}\\n\",\"keccak256\":\"0x92aa1df62dc3d33f1656d63bede0923e0df0b706ad4137c8b10b0a8fe549fd92\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/ShortStrings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/ShortStrings.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {StorageSlot} from \\\"./StorageSlot.sol\\\";\\n\\n// | string  | 0xAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA   |\\n// | length  | 0x                                                              BB |\\ntype ShortString is bytes32;\\n\\n/**\\n * @dev This library provides functions to convert short memory strings\\n * into a `ShortString` type that can be used as an immutable variable.\\n *\\n * Strings of arbitrary length can be optimized using this library if\\n * they are short enough (up to 31 bytes) by packing them with their\\n * length (1 byte) in a single EVM word (32 bytes). Additionally, a\\n * fallback mechanism can be used for every other case.\\n *\\n * Usage example:\\n *\\n * ```solidity\\n * contract Named {\\n *     using ShortStrings for *;\\n *\\n *     ShortString private immutable _name;\\n *     string private _nameFallback;\\n *\\n *     constructor(string memory contractName) {\\n *         _name = contractName.toShortStringWithFallback(_nameFallback);\\n *     }\\n *\\n *     function name() external view returns (string memory) {\\n *         return _name.toStringWithFallback(_nameFallback);\\n *     }\\n * }\\n * ```\\n */\\nlibrary ShortStrings {\\n    // Used as an identifier for strings longer than 31 bytes.\\n    bytes32 private constant FALLBACK_SENTINEL = 0x00000000000000000000000000000000000000000000000000000000000000FF;\\n\\n    error StringTooLong(string str);\\n    error InvalidShortString();\\n\\n    /**\\n     * @dev Encode a string of at most 31 chars into a `ShortString`.\\n     *\\n     * This will trigger a `StringTooLong` error is the input string is too long.\\n     */\\n    function toShortString(string memory str) internal pure returns (ShortString) {\\n        bytes memory bstr = bytes(str);\\n        if (bstr.length > 31) {\\n            revert StringTooLong(str);\\n        }\\n        return ShortString.wrap(bytes32(uint256(bytes32(bstr)) | bstr.length));\\n    }\\n\\n    /**\\n     * @dev Decode a `ShortString` back to a \\\"normal\\\" string.\\n     */\\n    function toString(ShortString sstr) internal pure returns (string memory) {\\n        uint256 len = byteLength(sstr);\\n        // using `new string(len)` would work locally but is not memory safe.\\n        string memory str = new string(32);\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            mstore(str, len)\\n            mstore(add(str, 0x20), sstr)\\n        }\\n        return str;\\n    }\\n\\n    /**\\n     * @dev Return the length of a `ShortString`.\\n     */\\n    function byteLength(ShortString sstr) internal pure returns (uint256) {\\n        uint256 result = uint256(ShortString.unwrap(sstr)) & 0xFF;\\n        if (result > 31) {\\n            revert InvalidShortString();\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Encode a string into a `ShortString`, or write it to storage if it is too long.\\n     */\\n    function toShortStringWithFallback(string memory value, string storage store) internal returns (ShortString) {\\n        if (bytes(value).length < 32) {\\n            return toShortString(value);\\n        } else {\\n            StorageSlot.getStringSlot(store).value = value;\\n            return ShortString.wrap(FALLBACK_SENTINEL);\\n        }\\n    }\\n\\n    /**\\n     * @dev Decode a string that was encoded to `ShortString` or written to storage using {setWithFallback}.\\n     */\\n    function toStringWithFallback(ShortString value, string storage store) internal pure returns (string memory) {\\n        if (ShortString.unwrap(value) != FALLBACK_SENTINEL) {\\n            return toString(value);\\n        } else {\\n            return store;\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the length of a string that was encoded to `ShortString` or written to storage using\\n     * {setWithFallback}.\\n     *\\n     * WARNING: This will return the \\\"byte length\\\" of the string. This may not reflect the actual length in terms of\\n     * actual characters as the UTF-8 encoding of a single character can span over multiple bytes.\\n     */\\n    function byteLengthWithFallback(ShortString value, string storage store) internal view returns (uint256) {\\n        if (ShortString.unwrap(value) != FALLBACK_SENTINEL) {\\n            return byteLength(value);\\n        } else {\\n            return bytes(store).length;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x18a7171df639a934592915a520ecb97c5bbc9675a1105607aac8a94e72bf62c6\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/StorageSlot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/StorageSlot.sol)\\n// This file was procedurally generated from scripts/generate/templates/StorageSlot.js.\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```solidity\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(newImplementation.code.length > 0);\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n */\\nlibrary StorageSlot {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    struct StringSlot {\\n        string value;\\n    }\\n\\n    struct BytesSlot {\\n        bytes value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` with member `value` located at `slot`.\\n     */\\n    function getStringSlot(bytes32 slot) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` representation of the string storage pointer `store`.\\n     */\\n    function getStringSlot(string storage store) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` with member `value` located at `slot`.\\n     */\\n    function getBytesSlot(bytes32 slot) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` representation of the bytes storage pointer `store`.\\n     */\\n    function getBytesSlot(bytes storage store) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x32ba59b4b7299237c8ba56319110989d7978a039faf754793064e967e5894418\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Math} from \\\"./math/Math.sol\\\";\\nimport {SignedMath} from \\\"./math/SignedMath.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant HEX_DIGITS = \\\"0123456789abcdef\\\";\\n    uint8 private constant ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev The `value` string doesn't fit in the specified `length`.\\n     */\\n    error StringsInsufficientHexLength(uint256 value, uint256 length);\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), HEX_DIGITS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toStringSigned(int256 value) internal pure returns (string memory) {\\n        return string.concat(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMath.abs(value)));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        uint256 localValue = value;\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = HEX_DIGITS[localValue & 0xf];\\n            localValue >>= 4;\\n        }\\n        if (localValue != 0) {\\n            revert StringsInsufficientHexLength(value, length);\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal\\n     * representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return bytes(a).length == bytes(b).length && keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\",\"keccak256\":\"0x55f102ea785d8399c0e58d1108e2d289506dde18abc6db1b7f68c1f9f9bc5792\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/cryptography/ECDSA.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSA {\\n    enum RecoverError {\\n        NoError,\\n        InvalidSignature,\\n        InvalidSignatureLength,\\n        InvalidSignatureS\\n    }\\n\\n    /**\\n     * @dev The signature derives the `address(0)`.\\n     */\\n    error ECDSAInvalidSignature();\\n\\n    /**\\n     * @dev The signature has an invalid length.\\n     */\\n    error ECDSAInvalidSignatureLength(uint256 length);\\n\\n    /**\\n     * @dev The signature has an S value that is in the upper half order.\\n     */\\n    error ECDSAInvalidSignatureS(bytes32 s);\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with `signature` or an error. This will not\\n     * return address(0) without also returning an error description. Errors are documented using an enum (error type)\\n     * and a bytes32 providing additional information about the error.\\n     *\\n     * If no error is returned, then the address can be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM precompile allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {MessageHashUtils-toEthSignedMessageHash} on it.\\n     *\\n     * Documentation for signature generation:\\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\\n     */\\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError, bytes32) {\\n        if (signature.length == 65) {\\n            bytes32 r;\\n            bytes32 s;\\n            uint8 v;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                s := mload(add(signature, 0x40))\\n                v := byte(0, mload(add(signature, 0x60)))\\n            }\\n            return tryRecover(hash, v, r, s);\\n        } else {\\n            return (address(0), RecoverError.InvalidSignatureLength, bytes32(signature.length));\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM precompile allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {MessageHashUtils-toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        (address recovered, RecoverError error, bytes32 errorArg) = tryRecover(hash, signature);\\n        _throwError(error, errorArg);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\\n     *\\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\\n     */\\n    function tryRecover(bytes32 hash, bytes32 r, bytes32 vs) internal pure returns (address, RecoverError, bytes32) {\\n        unchecked {\\n            bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\\n            // We do not check for an overflow here since the shift operation results in 0 or 1.\\n            uint8 v = uint8((uint256(vs) >> 255) + 27);\\n            return tryRecover(hash, v, r, s);\\n        }\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\\n     */\\n    function recover(bytes32 hash, bytes32 r, bytes32 vs) internal pure returns (address) {\\n        (address recovered, RecoverError error, bytes32 errorArg) = tryRecover(hash, r, vs);\\n        _throwError(error, errorArg);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address, RecoverError, bytes32) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (301): 0 < s < secp256k1n \\u00f7 2 + 1, and for v in (302): v \\u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\n            return (address(0), RecoverError.InvalidSignatureS, s);\\n        }\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        if (signer == address(0)) {\\n            return (address(0), RecoverError.InvalidSignature, bytes32(0));\\n        }\\n\\n        return (signer, RecoverError.NoError, bytes32(0));\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) internal pure returns (address) {\\n        (address recovered, RecoverError error, bytes32 errorArg) = tryRecover(hash, v, r, s);\\n        _throwError(error, errorArg);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Optionally reverts with the corresponding custom error according to the `error` argument provided.\\n     */\\n    function _throwError(RecoverError error, bytes32 errorArg) private pure {\\n        if (error == RecoverError.NoError) {\\n            return; // no error: do nothing\\n        } else if (error == RecoverError.InvalidSignature) {\\n            revert ECDSAInvalidSignature();\\n        } else if (error == RecoverError.InvalidSignatureLength) {\\n            revert ECDSAInvalidSignatureLength(uint256(errorArg));\\n        } else if (error == RecoverError.InvalidSignatureS) {\\n            revert ECDSAInvalidSignatureS(errorArg);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xeed0a08b0b091f528356cbc7245891a4c748682d4f6a18055e8e6ca77d12a6cf\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/EIP712.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/cryptography/EIP712.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {MessageHashUtils} from \\\"./MessageHashUtils.sol\\\";\\nimport {ShortStrings, ShortString} from \\\"../ShortStrings.sol\\\";\\nimport {IERC5267} from \\\"../../interfaces/IERC5267.sol\\\";\\n\\n/**\\n * @dev https://eips.ethereum.org/EIPS/eip-712[EIP 712] is a standard for hashing and signing of typed structured data.\\n *\\n * The encoding scheme specified in the EIP requires a domain separator and a hash of the typed structured data, whose\\n * encoding is very generic and therefore its implementation in Solidity is not feasible, thus this contract\\n * does not implement the encoding itself. Protocols need to implement the type-specific encoding they need in order to\\n * produce the hash of their typed data using a combination of `abi.encode` and `keccak256`.\\n *\\n * This contract implements the EIP 712 domain separator ({_domainSeparatorV4}) that is used as part of the encoding\\n * scheme, and the final step of the encoding to obtain the message digest that is then signed via ECDSA\\n * ({_hashTypedDataV4}).\\n *\\n * The implementation of the domain separator was designed to be as efficient as possible while still properly updating\\n * the chain id to protect against replay attacks on an eventual fork of the chain.\\n *\\n * NOTE: This contract implements the version of the encoding known as \\\"v4\\\", as implemented by the JSON RPC method\\n * https://docs.metamask.io/guide/signing-data.html[`eth_signTypedDataV4` in MetaMask].\\n *\\n * NOTE: In the upgradeable version of this contract, the cached values will correspond to the address, and the domain\\n * separator of the implementation contract. This will cause the {_domainSeparatorV4} function to always rebuild the\\n * separator from the immutable values, which is cheaper than accessing a cached version in cold storage.\\n *\\n * @custom:oz-upgrades-unsafe-allow state-variable-immutable\\n */\\nabstract contract EIP712 is IERC5267 {\\n    using ShortStrings for *;\\n\\n    bytes32 private constant TYPE_HASH =\\n        keccak256(\\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\");\\n\\n    // Cache the domain separator as an immutable value, but also store the chain id that it corresponds to, in order to\\n    // invalidate the cached domain separator if the chain id changes.\\n    bytes32 private immutable _cachedDomainSeparator;\\n    uint256 private immutable _cachedChainId;\\n    address private immutable _cachedThis;\\n\\n    bytes32 private immutable _hashedName;\\n    bytes32 private immutable _hashedVersion;\\n\\n    ShortString private immutable _name;\\n    ShortString private immutable _version;\\n    string private _nameFallback;\\n    string private _versionFallback;\\n\\n    /**\\n     * @dev Initializes the domain separator and parameter caches.\\n     *\\n     * The meaning of `name` and `version` is specified in\\n     * https://eips.ethereum.org/EIPS/eip-712#definition-of-domainseparator[EIP 712]:\\n     *\\n     * - `name`: the user readable name of the signing domain, i.e. the name of the DApp or the protocol.\\n     * - `version`: the current major version of the signing domain.\\n     *\\n     * NOTE: These parameters cannot be changed except through a xref:learn::upgrading-smart-contracts.adoc[smart\\n     * contract upgrade].\\n     */\\n    constructor(string memory name, string memory version) {\\n        _name = name.toShortStringWithFallback(_nameFallback);\\n        _version = version.toShortStringWithFallback(_versionFallback);\\n        _hashedName = keccak256(bytes(name));\\n        _hashedVersion = keccak256(bytes(version));\\n\\n        _cachedChainId = block.chainid;\\n        _cachedDomainSeparator = _buildDomainSeparator();\\n        _cachedThis = address(this);\\n    }\\n\\n    /**\\n     * @dev Returns the domain separator for the current chain.\\n     */\\n    function _domainSeparatorV4() internal view returns (bytes32) {\\n        if (address(this) == _cachedThis && block.chainid == _cachedChainId) {\\n            return _cachedDomainSeparator;\\n        } else {\\n            return _buildDomainSeparator();\\n        }\\n    }\\n\\n    function _buildDomainSeparator() private view returns (bytes32) {\\n        return keccak256(abi.encode(TYPE_HASH, _hashedName, _hashedVersion, block.chainid, address(this)));\\n    }\\n\\n    /**\\n     * @dev Given an already https://eips.ethereum.org/EIPS/eip-712#definition-of-hashstruct[hashed struct], this\\n     * function returns the hash of the fully encoded EIP712 message for this domain.\\n     *\\n     * This hash can be used together with {ECDSA-recover} to obtain the signer of a message. For example:\\n     *\\n     * ```solidity\\n     * bytes32 digest = _hashTypedDataV4(keccak256(abi.encode(\\n     *     keccak256(\\\"Mail(address to,string contents)\\\"),\\n     *     mailTo,\\n     *     keccak256(bytes(mailContents))\\n     * )));\\n     * address signer = ECDSA.recover(digest, signature);\\n     * ```\\n     */\\n    function _hashTypedDataV4(bytes32 structHash) internal view virtual returns (bytes32) {\\n        return MessageHashUtils.toTypedDataHash(_domainSeparatorV4(), structHash);\\n    }\\n\\n    /**\\n     * @dev See {IERC-5267}.\\n     */\\n    function eip712Domain()\\n        public\\n        view\\n        virtual\\n        returns (\\n            bytes1 fields,\\n            string memory name,\\n            string memory version,\\n            uint256 chainId,\\n            address verifyingContract,\\n            bytes32 salt,\\n            uint256[] memory extensions\\n        )\\n    {\\n        return (\\n            hex\\\"0f\\\", // 01111\\n            _EIP712Name(),\\n            _EIP712Version(),\\n            block.chainid,\\n            address(this),\\n            bytes32(0),\\n            new uint256[](0)\\n        );\\n    }\\n\\n    /**\\n     * @dev The name parameter for the EIP712 domain.\\n     *\\n     * NOTE: By default this function reads _name which is an immutable value.\\n     * It only reads from storage if necessary (in case the value is too large to fit in a ShortString).\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function _EIP712Name() internal view returns (string memory) {\\n        return _name.toStringWithFallback(_nameFallback);\\n    }\\n\\n    /**\\n     * @dev The version parameter for the EIP712 domain.\\n     *\\n     * NOTE: By default this function reads _version which is an immutable value.\\n     * It only reads from storage if necessary (in case the value is too large to fit in a ShortString).\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function _EIP712Version() internal view returns (string memory) {\\n        return _version.toStringWithFallback(_versionFallback);\\n    }\\n}\\n\",\"keccak256\":\"0x999f705a027ed6dc2d4e0df2cc4a509852c6bfd11de1c8161bf88832d0503fd0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/MessageHashUtils.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/cryptography/MessageHashUtils.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Strings} from \\\"../Strings.sol\\\";\\n\\n/**\\n * @dev Signature message hash utilities for producing digests to be consumed by {ECDSA} recovery or signing.\\n *\\n * The library provides methods for generating a hash of a message that conforms to the\\n * https://eips.ethereum.org/EIPS/eip-191[EIP 191] and https://eips.ethereum.org/EIPS/eip-712[EIP 712]\\n * specifications.\\n */\\nlibrary MessageHashUtils {\\n    /**\\n     * @dev Returns the keccak256 digest of an EIP-191 signed data with version\\n     * `0x45` (`personal_sign` messages).\\n     *\\n     * The digest is calculated by prefixing a bytes32 `messageHash` with\\n     * `\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\"` and hashing the result. It corresponds with the\\n     * hash signed when using the https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`] JSON-RPC method.\\n     *\\n     * NOTE: The `messageHash` parameter is intended to be the result of hashing a raw message with\\n     * keccak256, although any bytes32 value can be safely used because the final digest will\\n     * be re-hashed.\\n     *\\n     * See {ECDSA-recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 messageHash) internal pure returns (bytes32 digest) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            mstore(0x00, \\\"\\\\x19Ethereum Signed Message:\\\\n32\\\") // 32 is the bytes-length of messageHash\\n            mstore(0x1c, messageHash) // 0x1c (28) is the length of the prefix\\n            digest := keccak256(0x00, 0x3c) // 0x3c is the length of the prefix (0x1c) + messageHash (0x20)\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the keccak256 digest of an EIP-191 signed data with version\\n     * `0x45` (`personal_sign` messages).\\n     *\\n     * The digest is calculated by prefixing an arbitrary `message` with\\n     * `\\\"\\\\x19Ethereum Signed Message:\\\\n\\\" + len(message)` and hashing the result. It corresponds with the\\n     * hash signed when using the https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`] JSON-RPC method.\\n     *\\n     * See {ECDSA-recover}.\\n     */\\n    function toEthSignedMessageHash(bytes memory message) internal pure returns (bytes32) {\\n        return\\n            keccak256(bytes.concat(\\\"\\\\x19Ethereum Signed Message:\\\\n\\\", bytes(Strings.toString(message.length)), message));\\n    }\\n\\n    /**\\n     * @dev Returns the keccak256 digest of an EIP-191 signed data with version\\n     * `0x00` (data with intended validator).\\n     *\\n     * The digest is calculated by prefixing an arbitrary `data` with `\\\"\\\\x19\\\\x00\\\"` and the intended\\n     * `validator` address. Then hashing the result.\\n     *\\n     * See {ECDSA-recover}.\\n     */\\n    function toDataWithIntendedValidatorHash(address validator, bytes memory data) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(hex\\\"19_00\\\", validator, data));\\n    }\\n\\n    /**\\n     * @dev Returns the keccak256 digest of an EIP-712 typed data (EIP-191 version `0x01`).\\n     *\\n     * The digest is calculated from a `domainSeparator` and a `structHash`, by prefixing them with\\n     * `\\\\x19\\\\x01` and hashing the result. It corresponds to the hash signed by the\\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`] JSON-RPC method as part of EIP-712.\\n     *\\n     * See {ECDSA-recover}.\\n     */\\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32 digest) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(ptr, hex\\\"19_01\\\")\\n            mstore(add(ptr, 0x02), domainSeparator)\\n            mstore(add(ptr, 0x22), structHash)\\n            digest := keccak256(ptr, 0x42)\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xba333517a3add42cd35fe877656fc3dfcc9de53baa4f3aabbd6d12a92e4ea435\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0x9e8778b14317ba9e256c30a76fd6c32b960af621987f56069e1e819c77c6a133\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x4296879f55019b23e135000eb36896057e7101fb7fb859c5ef690cf14643757b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    /**\\n     * @dev Muldiv operation overflow.\\n     */\\n    error MathOverflowedMulDiv();\\n\\n    enum Rounding {\\n        Floor, // Toward negative infinity\\n        Ceil, // Toward positive infinity\\n        Trunc, // Toward zero\\n        Expand // Away from zero\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds towards infinity instead\\n     * of rounding towards zero.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (b == 0) {\\n            // Guarantee the same behavior as in a regular Solidity division.\\n            return a / b;\\n        }\\n\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or\\n     * denominator == 0.\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv) with further edits by\\n     * Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0 = x * y; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            if (denominator <= prod1) {\\n                revert MathOverflowedMulDiv();\\n            }\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator.\\n            // Always >= 1. See https://cs.stackexchange.com/q/138556/92363.\\n\\n            uint256 twos = denominator & (0 - denominator);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also\\n            // works in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (unsignedRoundsUp(rounding) && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded\\n     * towards zero.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (unsignedRoundsUp(rounding) && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (unsignedRoundsUp(rounding) && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (unsignedRoundsUp(rounding) && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (unsignedRoundsUp(rounding) && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns whether a provided rounding mode is considered rounding up for unsigned integers.\\n     */\\n    function unsignedRoundsUp(Rounding rounding) internal pure returns (bool) {\\n        return uint8(rounding) % 2 == 1;\\n    }\\n}\\n\",\"keccak256\":\"0x005ec64c6313f0555d59e278f9a7a5ab2db5bdc72a027f255a37c327af1ec02d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SignedMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x5f7e4076e175393767754387c962926577f1660dd9b810187b9002407656be72\",\"license\":\"MIT\"},\"contracts/SingleIdentifierRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity =0.8.24;\\n\\nimport {EIP712} from \\\"@openzeppelin/contracts/utils/cryptography/EIP712.sol\\\";\\nimport {ECDSA} from \\\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\\\";\\n\\nimport {SID, SIDSchema} from \\\"./types/Structs.sol\\\";\\nimport {ISingleIdentifierRegistry} from \\\"./interfaces/ISingleIdentifierRegistry.sol\\\";\\nimport {MessageLib} from \\\"./lib/MessageLib.sol\\\";\\nimport {AccessControl} from \\\"@openzeppelin/contracts/access/AccessControl.sol\\\";\\nimport {SingleRouter} from \\\"./SingleRouter.sol\\\";\\nimport {IConnector} from \\\"./interfaces/IConnector.sol\\\";\\n\\ncontract SingleIdentifierRegistry is ISingleIdentifierRegistry, EIP712, AccessControl {\\n    bytes32 public constant OPERATOR_ROLE = keccak256(\\\"OPERATOR_ROLE\\\");\\n    string public constant NAME = \\\"Rubyscore_Single_Identifier_Registry\\\";\\n    string public constant VERSION = \\\"0.0.1\\\";\\n\\n    SingleRouter public router;\\n\\n    mapping(bytes32 schemaId => SIDSchema schema) public schemas;\\n    mapping(bytes32 id => SID sid) public singleIdentifierData;\\n\\n    uint256 private sidCounter;\\n    uint256 private emitterCounter;\\n\\n    event SchemaRegistered(bytes32 indexed schemaId, address indexed emitter);\\n    event EmitterUpdated(bytes32 indexed schemaId, address indexed newEmitterAddress);\\n    event EmitterRevoked(bytes32 indexed schemaId, address indexed emitter);\\n    event SIDRegistered(bytes32 indexed SIDId, address indexed user);\\n    event SIDRevoked(bytes32 indexed SIDId, address indexed user);\\n    event SIDUpdated(bytes32 indexed SIDId);\\n    event SetRouter(address indexed router);\\n\\n    error SchemaNameMissing();\\n    error SchemaStringMissing();\\n    error SchemaNotExist();\\n    error EmitterInvalid();\\n    error SchemaAlreadyExists();\\n    error SIDAlreadyExists();\\n    error SIDNotExists();\\n    error SignatureInvalid();\\n    error OnlyEmitter();\\n    error UnknownSelector();\\n    error MethodNotFound(bytes data);\\n    error AddressIsZero();\\n    error SenderIsNotPeer(address sender);\\n\\n    constructor(address _operator) EIP712(NAME, VERSION) {\\n        if (_operator == address(0)) revert AddressIsZero();\\n\\n        _grantRole(OPERATOR_ROLE, msg.sender);\\n        _grantRole(OPERATOR_ROLE, _operator);\\n    }\\n\\n    function schemaRegistry(SIDSchema calldata _schema, bytes calldata _signature) external {\\n        if (bytes(_schema.name).length == 0) revert SchemaNameMissing();\\n        if (bytes(_schema.schema).length == 0) revert SchemaStringMissing();\\n        if (_signature.length == 0) revert SignatureInvalid();\\n\\n        bytes32 schemaId = _generateSchemaId(msg.sender, _schema.schema);\\n        if (schemas[schemaId].schemaId != bytes32(0)) revert SchemaAlreadyExists();\\n\\n        bytes32 digest = _hashTypedDataV4(\\n            keccak256(\\n                abi.encode(\\n                    keccak256(\\\"SchemaRegistryParams(string name,string description,string schema,address emitter)\\\"),\\n                    keccak256(abi.encodePacked(_schema.name)),\\n                    keccak256(abi.encodePacked(_schema.description)),\\n                    keccak256(abi.encodePacked(_schema.schema)),\\n                    _schema.emitter\\n                )\\n            )\\n        );\\n        _checkRole(OPERATOR_ROLE, ECDSA.recover(digest, _signature));\\n\\n        schemas[schemaId] = _schema;\\n        emitterCounter++;\\n\\n        emit SchemaRegistered(schemaId, msg.sender);\\n    }\\n\\n    function updateSchemaEmitter(bytes32 _schemaId, address _emitter) external onlyRole(OPERATOR_ROLE) {\\n        if (schemas[_schemaId].schemaId == bytes32(0)) revert SchemaNotExist();\\n        if (_emitter == address(0)) revert EmitterInvalid();\\n\\n        schemas[_schemaId].emitter = _emitter;\\n        emit EmitterUpdated(_schemaId, _emitter);\\n    }\\n\\n    function registrySID(MessageLib.SendMessage memory _payload) external onlyConnector {\\n\\n        SIDSchema memory schema = schemas[_payload.schemaId];\\n        if (schema.schemaId == bytes32(0)) revert SchemaNotExist();\\n\\n        bytes32 sidId = _generateSIDId(_payload.schemaId, _payload.user);\\n\\n        if (singleIdentifierData[sidId].SIDId != bytes32(0)) revert SIDAlreadyExists();\\n\\n        singleIdentifierData[sidId] = SID(\\n            sidId,\\n            _payload.schemaId,\\n            _payload.expirationDate,\\n            0,\\n            false,\\n            _payload.user,\\n            _payload.data,\\n            _payload.metadata\\n        );\\n\\n        sidCounter++;\\n\\n        emit SIDRegistered(sidId, _payload.user);\\n    }\\n\\n    function updateSID(MessageLib.UpdateMessage memory _payload) external onlyConnector {\\n\\n        SID storage sid = singleIdentifierData[_payload.id];\\n        if (sid.SIDId == bytes32(0)) revert SIDNotExists();\\n\\n        if (_payload.expirationDate != uint64(0)) {\\n            sid.expirationDate = _payload.expirationDate;\\n        }\\n\\n        if (_payload.data.length != 0) {\\n            sid.data = _payload.data;\\n        }\\n\\n        if (bytes(_payload.metadata).length != 0) {\\n            sid.metadata = _payload.metadata;\\n        }\\n\\n        emit SIDUpdated(_payload.id);\\n    }\\n\\n    function setRouter(address _router) external onlyRole(OPERATOR_ROLE) {\\n        if (_router == address(0)) revert AddressIsZero();\\n\\n        router = SingleRouter(_router);\\n        emit SetRouter(_router);\\n    }\\n\\n    function _generateSchemaId(address _emitter, string calldata _schema) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(_emitter, _schema));\\n    }\\n\\n    function revoke(bytes32 _sidId) public {\\n        SID storage sid = singleIdentifierData[_sidId];\\n        if (sid.SIDId == bytes32(0)) revert SIDNotExists();\\n\\n        SIDSchema memory schema = schemas[sid.schemaId];\\n        if (schema.emitter != msg.sender) revert OnlyEmitter();\\n\\n        sid.revocationDate = uint64(block.timestamp);\\n        sid.revoked = true;\\n\\n        emit SIDRevoked(_sidId, sid.user);\\n    }\\n\\n    function _generateSIDId(bytes32 _schemaId, address _userAddress) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(_schemaId, _userAddress));\\n    }\\n\\n    modifier onlyConnector() {\\n        uint32 connectorId = IConnector(msg.sender).connectorId();\\n        if (!router.isAvailablePeer(block.chainid, connectorId, msg.sender)) revert SenderIsNotPeer(msg.sender);\\n        _;\\n    }\\n}\\n\",\"keccak256\":\"0xbb6c9f46a955bf76cad097dfca30e63ebe21886824c8b79357937c1668957d3f\",\"license\":\"MIT\"},\"contracts/SingleRouter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity =0.8.24;\\n\\nimport {IConnector} from \\\"./interfaces/IConnector.sol\\\";\\nimport {Destination} from \\\"./types/Structs.sol\\\";\\nimport {AccessControl} from \\\"@openzeppelin/contracts/access/AccessControl.sol\\\";\\n\\n\\ncontract SingleRouter is AccessControl {\\n    bytes32 public constant OPERATOR_ROLE = keccak256(\\\"OPERATOR_ROLE\\\");\\n\\n    address[] public connectorsList;\\n\\n    mapping(uint32 connectorId => IConnector connector) public connectors;\\n    mapping(uint256 chainId => mapping(uint32 connectorId => bytes32 peer)) public peers;\\n\\n    function getRoute(uint32 _connectorId, uint256 _destinationChainId) external view returns (IConnector) {\\n        IConnector connector;\\n\\n        if (block.chainid == _destinationChainId) {\\n            connector = connectors[0];\\n        } else {\\n            connector = connectors[_connectorId];\\n        }\\n\\n        return connector;\\n    }\\n\\n    function getPeer(uint32 _connectorId, uint256 _chainId) external view returns (bytes32) {\\n        bytes32 peer = peers[_chainId][_connectorId];\\n        if (peer == bytes32(0)) revert PeerNotExist(_chainId);\\n\\n        return peer;\\n    }\\n\\n    function isAvailablePeer(uint256 _chainId, uint32 _connectorId, address _sender) external view returns (bool) {\\n        bytes32 senderInBytes32 = bytes32(uint256(uint160(_sender)));\\n\\n        bytes32 peer = peers[_chainId][_connectorId];\\n\\n        return senderInBytes32 == peer;\\n    }\\n\\n    event PeerSet(uint256 indexed chainId, uint32 indexed _connectorId, bytes32 peer);\\n    event SetConnector(uint32 indexed connectorId, address indexed transferProtocol);\\n    event SetProtocolChainId(uint32 protocolChainId, uint256 chainId);\\n\\n    error PeerNotExist(uint256 chainId);\\n    error PeerInvalid();\\n\\n    constructor(address _operator) {\\n\\n        _grantRole(OPERATOR_ROLE, msg.sender);\\n        _grantRole(OPERATOR_ROLE, _operator);\\n    }\\n\\n    function setPeer(uint256 _chainId, uint32 _connectorId, bytes32 _peer) external onlyRole(OPERATOR_ROLE) {\\n        _setPeer(_chainId, _connectorId, _peer);\\n    }\\n\\n    function setPeers(uint32 _connectorId, uint256[]  calldata _chainIds, bytes32[]  calldata _peers) external onlyRole(OPERATOR_ROLE) {\\n        require(_chainIds.length == _peers.length, \\\"Invalid arrays length.\\\");\\n\\n        for (uint256 i = 0; i < _chainIds.length; i++) {\\n            _setPeer(_chainIds[i], _connectorId, _peers[i]);\\n        }\\n    }\\n\\n    function setConnectors(uint32[] calldata _connectorIds, address[] calldata _connectors) external onlyRole(OPERATOR_ROLE) {\\n        require(_connectorIds.length == _connectors.length, \\\"Invalid arrays length.\\\");\\n\\n        for (uint256 i = 0; i < _connectors.length; i++) {\\n            _setConnector(_connectorIds[i], _connectors[i]);\\n        }\\n    }\\n\\n    function setConnector(uint32 connectorId, address _connector) external onlyRole(OPERATOR_ROLE) {\\n        _setConnector(connectorId, _connector);\\n    }\\n\\n    function _setConnector(uint32 _connectorId, address _connector) private {\\n        connectors[_connectorId] = IConnector(_connector);\\n\\n        IConnector(_connector).setConnectorId(_connectorId);\\n        emit SetConnector(_connectorId, _connector);\\n    }\\n\\n    function _setConnector(address _connector) private {\\n        uint32 connectorId = uint32(connectorsList.length);\\n\\n        connectors[connectorId] = IConnector(_connector);\\n\\n        IConnector(_connector).setConnectorId(connectorId);\\n        emit SetConnector(connectorId, _connector);\\n    }\\n\\n    function _setPeer(uint256 _chainId, uint32 _connectorId, bytes32 _peer) private {\\n        if (_peer == bytes32(0)) revert PeerInvalid();\\n\\n        peers[_chainId][_connectorId] = _peer;\\n        emit PeerSet(_chainId, _connectorId, _peer);\\n    }\\n}\\n\",\"keccak256\":\"0xc16d153092e9fefb68faa2a86bbfd833d0eecabe05a08155d65c194673438704\",\"license\":\"MIT\"},\"contracts/interfaces/IConnector.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity =0.8.24;\\n\\ninterface IConnector {\\n\\n    function sendMessage(uint256 _registryDst, bytes calldata _payload) external payable;\\n\\n    function quote(uint256 _registryDst, bytes memory _payload) external view returns (uint256);\\n\\n    function getProtocolId() external view returns (bytes32);\\n\\n    function getDestinationChainId(uint256 nativeChainId) external view returns (uint256);\\n\\n    function setConnectorId(uint32 _connectorId) external;\\n\\n    function connectorId() external view returns (uint32);\\n}\\n\",\"keccak256\":\"0x82b004b53b048e3ee386962fcf3362f53282da8a122018dcd841f7092cbdd7df\",\"license\":\"MIT\"},\"contracts/interfaces/ISingleIdentifierRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity =0.8.24;\\n\\nimport {SIDSchema, SID} from \\\"../types/Structs.sol\\\";\\nimport {MessageLib} from \\\"../lib/MessageLib.sol\\\";\\n\\ninterface ISingleIdentifierRegistry {\\n\\n    function registrySID(MessageLib.SendMessage memory _payload) external;\\n\\n    function updateSID(MessageLib.UpdateMessage memory _payload) external;\\n\\n    function schemaRegistry(SIDSchema calldata _passportSchema, bytes calldata _signature) external;\\n\\n    function updateSchemaEmitter(bytes32 _schemaId, address _emitter) external;\\n\\n    function revoke(bytes32 _passportId) external;\\n}\\n\",\"keccak256\":\"0x126fab85543450d721389c70be5d4cc079ba9cac069f1e956ce78b86e0f4a0bd\",\"license\":\"MIT\"},\"contracts/lib/MessageLib.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity =0.8.24;\\n\\nlibrary MessageLib {\\n\\n    struct SendMessage {\\n        bytes32 schemaId;\\n        address user;\\n        uint64 expirationDate;\\n        bytes data;\\n        string metadata;\\n    }\\n\\n    struct UpdateMessage {\\n        bytes32 id;\\n        uint64 expirationDate;\\n        bytes data;\\n        string metadata;\\n    }\\n\\n    enum MessageType {TYPE_SEND_REGISTER, TYPE_SEND_UPDATE}\\n\\n    struct DecodedMessage {\\n        MessageType messageType;\\n        SendMessage sendMessage;\\n        UpdateMessage renewalMessage;\\n    }\\n\\n    uint8 public constant TYPE_SEND_REGISTER = 1;\\n    uint8 public constant TYPE_SEND_UPDATE = 2;\\n\\n    function encodeMessage(SendMessage memory _message) internal pure returns (bytes memory) {\\n        return abi.encode(TYPE_SEND_REGISTER, _message.schemaId, _message.user, _message.expirationDate, _message.data, _message.metadata);\\n    }\\n\\n    function encodeMessage(UpdateMessage memory _message) internal pure returns (bytes memory) {\\n        return abi.encode(TYPE_SEND_UPDATE, _message.id, _message.expirationDate, _message.data, _message.metadata);\\n    }\\n\\n    function decodeMessage(bytes memory _rawData) internal pure returns (DecodedMessage memory) {\\n        uint8 messageType;\\n        assembly {\\n            messageType := mload(add(_rawData, 1))\\n        }\\n\\n        if (messageType == TYPE_SEND_REGISTER) {\\n            (,bytes32 schemaId,\\n                address user,\\n                uint64 expirationDate,\\n                bytes memory registerData,\\n                string memory metadata\\n            ) = abi.decode(_rawData, (uint8, bytes32, address, uint64, bytes, string));\\n\\n            SendMessage memory sendMessage = SendMessage(schemaId, user, expirationDate, registerData, metadata);\\n            return DecodedMessage(MessageType.TYPE_SEND_REGISTER, sendMessage, UpdateMessage(bytes32(0), 0, \\\"\\\", \\\"\\\"));\\n        } else if (messageType == TYPE_SEND_UPDATE) {\\n            (, bytes32 id, uint64 expirationDate, bytes memory updateData, string memory metadata) = abi.decode(_rawData, (uint8, bytes32, uint64, bytes, string));\\n\\n            UpdateMessage memory renewalMessage = UpdateMessage(id, expirationDate, updateData, metadata);\\n            return DecodedMessage(MessageType.TYPE_SEND_UPDATE, SendMessage(bytes32(0), address(0), 0, \\\"\\\", \\\"\\\"), renewalMessage);\\n        } else {\\n            revert(\\\"Unknown message type\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x94b769e8d5657230bc15e5d5b96741a783f2453dfa0de54506d86648e241ea79\",\"license\":\"MIT\"},\"contracts/types/Structs.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity =0.8.24;\\n\\n    struct SID {\\n        bytes32 SIDId;\\n        bytes32 schemaId;\\n        uint64 expirationDate;\\n        uint64 revocationDate;\\n        bool revoked;\\n        address user;\\n        bytes data;\\n        string metadata;\\n    }\\n\\n    struct SIDSchema {\\n        bytes32 schemaId;\\n        string name;\\n        string description;\\n        string schema;\\n        address emitter;\\n    }\\n\\n    struct Emitter {\\n        bytes32 emitterId;\\n        bytes32 schemaId;\\n        uint64 expirationDate;\\n        uint256 fee;\\n        uint256 registryChainId;\\n        address owner;\\n    }\\n\\n    struct Destination {\\n        uint256 chainId;\\n        uint32 layerZero;\\n        uint32 hyperlane;\\n    }\\n\\n    struct Peers {\\n        bytes32 sender;\\n        bytes32 receiver;\\n    }\\n\",\"keccak256\":\"0x92f3154973a3fdf4df4e5e8af680e6dc0c4f660c70d1a06425b23b259f55a7f1\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x61016034620001fa57601f620026a838819003918201601f19168301926001600160401b0392909183851183861017620001e4578160209284926040978852833981010312620001fa57516001600160a01b03811692838203620001fa578051916060830183811085821117620001e45782526024835260208301937f5275627973636f72655f53696e676c655f4964656e7469666965725f526567698552637374727960e01b8385015282519583870187811083821117620001e4578452600587526020870164302e302e3160d81b8152620000dc86620002b3565b96610120978852620000ee8962000486565b96610140978852519020978860e05251902096610100978089524660a05285519060208201927f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f84528783015260608201524660808201523060a082015260a0815260c081019381851090851117620001e4578386525190206080523060c05215620001d557506200018c906200018533620001ff565b50620001ff565b505191612074938462000634853960805184611e0c015260a05184611ec7015260c05184611dd6015260e05184611e5b01525183611e8101525182611548015251816115710152f35b63867915ab60e01b8152600490fd5b634e487b7160e01b600052604160045260246000fd5b600080fd5b6001600160a01b031660008181527f6bc781d8c7f9885ebbb3cefbc18932c491038e2ae5c5b56447891e0bd98ea16360205260408120549091907f97667070c54ef182b0f5858b034beac1b6f3089aa2d3188bb1e8929f4fa9b9299060ff16620002ae5780835260026020526040832082845260205260408320600160ff198254161790557f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d339380a4600190565b505090565b8051602091908281101562000352575090601f825111620002f15780825192015190808310620002e257501790565b82600019910360031b1b161790565b90604051809263305a27a960e01b82528060048301528251908160248401526000935b82851062000338575050604492506000838284010152601f80199101168101030190fd5b848101820151868601604401529381019385935062000314565b6001600160401b038111620001e4576000928354926001938481811c911680156200047b575b838210146200046757601f811162000431575b5081601f8411600114620003ca57509282939183928694620003be575b50501b916000199060031b1c191617905560ff90565b015192503880620003a8565b919083601f1981168780528488209488905b88838310620004165750505010620003fc575b505050811b01905560ff90565b015160001960f88460031b161c19169055388080620003ef565b858701518855909601959485019487935090810190620003dc565b85805284601f848820920160051c820191601f860160051c015b8281106200045b5750506200038b565b8781550185906200044b565b634e487b7160e01b86526022600452602486fd5b90607f169062000378565b805160209081811015620005145750601f825111620004b35780825192015190808310620002e257501790565b90604051809263305a27a960e01b82528060048301528251908160248401526000935b828510620004fa575050604492506000838284010152601f80199101168101030190fd5b8481018201518686016044015293810193859350620004d6565b9192916001600160401b038111620001e45760019182548381811c9116801562000628575b828210146200061257601f8111620005d9575b5080601f83116001146200058c57508192939460009262000580575b5050600019600383901b1c191690821b17905560ff90565b01519050388062000568565b90601f198316958460005282600020926000905b888210620005c15750508385969710620003fc57505050811b01905560ff90565b808785968294968601518155019501930190620005a0565b8360005283601f83600020920160051c820191601f850160051c015b828110620006055750506200054c565b60008155018490620005f5565b634e487b7160e01b600052602260045260246000fd5b90607f16906200053956fe608080604052600436101561001357600080fd5b60003560e01c90816301ffc9a7146116f357508063248a9ca3146116c45780632f2ff15d1461168357806336568abe1461163c57806384b0196e1461153257806391d14854146114e5578063a217fddf146114c9578063a330273014611424578063a3cbcb24146110b3578063a3f4df7e14611048578063b75c7dc614610f0a578063c0d7865514610e8a578063ca2adef614610dcb578063d547741f14610d88578063eb36bbba1461082c578063f2e4cdea1461027d578063f5b541a614610242578063f887ea4014610219578063f8cf04891461014a5763ffa1ad74146100fb57600080fd5b346101455760003660031901126101455761014160405161011b816117ed565b6005815264302e302e3160d81b602082015260405191829160208352602083019061175c565b0390f35b600080fd5b346101455760203660031901126101455760043560005260056020526040600020805490610141600561020b6001840154936002810154956001600160401b039660ff60018060a01b03600385015416916101ca604051956101ba876101b381600485016118db565b0388611808565b6101b3604051809a8193016118db565b604051998a99610100958b5260208b015280821660408b01528160401c1660608a015260801c161515608088015260a08701528060c087015285019061175c565b9083820360e085015261175c565b34610145576000366003190112610145576003546040516001600160a01b039091168152602090f35b346101455760003660031901126101455760206040517f97667070c54ef182b0f5858b034beac1b6f3089aa2d3188bb1e8929f4fa9b9298152f35b346101455760031960203682011261014557600435906001600160401b0382116101455760a090823603011261014557604051906102ba8261179c565b600481013582526001600160a01b0390602481013590828216820361014557602084019182526102ec60448201611829565b6040850190815260648201356001600160401b038111610145576103169060043691850101611883565b91606086019283526084810135906001600160401b0382116101455760046103419236920101611883565b906080860191825260405163167ac65160e31b8152602081600481335afa9081156107f3576103b1916020916000916107ff575b50600354604051636a80cdc560e11b815246600482015263ffffffff909216602483015233604483015290928391891690829081906064820190565b03915afa9081156107f3576000916107c4575b50156107ac57855160005260046020526040600020916040516103e68161179c565b8354815286600460019560405161040a81610403818b86016118db565b0382611808565b60208501526040516104238161040381600286016118db565b604085015260405161043c8161040381600386016118db565b60608501520154166080820152511561079a578651855160405190602082019283526001600160601b03199060601b1660408201526034815261047e816117b7565b51902096876000526005602052604060002054610788576001600160401b039051925116938686511690519151946040519561010087018781106001600160401b038211176106f857604052898752602087019485526040870191825261055d6001600160401b03606089016000815260808a01936000855260a08b0196875260c08b0197885260e08b01528c60005260056020526040600020978a5189555189890155816002890195511682198654161785555116839067ffffffffffffffff60401b82549160401b169067ffffffffffffffff60401b1916179055565b51815460ff60801b191690151560801b60ff60801b16179055516003830180546001600160a01b03191691881691909117905551805160048301916001600160401b0382116106f8576105ba826105b485546118a1565b856119a5565b602090601f8311600114610719578260e09593600595936105f29360009261070e575b50508160011b916000199060031b1c19161790565b90555b019201518051906001600160401b0382116106f85761061e8261061886546118a1565b866119a5565b602092601f8311600114610694575061064e92600091836106895750508160011b916000199060031b1c19161790565b90555b61065c600654611a41565b6006555116907fcdb4f4c227298777a68324767904e59ae71f9be763842b8b3beb0d0c6d4bfcd4600080a3005b0151905087806105dd565b92601f19831691856000528360206000209360005b878282106106df575050106106c6575b505050811b019055610651565b015160001960f88460031b161c191690558680806106b9565b84860151875590950194602094850194879350016106a9565b634e487b7160e01b600052604160045260246000fd5b015190508c806105dd565b859291601f198316918560005260206000209260005b81811061077057509160e09795939185600598969410610757575b505050811b0190556105f5565b015160001960f88460031b161c191690558b808061074a565b8284015185558996909401936020938401930161072f565b6040516306e3131760e11b8152600490fd5b604051637cbdaa0560e11b8152600490fd5b604051631a64ce3f60e21b8152336004820152602490fd5b6107e6915060203d6020116107ec575b6107de8183611808565b81019061198d565b876103c4565b503d6107d4565b6040513d6000823e3d90fd5b61081f9150823d8411610825575b6108178183611808565b810190611971565b89610375565b503d61080d565b3461014557600319604036820112610145576001600160401b03906004358281116101455760a081600401928236030112610145576024358381116101455736602382011215610145578060040135928484116101455736602485840101116101455761089c60248401826119fb565b905015610d765760648301926108b284836119fb565b905015610d64578415610d52576108c984836119fb565b906040516108fb60348260209580878301963360601b8852848401378101600083820152036014810184520182611808565b519020968760005260048252604060002054610d405761091e60248401856119fb565b8360405182819383830195863781018281016000905203808352016109439082611808565b51902095604484019561095687876119fb565b85604051828193838301958637810182810160009052038083520161097b9082611808565b5190209861098983886119fb565b8660405182819383830195863781018281016000905203808352016109ae9082611808565b51902098608487019a6109c08c611a2d565b9a60405191888301937f7c9ef3db6c57694a9a92d6d98cd1c6104b9c8f1941c466575097b2e77ecdbaa18552604084015260608301526080820152600160a01b60019003809b1660a082015260a08152610a19816117d2565b519020610a24611dd3565b906040519161190160f01b8352600283015260228201526042902091369060240191610a4f9261183d565b610a5891611eed565b610a6191611f29565b610a6a90611b5d565b88600052600483526040600020958535875560019485880190602401610a9090886119fb565b908582116106f857610aa6826105b485546118a1565b600090601f8311600114610cdc57610ad6929160009183610c665750508160011b916000199060031b1c19161790565b90555b610ae76002880191876119fb565b908482116106f857610afd826105b485546118a1565b600090601f8311600114610c71579180610b3392610b40969594600092610c665750508160011b916000199060031b1c19161790565b90555b60038701956119fb565b93909184116106f857610b5d84610b5787546118a1565b876119a5565b600092601f8511600114610bf557505082610ba1959360049593610b9793600092610bea5750508160011b916000199060031b1c19161790565b90555b0192611a2d565b166001600160601b0360a01b825416179055610bbe600754611a41565b60075533907fd16733fb8c2a502f4e1d1d63970cbab355e37ff6d6d12a215b7d0197ea5535f4600080a3005b013590508a806105dd565b91909392601f1984168660005283600020936000905b828210610c4f57505091610ba19795939185600498969410610c35575b505050811b019055610b9a565b0135600019600384901b60f8161c19169055898080610c28565b808885978294968801358155019601930190610c0b565b013590508e806105dd565b918791949392601f1982169084600052886000209160005b8a828210610cc65750509683610b409810610cac575b505050811b019055610b36565b0135600019600384901b60f8161c191690558d8080610c9f565b838a01358555988901988c969094019301610c89565b90889291601f1983169185600052896000209260005b8b828210610d2a5750508411610d10575b505050811b019055610ad9565b0135600019600384901b60f8161c191690558d8080610d03565b8385013586558d97909501949283019201610cf2565b604051631cfbd86560e21b8152600490fd5b6040516337e8456b60e01b8152600490fd5b604051635421bc3560e11b8152600490fd5b60405163e474746b60e01b8152600490fd5b3461014557604036600319011261014557610dc9600435610da7611746565b90806000526002602052610dc46001604060002001543390611be0565b611ae6565b005b346101455760203660031901126101455760043560005260046020526040600020805460405191610e0a83610e0381600185016118db565b0384611808565b610e8060405191610e2283610e0381600285016118db565b610e7260405191610e3a83610e0381600385016118db565b600460018060a01b039101541693610e64604051978897885260a0602089015260a088019061175c565b90868203604088015261175c565b90848203606086015261175c565b9060808301520390f35b34610145576020366003190112610145576004356001600160a01b0381169081900361014557610eb933611b5d565b8015610ef857600380546001600160a01b031916821790557f6de4326a8b9054d72d9dbab97d27bc4edffadee7d966f5af9cc4eafdaf8e5455600080a2005b60405163867915ab60e01b8152600490fd5b34610145576020366003190112610145576004358060005260056020526040600020805415611036578060016004920154600052816020526080604060002060405190610f568261179c565b80548252604051610f6e8161040381600186016118db565b6020830152604051610f878161040381600286016118db565b6040830152604051610fa08161040381600386016118db565b6060830152909301546001600160a01b0390811691909301819052330361102457600281018054600160801b70ffffffffffffffffff00000000000000001990911667ffffffffffffffff60401b4260401b16171790556003015416907f436e32dc587e71660aef91b28c6f85cd077ceac47867d9df9930a48e65ab7ed0600080a3005b604051630ee803d760e21b8152600490fd5b6040516347b48db360e11b8152600490fd5b3461014557600036600319011261014557610141604051611068816117b7565b602481527f5275627973636f72655f53696e676c655f4964656e7469666965725f526567696020820152637374727960e01b604082015260405191829160208352602083019061175c565b34610145576020600319818136011261014557600435906001600160401b0390818311610145576080908336030112610145576040519160808301838110838211176106f8576040528060040135835261110f60248201611829565b908484019182526044810135838111610145576111329060043691840101611883565b90604085019182526064810135908482116101455760046111569236920101611883565b906060850191825260405163167ac65160e31b81528681600481335afa9081156107f3576111cb918891600091611407575b50600354604051636a80cdc560e11b815246600482015263ffffffff9092166024830152336044830152909283916001600160a01b031690829081906064820190565b03915afa9081156107f3576000916113ea575b50156107ac5784516000526005865260406000209283541561103657518416806113d0575b505180518061130b575b5050519384519182611243575b84517fb16e238411c7a7cdf16f07b1bb3b95461fa3af1218deea488f95f582b5d51cea600080a2005b6005019282116106f85761125b826105b485546118a1565b80601f83116001146112a45750819061128c9394956000926112995750508160011b916000199060031b1c19161790565b90555b808280808061121a565b0151905085806105dd565b90601f198316958460005282600020926000905b8882106112f3575050836001959697106112da575b505050811b01905561128f565b015160001960f88460031b161c191690558480806112cd565b806001859682949686015181550195019301906112b8565b60048401918582116106f857611325826105b485546118a1565b8790601f83116001146113695761135492916000918361135e5750508160011b916000199060031b1c19161790565b90555b858061120d565b0151905089806105dd565b90601f1983169184600052896000209260005b8b8282106113ba5750509084600195949392106113a1575b505050811b019055611357565b015160001960f88460031b161c19169055888080611394565b600185968293968601518155019501930161137c565b60028401906001600160401b031982541617905586611203565b6114019150873d89116107ec576107de8183611808565b876111de565b61141e9150823d8411610825576108178183611808565b89611188565b3461014557604036600319011261014557600435611440611746565b61144933611b5d565b8160005260046020526040600020541561079a576001600160a01b03169081156114b7578060005260046020526004604060002001826001600160601b0360a01b8254161790557fd05b2e32ad9ac3239164be79bbc8a379cb9864bc907d8060ecd246aedf89fe54600080a3005b60405163078ec41b60e41b8152600490fd5b3461014557600036600319011261014557602060405160008152f35b34610145576040366003190112610145576114fe611746565b600435600052600260205260406000209060018060a01b0316600052602052602060ff604060002054166040519015158152f35b346101455760003660031901126101455761156c7f0000000000000000000000000000000000000000000000000000000000000000611c11565b6115957f0000000000000000000000000000000000000000000000000000000000000000611d12565b6040516020808201928284106001600160401b038511176106f8579160206115ef85946115e1979660405260008452604051978897600f60f81b895260e0858a015260e089019061175c565b90878203604089015261175c565b91466060870152306080870152600060a087015285830360c0870152519182815201929160005b82811061162557505050500390f35b835185528695509381019392810192600101611616565b3461014557604036600319011261014557611655611746565b336001600160a01b0382160361167157610dc990600435611ae6565b60405163334bd91960e11b8152600490fd5b3461014557604036600319011261014557610dc96004356116a2611746565b908060005260026020526116bf6001604060002001543390611be0565b611a66565b346101455760203660031901126101455760043560005260026020526020600160406000200154604051908152f35b34610145576020366003190112610145576004359063ffffffff60e01b821680920361014557602091637965db0b60e01b8114908115611735575b5015158152f35b6301ffc9a760e01b1490508361172e565b602435906001600160a01b038216820361014557565b919082519283825260005b848110611788575050826000602080949584010152601f8019910116010190565b602081830181015184830182015201611767565b60a081019081106001600160401b038211176106f857604052565b606081019081106001600160401b038211176106f857604052565b60c081019081106001600160401b038211176106f857604052565b604081019081106001600160401b038211176106f857604052565b90601f801991011681019081106001600160401b038211176106f857604052565b35906001600160401b038216820361014557565b9291926001600160401b0382116106f85760405191611866601f8201601f191660200184611808565b829481845281830111610145578281602093846000960137010152565b9080601f830112156101455781602061189e9335910161183d565b90565b90600182811c921680156118d1575b60208310146118bb57565b634e487b7160e01b600052602260045260246000fd5b91607f16916118b0565b8054600093926118ea826118a1565b918282526020936001916001811690816000146119525750600114611911575b5050505050565b90939495506000929192528360002092846000945b83861061193e5750505050010190388080808061190a565b805485870183015294019385908201611926565b60ff19168685015250505090151560051b01019150388080808061190a565b90816020910312610145575163ffffffff811681036101455790565b90816020910312610145575180151581036101455790565b90601f81116119b357505050565b6000916000526020600020906020601f850160051c830194106119f1575b601f0160051c01915b8281106119e657505050565b8181556001016119da565b90925082906119d1565b903590601e198136030182121561014557018035906001600160401b0382116101455760200191813603831361014557565b356001600160a01b03811681036101455790565b6000198114611a505760010190565b634e487b7160e01b600052601160045260246000fd5b906000918083526002602052604083209160018060a01b03169182845260205260ff60408420541615600014611ae15780835260026020526040832082845260205260408320600160ff198254161790557f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d339380a4600190565b505090565b906000918083526002602052604083209160018060a01b03169182845260205260ff604084205416600014611ae1578083526002602052604083208284526020526040832060ff1981541690557ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b339380a4600190565b6001600160a01b031660008181527f6bc781d8c7f9885ebbb3cefbc18932c491038e2ae5c5b56447891e0bd98ea16360205260409020547f97667070c54ef182b0f5858b034beac1b6f3089aa2d3188bb1e8929f4fa9b9299060ff1615611bc2575050565b604492506040519163e2517d3f60e01b835260048301526024820152fd5b80600052600260205260406000209160018060a01b0316918260005260205260ff6040600020541615611bc2575050565b60ff8114611c4f5760ff811690601f8211611c3d5760405191611c33836117ed565b8252602082015290565b604051632cd44ac360e21b8152600490fd5b5060405160008160005491611c63836118a1565b80835292602090600190818116908115611cee5750600114611c8e575b505061189e92500382611808565b915092600080527f290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e563936000925b828410611cd6575061189e9450505081016020013880611c80565b85548785018301529485019486945092810192611cbb565b9150506020925061189e94915060ff191682840152151560051b8201013880611c80565b60ff8114611d345760ff811690601f8211611c3d5760405191611c33836117ed565b50604051600081600191600154611d4a816118a1565b8084529360209160018116908115611cee5750600114611d7257505061189e92500382611808565b91509260016000527fb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cf6936000925b828410611dbb575061189e9450505081016020013880611c80565b85548785018301529485019486945092810192611da0565b307f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03161480611ec4575b15611e2e577f000000000000000000000000000000000000000000000000000000000000000090565b60405160208101907f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f82527f000000000000000000000000000000000000000000000000000000000000000060408201527f000000000000000000000000000000000000000000000000000000000000000060608201524660808201523060a082015260a08152611ebe816117d2565b51902090565b507f00000000000000000000000000000000000000000000000000000000000000004614611e05565b8151919060418303611f1e57611f1792506020820151906060604084015193015160001a90611fae565b9192909190565b505060009160029190565b6004811015611f985780611f3b575050565b60018103611f555760405163f645eedf60e01b8152600490fd5b60028103611f765760405163fce698f760e01b815260048101839052602490fd5b600314611f805750565b602490604051906335e2f38360e21b82526004820152fd5b634e487b7160e01b600052602160045260246000fd5b91907f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a0841161203257926020929160ff608095604051948552168484015260408301526060820152600092839182805260015afa156120265780516001600160a01b0381161561201d57918190565b50809160019190565b604051903d90823e3d90fd5b5050506000916003919056fea264697066735822122056ec25fb7533cdbfec467225507a0e3ba9e2cd952eeb9cc38b0cc29c0f4e8c5664736f6c63430008180033",
  "deployedBytecode": "0x608080604052600436101561001357600080fd5b60003560e01c90816301ffc9a7146116f357508063248a9ca3146116c45780632f2ff15d1461168357806336568abe1461163c57806384b0196e1461153257806391d14854146114e5578063a217fddf146114c9578063a330273014611424578063a3cbcb24146110b3578063a3f4df7e14611048578063b75c7dc614610f0a578063c0d7865514610e8a578063ca2adef614610dcb578063d547741f14610d88578063eb36bbba1461082c578063f2e4cdea1461027d578063f5b541a614610242578063f887ea4014610219578063f8cf04891461014a5763ffa1ad74146100fb57600080fd5b346101455760003660031901126101455761014160405161011b816117ed565b6005815264302e302e3160d81b602082015260405191829160208352602083019061175c565b0390f35b600080fd5b346101455760203660031901126101455760043560005260056020526040600020805490610141600561020b6001840154936002810154956001600160401b039660ff60018060a01b03600385015416916101ca604051956101ba876101b381600485016118db565b0388611808565b6101b3604051809a8193016118db565b604051998a99610100958b5260208b015280821660408b01528160401c1660608a015260801c161515608088015260a08701528060c087015285019061175c565b9083820360e085015261175c565b34610145576000366003190112610145576003546040516001600160a01b039091168152602090f35b346101455760003660031901126101455760206040517f97667070c54ef182b0f5858b034beac1b6f3089aa2d3188bb1e8929f4fa9b9298152f35b346101455760031960203682011261014557600435906001600160401b0382116101455760a090823603011261014557604051906102ba8261179c565b600481013582526001600160a01b0390602481013590828216820361014557602084019182526102ec60448201611829565b6040850190815260648201356001600160401b038111610145576103169060043691850101611883565b91606086019283526084810135906001600160401b0382116101455760046103419236920101611883565b906080860191825260405163167ac65160e31b8152602081600481335afa9081156107f3576103b1916020916000916107ff575b50600354604051636a80cdc560e11b815246600482015263ffffffff909216602483015233604483015290928391891690829081906064820190565b03915afa9081156107f3576000916107c4575b50156107ac57855160005260046020526040600020916040516103e68161179c565b8354815286600460019560405161040a81610403818b86016118db565b0382611808565b60208501526040516104238161040381600286016118db565b604085015260405161043c8161040381600386016118db565b60608501520154166080820152511561079a578651855160405190602082019283526001600160601b03199060601b1660408201526034815261047e816117b7565b51902096876000526005602052604060002054610788576001600160401b039051925116938686511690519151946040519561010087018781106001600160401b038211176106f857604052898752602087019485526040870191825261055d6001600160401b03606089016000815260808a01936000855260a08b0196875260c08b0197885260e08b01528c60005260056020526040600020978a5189555189890155816002890195511682198654161785555116839067ffffffffffffffff60401b82549160401b169067ffffffffffffffff60401b1916179055565b51815460ff60801b191690151560801b60ff60801b16179055516003830180546001600160a01b03191691881691909117905551805160048301916001600160401b0382116106f8576105ba826105b485546118a1565b856119a5565b602090601f8311600114610719578260e09593600595936105f29360009261070e575b50508160011b916000199060031b1c19161790565b90555b019201518051906001600160401b0382116106f85761061e8261061886546118a1565b866119a5565b602092601f8311600114610694575061064e92600091836106895750508160011b916000199060031b1c19161790565b90555b61065c600654611a41565b6006555116907fcdb4f4c227298777a68324767904e59ae71f9be763842b8b3beb0d0c6d4bfcd4600080a3005b0151905087806105dd565b92601f19831691856000528360206000209360005b878282106106df575050106106c6575b505050811b019055610651565b015160001960f88460031b161c191690558680806106b9565b84860151875590950194602094850194879350016106a9565b634e487b7160e01b600052604160045260246000fd5b015190508c806105dd565b859291601f198316918560005260206000209260005b81811061077057509160e09795939185600598969410610757575b505050811b0190556105f5565b015160001960f88460031b161c191690558b808061074a565b8284015185558996909401936020938401930161072f565b6040516306e3131760e11b8152600490fd5b604051637cbdaa0560e11b8152600490fd5b604051631a64ce3f60e21b8152336004820152602490fd5b6107e6915060203d6020116107ec575b6107de8183611808565b81019061198d565b876103c4565b503d6107d4565b6040513d6000823e3d90fd5b61081f9150823d8411610825575b6108178183611808565b810190611971565b89610375565b503d61080d565b3461014557600319604036820112610145576001600160401b03906004358281116101455760a081600401928236030112610145576024358381116101455736602382011215610145578060040135928484116101455736602485840101116101455761089c60248401826119fb565b905015610d765760648301926108b284836119fb565b905015610d64578415610d52576108c984836119fb565b906040516108fb60348260209580878301963360601b8852848401378101600083820152036014810184520182611808565b519020968760005260048252604060002054610d405761091e60248401856119fb565b8360405182819383830195863781018281016000905203808352016109439082611808565b51902095604484019561095687876119fb565b85604051828193838301958637810182810160009052038083520161097b9082611808565b5190209861098983886119fb565b8660405182819383830195863781018281016000905203808352016109ae9082611808565b51902098608487019a6109c08c611a2d565b9a60405191888301937f7c9ef3db6c57694a9a92d6d98cd1c6104b9c8f1941c466575097b2e77ecdbaa18552604084015260608301526080820152600160a01b60019003809b1660a082015260a08152610a19816117d2565b519020610a24611dd3565b906040519161190160f01b8352600283015260228201526042902091369060240191610a4f9261183d565b610a5891611eed565b610a6191611f29565b610a6a90611b5d565b88600052600483526040600020958535875560019485880190602401610a9090886119fb565b908582116106f857610aa6826105b485546118a1565b600090601f8311600114610cdc57610ad6929160009183610c665750508160011b916000199060031b1c19161790565b90555b610ae76002880191876119fb565b908482116106f857610afd826105b485546118a1565b600090601f8311600114610c71579180610b3392610b40969594600092610c665750508160011b916000199060031b1c19161790565b90555b60038701956119fb565b93909184116106f857610b5d84610b5787546118a1565b876119a5565b600092601f8511600114610bf557505082610ba1959360049593610b9793600092610bea5750508160011b916000199060031b1c19161790565b90555b0192611a2d565b166001600160601b0360a01b825416179055610bbe600754611a41565b60075533907fd16733fb8c2a502f4e1d1d63970cbab355e37ff6d6d12a215b7d0197ea5535f4600080a3005b013590508a806105dd565b91909392601f1984168660005283600020936000905b828210610c4f57505091610ba19795939185600498969410610c35575b505050811b019055610b9a565b0135600019600384901b60f8161c19169055898080610c28565b808885978294968801358155019601930190610c0b565b013590508e806105dd565b918791949392601f1982169084600052886000209160005b8a828210610cc65750509683610b409810610cac575b505050811b019055610b36565b0135600019600384901b60f8161c191690558d8080610c9f565b838a01358555988901988c969094019301610c89565b90889291601f1983169185600052896000209260005b8b828210610d2a5750508411610d10575b505050811b019055610ad9565b0135600019600384901b60f8161c191690558d8080610d03565b8385013586558d97909501949283019201610cf2565b604051631cfbd86560e21b8152600490fd5b6040516337e8456b60e01b8152600490fd5b604051635421bc3560e11b8152600490fd5b60405163e474746b60e01b8152600490fd5b3461014557604036600319011261014557610dc9600435610da7611746565b90806000526002602052610dc46001604060002001543390611be0565b611ae6565b005b346101455760203660031901126101455760043560005260046020526040600020805460405191610e0a83610e0381600185016118db565b0384611808565b610e8060405191610e2283610e0381600285016118db565b610e7260405191610e3a83610e0381600385016118db565b600460018060a01b039101541693610e64604051978897885260a0602089015260a088019061175c565b90868203604088015261175c565b90848203606086015261175c565b9060808301520390f35b34610145576020366003190112610145576004356001600160a01b0381169081900361014557610eb933611b5d565b8015610ef857600380546001600160a01b031916821790557f6de4326a8b9054d72d9dbab97d27bc4edffadee7d966f5af9cc4eafdaf8e5455600080a2005b60405163867915ab60e01b8152600490fd5b34610145576020366003190112610145576004358060005260056020526040600020805415611036578060016004920154600052816020526080604060002060405190610f568261179c565b80548252604051610f6e8161040381600186016118db565b6020830152604051610f878161040381600286016118db565b6040830152604051610fa08161040381600386016118db565b6060830152909301546001600160a01b0390811691909301819052330361102457600281018054600160801b70ffffffffffffffffff00000000000000001990911667ffffffffffffffff60401b4260401b16171790556003015416907f436e32dc587e71660aef91b28c6f85cd077ceac47867d9df9930a48e65ab7ed0600080a3005b604051630ee803d760e21b8152600490fd5b6040516347b48db360e11b8152600490fd5b3461014557600036600319011261014557610141604051611068816117b7565b602481527f5275627973636f72655f53696e676c655f4964656e7469666965725f526567696020820152637374727960e01b604082015260405191829160208352602083019061175c565b34610145576020600319818136011261014557600435906001600160401b0390818311610145576080908336030112610145576040519160808301838110838211176106f8576040528060040135835261110f60248201611829565b908484019182526044810135838111610145576111329060043691840101611883565b90604085019182526064810135908482116101455760046111569236920101611883565b906060850191825260405163167ac65160e31b81528681600481335afa9081156107f3576111cb918891600091611407575b50600354604051636a80cdc560e11b815246600482015263ffffffff9092166024830152336044830152909283916001600160a01b031690829081906064820190565b03915afa9081156107f3576000916113ea575b50156107ac5784516000526005865260406000209283541561103657518416806113d0575b505180518061130b575b5050519384519182611243575b84517fb16e238411c7a7cdf16f07b1bb3b95461fa3af1218deea488f95f582b5d51cea600080a2005b6005019282116106f85761125b826105b485546118a1565b80601f83116001146112a45750819061128c9394956000926112995750508160011b916000199060031b1c19161790565b90555b808280808061121a565b0151905085806105dd565b90601f198316958460005282600020926000905b8882106112f3575050836001959697106112da575b505050811b01905561128f565b015160001960f88460031b161c191690558480806112cd565b806001859682949686015181550195019301906112b8565b60048401918582116106f857611325826105b485546118a1565b8790601f83116001146113695761135492916000918361135e5750508160011b916000199060031b1c19161790565b90555b858061120d565b0151905089806105dd565b90601f1983169184600052896000209260005b8b8282106113ba5750509084600195949392106113a1575b505050811b019055611357565b015160001960f88460031b161c19169055888080611394565b600185968293968601518155019501930161137c565b60028401906001600160401b031982541617905586611203565b6114019150873d89116107ec576107de8183611808565b876111de565b61141e9150823d8411610825576108178183611808565b89611188565b3461014557604036600319011261014557600435611440611746565b61144933611b5d565b8160005260046020526040600020541561079a576001600160a01b03169081156114b7578060005260046020526004604060002001826001600160601b0360a01b8254161790557fd05b2e32ad9ac3239164be79bbc8a379cb9864bc907d8060ecd246aedf89fe54600080a3005b60405163078ec41b60e41b8152600490fd5b3461014557600036600319011261014557602060405160008152f35b34610145576040366003190112610145576114fe611746565b600435600052600260205260406000209060018060a01b0316600052602052602060ff604060002054166040519015158152f35b346101455760003660031901126101455761156c7f0000000000000000000000000000000000000000000000000000000000000000611c11565b6115957f0000000000000000000000000000000000000000000000000000000000000000611d12565b6040516020808201928284106001600160401b038511176106f8579160206115ef85946115e1979660405260008452604051978897600f60f81b895260e0858a015260e089019061175c565b90878203604089015261175c565b91466060870152306080870152600060a087015285830360c0870152519182815201929160005b82811061162557505050500390f35b835185528695509381019392810192600101611616565b3461014557604036600319011261014557611655611746565b336001600160a01b0382160361167157610dc990600435611ae6565b60405163334bd91960e11b8152600490fd5b3461014557604036600319011261014557610dc96004356116a2611746565b908060005260026020526116bf6001604060002001543390611be0565b611a66565b346101455760203660031901126101455760043560005260026020526020600160406000200154604051908152f35b34610145576020366003190112610145576004359063ffffffff60e01b821680920361014557602091637965db0b60e01b8114908115611735575b5015158152f35b6301ffc9a760e01b1490508361172e565b602435906001600160a01b038216820361014557565b919082519283825260005b848110611788575050826000602080949584010152601f8019910116010190565b602081830181015184830182015201611767565b60a081019081106001600160401b038211176106f857604052565b606081019081106001600160401b038211176106f857604052565b60c081019081106001600160401b038211176106f857604052565b604081019081106001600160401b038211176106f857604052565b90601f801991011681019081106001600160401b038211176106f857604052565b35906001600160401b038216820361014557565b9291926001600160401b0382116106f85760405191611866601f8201601f191660200184611808565b829481845281830111610145578281602093846000960137010152565b9080601f830112156101455781602061189e9335910161183d565b90565b90600182811c921680156118d1575b60208310146118bb57565b634e487b7160e01b600052602260045260246000fd5b91607f16916118b0565b8054600093926118ea826118a1565b918282526020936001916001811690816000146119525750600114611911575b5050505050565b90939495506000929192528360002092846000945b83861061193e5750505050010190388080808061190a565b805485870183015294019385908201611926565b60ff19168685015250505090151560051b01019150388080808061190a565b90816020910312610145575163ffffffff811681036101455790565b90816020910312610145575180151581036101455790565b90601f81116119b357505050565b6000916000526020600020906020601f850160051c830194106119f1575b601f0160051c01915b8281106119e657505050565b8181556001016119da565b90925082906119d1565b903590601e198136030182121561014557018035906001600160401b0382116101455760200191813603831361014557565b356001600160a01b03811681036101455790565b6000198114611a505760010190565b634e487b7160e01b600052601160045260246000fd5b906000918083526002602052604083209160018060a01b03169182845260205260ff60408420541615600014611ae15780835260026020526040832082845260205260408320600160ff198254161790557f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d339380a4600190565b505090565b906000918083526002602052604083209160018060a01b03169182845260205260ff604084205416600014611ae1578083526002602052604083208284526020526040832060ff1981541690557ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b339380a4600190565b6001600160a01b031660008181527f6bc781d8c7f9885ebbb3cefbc18932c491038e2ae5c5b56447891e0bd98ea16360205260409020547f97667070c54ef182b0f5858b034beac1b6f3089aa2d3188bb1e8929f4fa9b9299060ff1615611bc2575050565b604492506040519163e2517d3f60e01b835260048301526024820152fd5b80600052600260205260406000209160018060a01b0316918260005260205260ff6040600020541615611bc2575050565b60ff8114611c4f5760ff811690601f8211611c3d5760405191611c33836117ed565b8252602082015290565b604051632cd44ac360e21b8152600490fd5b5060405160008160005491611c63836118a1565b80835292602090600190818116908115611cee5750600114611c8e575b505061189e92500382611808565b915092600080527f290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e563936000925b828410611cd6575061189e9450505081016020013880611c80565b85548785018301529485019486945092810192611cbb565b9150506020925061189e94915060ff191682840152151560051b8201013880611c80565b60ff8114611d345760ff811690601f8211611c3d5760405191611c33836117ed565b50604051600081600191600154611d4a816118a1565b8084529360209160018116908115611cee5750600114611d7257505061189e92500382611808565b91509260016000527fb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cf6936000925b828410611dbb575061189e9450505081016020013880611c80565b85548785018301529485019486945092810192611da0565b307f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03161480611ec4575b15611e2e577f000000000000000000000000000000000000000000000000000000000000000090565b60405160208101907f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f82527f000000000000000000000000000000000000000000000000000000000000000060408201527f000000000000000000000000000000000000000000000000000000000000000060608201524660808201523060a082015260a08152611ebe816117d2565b51902090565b507f00000000000000000000000000000000000000000000000000000000000000004614611e05565b8151919060418303611f1e57611f1792506020820151906060604084015193015160001a90611fae565b9192909190565b505060009160029190565b6004811015611f985780611f3b575050565b60018103611f555760405163f645eedf60e01b8152600490fd5b60028103611f765760405163fce698f760e01b815260048101839052602490fd5b600314611f805750565b602490604051906335e2f38360e21b82526004820152fd5b634e487b7160e01b600052602160045260246000fd5b91907f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a0841161203257926020929160ff608095604051948552168484015260408301526060820152600092839182805260015afa156120265780516001600160a01b0381161561201d57918190565b50809160019190565b604051903d90823e3d90fd5b5050506000916003919056fea264697066735822122056ec25fb7533cdbfec467225507a0e3ba9e2cd952eeb9cc38b0cc29c0f4e8c5664736f6c63430008180033",
  "devdoc": {
    "errors": {
      "AccessControlBadConfirmation()": [
        {
          "details": "The caller of a function is not the expected one. NOTE: Don't confuse with {AccessControlUnauthorizedAccount}."
        }
      ],
      "AccessControlUnauthorizedAccount(address,bytes32)": [
        {
          "details": "The `account` is missing a role."
        }
      ],
      "ECDSAInvalidSignature()": [
        {
          "details": "The signature derives the `address(0)`."
        }
      ],
      "ECDSAInvalidSignatureLength(uint256)": [
        {
          "details": "The signature has an invalid length."
        }
      ],
      "ECDSAInvalidSignatureS(bytes32)": [
        {
          "details": "The signature has an S value that is in the upper half order."
        }
      ]
    },
    "events": {
      "EIP712DomainChanged()": {
        "details": "MAY be emitted to signal that the domain could have changed."
      },
      "RoleAdminChanged(bytes32,bytes32,bytes32)": {
        "details": "Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole` `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite {RoleAdminChanged} not being emitted signaling this."
      },
      "RoleGranted(bytes32,address,address)": {
        "details": "Emitted when `account` is granted `role`. `sender` is the account that originated the contract call, an admin role bearer except when using {AccessControl-_setupRole}."
      },
      "RoleRevoked(bytes32,address,address)": {
        "details": "Emitted when `account` is revoked `role`. `sender` is the account that originated the contract call:   - if using `revokeRole`, it is the admin role bearer   - if using `renounceRole`, it is the role bearer (i.e. `account`)"
      }
    },
    "kind": "dev",
    "methods": {
      "eip712Domain()": {
        "details": "See {IERC-5267}."
      },
      "getRoleAdmin(bytes32)": {
        "details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."
      },
      "grantRole(bytes32,address)": {
        "details": "Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event."
      },
      "hasRole(bytes32,address)": {
        "details": "Returns `true` if `account` has been granted `role`."
      },
      "renounceRole(bytes32,address)": {
        "details": "Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `callerConfirmation`. May emit a {RoleRevoked} event."
      },
      "revokeRole(bytes32,address)": {
        "details": "Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event."
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 7097,
        "contract": "contracts/SingleIdentifierRegistry.sol:SingleIdentifierRegistry",
        "label": "_nameFallback",
        "offset": 0,
        "slot": "0",
        "type": "t_string_storage"
      },
      {
        "astId": 7099,
        "contract": "contracts/SingleIdentifierRegistry.sol:SingleIdentifierRegistry",
        "label": "_versionFallback",
        "offset": 0,
        "slot": "1",
        "type": "t_string_storage"
      },
      {
        "astId": 4918,
        "contract": "contracts/SingleIdentifierRegistry.sol:SingleIdentifierRegistry",
        "label": "_roles",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_bytes32,t_struct(RoleData)4913_storage)"
      },
      {
        "astId": 11437,
        "contract": "contracts/SingleIdentifierRegistry.sol:SingleIdentifierRegistry",
        "label": "router",
        "offset": 0,
        "slot": "3",
        "type": "t_contract(SingleRouter)12434"
      },
      {
        "astId": 11442,
        "contract": "contracts/SingleIdentifierRegistry.sol:SingleIdentifierRegistry",
        "label": "schemas",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_bytes32,t_struct(SIDSchema)13948_storage)"
      },
      {
        "astId": 11447,
        "contract": "contracts/SingleIdentifierRegistry.sol:SingleIdentifierRegistry",
        "label": "singleIdentifierData",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_bytes32,t_struct(SID)13937_storage)"
      },
      {
        "astId": 11449,
        "contract": "contracts/SingleIdentifierRegistry.sol:SingleIdentifierRegistry",
        "label": "sidCounter",
        "offset": 0,
        "slot": "6",
        "type": "t_uint256"
      },
      {
        "astId": 11451,
        "contract": "contracts/SingleIdentifierRegistry.sol:SingleIdentifierRegistry",
        "label": "emitterCounter",
        "offset": 0,
        "slot": "7",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_bytes_storage": {
        "encoding": "bytes",
        "label": "bytes",
        "numberOfBytes": "32"
      },
      "t_contract(SingleRouter)12434": {
        "encoding": "inplace",
        "label": "contract SingleRouter",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_bytes32,t_struct(RoleData)4913_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct AccessControl.RoleData)",
        "numberOfBytes": "32",
        "value": "t_struct(RoleData)4913_storage"
      },
      "t_mapping(t_bytes32,t_struct(SID)13937_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct SID)",
        "numberOfBytes": "32",
        "value": "t_struct(SID)13937_storage"
      },
      "t_mapping(t_bytes32,t_struct(SIDSchema)13948_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct SIDSchema)",
        "numberOfBytes": "32",
        "value": "t_struct(SIDSchema)13948_storage"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(RoleData)4913_storage": {
        "encoding": "inplace",
        "label": "struct AccessControl.RoleData",
        "members": [
          {
            "astId": 4910,
            "contract": "contracts/SingleIdentifierRegistry.sol:SingleIdentifierRegistry",
            "label": "hasRole",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_address,t_bool)"
          },
          {
            "astId": 4912,
            "contract": "contracts/SingleIdentifierRegistry.sol:SingleIdentifierRegistry",
            "label": "adminRole",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(SID)13937_storage": {
        "encoding": "inplace",
        "label": "struct SID",
        "members": [
          {
            "astId": 13922,
            "contract": "contracts/SingleIdentifierRegistry.sol:SingleIdentifierRegistry",
            "label": "SIDId",
            "offset": 0,
            "slot": "0",
            "type": "t_bytes32"
          },
          {
            "astId": 13924,
            "contract": "contracts/SingleIdentifierRegistry.sol:SingleIdentifierRegistry",
            "label": "schemaId",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          },
          {
            "astId": 13926,
            "contract": "contracts/SingleIdentifierRegistry.sol:SingleIdentifierRegistry",
            "label": "expirationDate",
            "offset": 0,
            "slot": "2",
            "type": "t_uint64"
          },
          {
            "astId": 13928,
            "contract": "contracts/SingleIdentifierRegistry.sol:SingleIdentifierRegistry",
            "label": "revocationDate",
            "offset": 8,
            "slot": "2",
            "type": "t_uint64"
          },
          {
            "astId": 13930,
            "contract": "contracts/SingleIdentifierRegistry.sol:SingleIdentifierRegistry",
            "label": "revoked",
            "offset": 16,
            "slot": "2",
            "type": "t_bool"
          },
          {
            "astId": 13932,
            "contract": "contracts/SingleIdentifierRegistry.sol:SingleIdentifierRegistry",
            "label": "user",
            "offset": 0,
            "slot": "3",
            "type": "t_address"
          },
          {
            "astId": 13934,
            "contract": "contracts/SingleIdentifierRegistry.sol:SingleIdentifierRegistry",
            "label": "data",
            "offset": 0,
            "slot": "4",
            "type": "t_bytes_storage"
          },
          {
            "astId": 13936,
            "contract": "contracts/SingleIdentifierRegistry.sol:SingleIdentifierRegistry",
            "label": "metadata",
            "offset": 0,
            "slot": "5",
            "type": "t_string_storage"
          }
        ],
        "numberOfBytes": "192"
      },
      "t_struct(SIDSchema)13948_storage": {
        "encoding": "inplace",
        "label": "struct SIDSchema",
        "members": [
          {
            "astId": 13939,
            "contract": "contracts/SingleIdentifierRegistry.sol:SingleIdentifierRegistry",
            "label": "schemaId",
            "offset": 0,
            "slot": "0",
            "type": "t_bytes32"
          },
          {
            "astId": 13941,
            "contract": "contracts/SingleIdentifierRegistry.sol:SingleIdentifierRegistry",
            "label": "name",
            "offset": 0,
            "slot": "1",
            "type": "t_string_storage"
          },
          {
            "astId": 13943,
            "contract": "contracts/SingleIdentifierRegistry.sol:SingleIdentifierRegistry",
            "label": "description",
            "offset": 0,
            "slot": "2",
            "type": "t_string_storage"
          },
          {
            "astId": 13945,
            "contract": "contracts/SingleIdentifierRegistry.sol:SingleIdentifierRegistry",
            "label": "schema",
            "offset": 0,
            "slot": "3",
            "type": "t_string_storage"
          },
          {
            "astId": 13947,
            "contract": "contracts/SingleIdentifierRegistry.sol:SingleIdentifierRegistry",
            "label": "emitter",
            "offset": 0,
            "slot": "4",
            "type": "t_address"
          }
        ],
        "numberOfBytes": "160"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint64": {
        "encoding": "inplace",
        "label": "uint64",
        "numberOfBytes": "8"
      }
    }
  }
}