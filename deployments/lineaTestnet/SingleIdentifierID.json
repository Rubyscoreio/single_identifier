{
  "address": "0x3fd85e4932fA418401E96737700bA62569c08dA2",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_protocolFee",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_admin",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_operator",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_router",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "AccessControlBadConfirmation",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "neededRole",
          "type": "bytes32"
        }
      ],
      "name": "AccessControlUnauthorizedAccount",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "AddressIsZero",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ChainIdInvalid",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "DataIsEmpty",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ECDSAInvalidSignature",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "length",
          "type": "uint256"
        }
      ],
      "name": "ECDSAInvalidSignatureLength",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "s",
          "type": "bytes32"
        }
      ],
      "name": "ECDSAInvalidSignatureS",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "EmitterAlreadyExists",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "EmitterNotExists",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ExpirationDateInvalid",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidShortString",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ProtocolIdInvalid",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "SIDNotValid",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "SchemaIdInvalid",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "SenderNotEmitter",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "SignatureInvalid",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "str",
          "type": "string"
        }
      ],
      "name": "StringTooLong",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "WrongFeeAmount",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [],
      "name": "EIP712DomainChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "emitterId",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "emitterAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "registryChainId",
          "type": "uint256"
        }
      ],
      "name": "EmitterRegistered",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "previousAdminRole",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "newAdminRole",
          "type": "bytes32"
        }
      ],
      "name": "RoleAdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleRevoked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "schemaId",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "uint32",
          "name": "protocolId",
          "type": "uint32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "registryDst",
          "type": "uint256"
        }
      ],
      "name": "SentRegisterSIDMessage",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "id",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "uint32",
          "name": "protocolId",
          "type": "uint32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "registryDst",
          "type": "uint256"
        }
      ],
      "name": "SentUpdateSIDMessage",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "fee",
          "type": "uint256"
        }
      ],
      "name": "SetProtocolFee",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "newRouter",
          "type": "address"
        }
      ],
      "name": "SetRouter",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "emitterId",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newEmitter",
          "type": "address"
        }
      ],
      "name": "UpdateEmitter",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Withdrawal",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "DEFAULT_ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "NAME",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "OPERATOR_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "VERSION",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "eip712Domain",
      "outputs": [
        {
          "internalType": "bytes1",
          "name": "fields",
          "type": "bytes1"
        },
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "version",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "chainId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "verifyingContract",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "salt",
          "type": "bytes32"
        },
        {
          "internalType": "uint256[]",
          "name": "extensions",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "emitterId",
          "type": "bytes32"
        }
      ],
      "name": "emitters",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "emitterId",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "schemaId",
          "type": "bytes32"
        },
        {
          "internalType": "uint64",
          "name": "expirationDate",
          "type": "uint64"
        },
        {
          "internalType": "uint256",
          "name": "fee",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "registryChainId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "emitterId",
          "type": "bytes32"
        }
      ],
      "name": "emittersBalances",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "balance",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleAdmin",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "grantRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "protocolBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "protocolFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_schemaId",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "_registryChainId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_emitterAddress",
          "type": "address"
        },
        {
          "internalType": "uint64",
          "name": "_expirationDate",
          "type": "uint64"
        },
        {
          "internalType": "uint256",
          "name": "_fee",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "_data",
          "type": "bytes"
        },
        {
          "internalType": "bytes",
          "name": "_signature",
          "type": "bytes"
        }
      ],
      "name": "registerEmitter",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_emitterId",
          "type": "bytes32"
        },
        {
          "internalType": "uint32",
          "name": "_connectorId",
          "type": "uint32"
        },
        {
          "internalType": "bytes",
          "name": "_data",
          "type": "bytes"
        },
        {
          "internalType": "bytes",
          "name": "_signature",
          "type": "bytes"
        },
        {
          "internalType": "string",
          "name": "_metadata",
          "type": "string"
        }
      ],
      "name": "registerSID",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_schemaId",
          "type": "bytes32"
        },
        {
          "internalType": "uint32",
          "name": "_connectorId",
          "type": "uint32"
        },
        {
          "internalType": "uint64",
          "name": "_expirationDate",
          "type": "uint64"
        },
        {
          "internalType": "uint256",
          "name": "_fee",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_registryChainId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_emitterAddress",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "_data",
          "type": "bytes"
        },
        {
          "internalType": "string",
          "name": "_metadata",
          "type": "string"
        },
        {
          "internalType": "bytes",
          "name": "_signature",
          "type": "bytes"
        }
      ],
      "name": "registerSIDWithEmitter",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "callerConfirmation",
          "type": "address"
        }
      ],
      "name": "renounceRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "revokeRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "router",
      "outputs": [
        {
          "internalType": "contract SingleRouter",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_fee",
          "type": "uint256"
        }
      ],
      "name": "setProtocolFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_router",
          "type": "address"
        }
      ],
      "name": "setRouter",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_emitterId",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "_newEmitter",
          "type": "address"
        }
      ],
      "name": "updateEmitter",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_emitterId",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "_fee",
          "type": "uint256"
        }
      ],
      "name": "updateFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_emitterId",
          "type": "bytes32"
        },
        {
          "internalType": "uint32",
          "name": "_connectorId",
          "type": "uint32"
        },
        {
          "internalType": "bytes32",
          "name": "_sidId",
          "type": "bytes32"
        },
        {
          "internalType": "uint64",
          "name": "_expirationDate",
          "type": "uint64"
        },
        {
          "internalType": "bytes",
          "name": "_data",
          "type": "bytes"
        },
        {
          "internalType": "string",
          "name": "_metadata",
          "type": "string"
        },
        {
          "internalType": "bytes",
          "name": "_signature",
          "type": "bytes"
        }
      ],
      "name": "updateSID",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_emitterId",
          "type": "bytes32"
        },
        {
          "internalType": "address payable",
          "name": "_receiver",
          "type": "address"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address payable",
          "name": "_receiver",
          "type": "address"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x6733cfda99358ef28a553a3fcbdf68ec47eb8e9684fd20b225470141fd924a39",
  "receipt": {
    "to": null,
    "from": "0x72f46FFBd3213218137015EBCcf70bFAaF619513",
    "contractAddress": "0x3fd85e4932fA418401E96737700bA62569c08dA2",
    "transactionIndex": 1,
    "gasUsed": "1884047",
    "logsBloom": "0x00000004000000000000000000000000000000000000000000000000000000000200000000000000200800000000000000000000000001000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000060000000000000000000800000000000000080000000400000000000000000000004000002000000000000000000000000000000000000000000000000000000000000000000000000000001000000000008000001000000200000000000000000000000000000000000000000000100040000100000000000020000000000000000000000000000000000000000000000000000000000000000000",
    "blockHash": "0x8d2e25e48b7d7d906b0756c861241e505956fce4dc54814f2d4992230b1f47e6",
    "transactionHash": "0x6733cfda99358ef28a553a3fcbdf68ec47eb8e9684fd20b225470141fd924a39",
    "logs": [
      {
        "transactionIndex": 1,
        "blockNumber": 5976882,
        "transactionHash": "0x6733cfda99358ef28a553a3fcbdf68ec47eb8e9684fd20b225470141fd924a39",
        "address": "0x3fd85e4932fA418401E96737700bA62569c08dA2",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000000d0d5ff3cfef8b7b2b1cac6b6c27fd0846c09361",
          "0x00000000000000000000000072f46ffbd3213218137015ebccf70bfaaf619513"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0x8d2e25e48b7d7d906b0756c861241e505956fce4dc54814f2d4992230b1f47e6"
      },
      {
        "transactionIndex": 1,
        "blockNumber": 5976882,
        "transactionHash": "0x6733cfda99358ef28a553a3fcbdf68ec47eb8e9684fd20b225470141fd924a39",
        "address": "0x3fd85e4932fA418401E96737700bA62569c08dA2",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0x97667070c54ef182b0f5858b034beac1b6f3089aa2d3188bb1e8929f4fa9b929",
          "0x00000000000000000000000072f46ffbd3213218137015ebccf70bfaaf619513",
          "0x00000000000000000000000072f46ffbd3213218137015ebccf70bfaaf619513"
        ],
        "data": "0x",
        "logIndex": 1,
        "blockHash": "0x8d2e25e48b7d7d906b0756c861241e505956fce4dc54814f2d4992230b1f47e6"
      },
      {
        "transactionIndex": 1,
        "blockNumber": 5976882,
        "transactionHash": "0x6733cfda99358ef28a553a3fcbdf68ec47eb8e9684fd20b225470141fd924a39",
        "address": "0x3fd85e4932fA418401E96737700bA62569c08dA2",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0x97667070c54ef182b0f5858b034beac1b6f3089aa2d3188bb1e8929f4fa9b929",
          "0x000000000000000000000000381c031baa5995d0cc52386508050ac947780815",
          "0x00000000000000000000000072f46ffbd3213218137015ebccf70bfaaf619513"
        ],
        "data": "0x",
        "logIndex": 2,
        "blockHash": "0x8d2e25e48b7d7d906b0756c861241e505956fce4dc54814f2d4992230b1f47e6"
      }
    ],
    "blockNumber": 5976882,
    "cumulativeGasUsed": "1905047",
    "status": 1,
    "byzantium": true
  },
  "args": [
    1000000000,
    "0x0d0D5Ff3cFeF8B7B2b1cAC6B6C27Fd0846c09361",
    "0x381c031bAA5995D0Cc52386508050Ac947780815",
    "0xfcB1A34583980bc4565Eb8458B0F715f69e04bA8"
  ],
  "numDeployments": 1,
  "solcInputHash": "0cbf7cfbe136b839052e6e1e71a1c86a",
  "metadata": "{\"compiler\":{\"version\":\"0.8.24+commit.e11b9ed9\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_protocolFee\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_admin\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_router\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"AccessControlBadConfirmation\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"neededRole\",\"type\":\"bytes32\"}],\"name\":\"AccessControlUnauthorizedAccount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"AddressIsZero\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ChainIdInvalid\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"DataIsEmpty\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ECDSAInvalidSignature\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"length\",\"type\":\"uint256\"}],\"name\":\"ECDSAInvalidSignatureLength\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"ECDSAInvalidSignatureS\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"EmitterAlreadyExists\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"EmitterNotExists\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ExpirationDateInvalid\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidShortString\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ProtocolIdInvalid\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SIDNotValid\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SchemaIdInvalid\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SenderNotEmitter\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SignatureInvalid\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"str\",\"type\":\"string\"}],\"name\":\"StringTooLong\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"WrongFeeAmount\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"EIP712DomainChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"emitterId\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"emitterAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"registryChainId\",\"type\":\"uint256\"}],\"name\":\"EmitterRegistered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"schemaId\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"uint32\",\"name\":\"protocolId\",\"type\":\"uint32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"registryDst\",\"type\":\"uint256\"}],\"name\":\"SentRegisterSIDMessage\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"uint32\",\"name\":\"protocolId\",\"type\":\"uint32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"registryDst\",\"type\":\"uint256\"}],\"name\":\"SentUpdateSIDMessage\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"}],\"name\":\"SetProtocolFee\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newRouter\",\"type\":\"address\"}],\"name\":\"SetRouter\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"emitterId\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newEmitter\",\"type\":\"address\"}],\"name\":\"UpdateEmitter\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdrawal\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"NAME\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"OPERATOR_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"VERSION\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"eip712Domain\",\"outputs\":[{\"internalType\":\"bytes1\",\"name\":\"fields\",\"type\":\"bytes1\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"version\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"verifyingContract\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"salt\",\"type\":\"bytes32\"},{\"internalType\":\"uint256[]\",\"name\":\"extensions\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"emitterId\",\"type\":\"bytes32\"}],\"name\":\"emitters\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"emitterId\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"schemaId\",\"type\":\"bytes32\"},{\"internalType\":\"uint64\",\"name\":\"expirationDate\",\"type\":\"uint64\"},{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"registryChainId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"emitterId\",\"type\":\"bytes32\"}],\"name\":\"emittersBalances\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"protocolBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"protocolFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_schemaId\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_registryChainId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_emitterAddress\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"_expirationDate\",\"type\":\"uint64\"},{\"internalType\":\"uint256\",\"name\":\"_fee\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"_signature\",\"type\":\"bytes\"}],\"name\":\"registerEmitter\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_emitterId\",\"type\":\"bytes32\"},{\"internalType\":\"uint32\",\"name\":\"_connectorId\",\"type\":\"uint32\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"_signature\",\"type\":\"bytes\"},{\"internalType\":\"string\",\"name\":\"_metadata\",\"type\":\"string\"}],\"name\":\"registerSID\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_schemaId\",\"type\":\"bytes32\"},{\"internalType\":\"uint32\",\"name\":\"_connectorId\",\"type\":\"uint32\"},{\"internalType\":\"uint64\",\"name\":\"_expirationDate\",\"type\":\"uint64\"},{\"internalType\":\"uint256\",\"name\":\"_fee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_registryChainId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_emitterAddress\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"},{\"internalType\":\"string\",\"name\":\"_metadata\",\"type\":\"string\"},{\"internalType\":\"bytes\",\"name\":\"_signature\",\"type\":\"bytes\"}],\"name\":\"registerSIDWithEmitter\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"callerConfirmation\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"router\",\"outputs\":[{\"internalType\":\"contract SingleRouter\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_fee\",\"type\":\"uint256\"}],\"name\":\"setProtocolFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_router\",\"type\":\"address\"}],\"name\":\"setRouter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_emitterId\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"_newEmitter\",\"type\":\"address\"}],\"name\":\"updateEmitter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_emitterId\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_fee\",\"type\":\"uint256\"}],\"name\":\"updateFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_emitterId\",\"type\":\"bytes32\"},{\"internalType\":\"uint32\",\"name\":\"_connectorId\",\"type\":\"uint32\"},{\"internalType\":\"bytes32\",\"name\":\"_sidId\",\"type\":\"bytes32\"},{\"internalType\":\"uint64\",\"name\":\"_expirationDate\",\"type\":\"uint64\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"},{\"internalType\":\"string\",\"name\":\"_metadata\",\"type\":\"string\"},{\"internalType\":\"bytes\",\"name\":\"_signature\",\"type\":\"bytes\"}],\"name\":\"updateSID\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_emitterId\",\"type\":\"bytes32\"},{\"internalType\":\"address payable\",\"name\":\"_receiver\",\"type\":\"address\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_receiver\",\"type\":\"address\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"errors\":{\"AccessControlBadConfirmation()\":[{\"details\":\"The caller of a function is not the expected one. NOTE: Don't confuse with {AccessControlUnauthorizedAccount}.\"}],\"AccessControlUnauthorizedAccount(address,bytes32)\":[{\"details\":\"The `account` is missing a role.\"}],\"ECDSAInvalidSignature()\":[{\"details\":\"The signature derives the `address(0)`.\"}],\"ECDSAInvalidSignatureLength(uint256)\":[{\"details\":\"The signature has an invalid length.\"}],\"ECDSAInvalidSignatureS(bytes32)\":[{\"details\":\"The signature has an S value that is in the upper half order.\"}]},\"events\":{\"EIP712DomainChanged()\":{\"details\":\"MAY be emitted to signal that the domain could have changed.\"},\"RoleAdminChanged(bytes32,bytes32,bytes32)\":{\"details\":\"Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole` `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite {RoleAdminChanged} not being emitted signaling this.\"},\"RoleGranted(bytes32,address,address)\":{\"details\":\"Emitted when `account` is granted `role`. `sender` is the account that originated the contract call, an admin role bearer except when using {AccessControl-_setupRole}.\"},\"RoleRevoked(bytes32,address,address)\":{\"details\":\"Emitted when `account` is revoked `role`. `sender` is the account that originated the contract call:   - if using `revokeRole`, it is the admin role bearer   - if using `renounceRole`, it is the role bearer (i.e. `account`)\"}},\"kind\":\"dev\",\"methods\":{\"eip712Domain()\":{\"details\":\"See {IERC-5267}.\"},\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `callerConfirmation`. May emit a {RoleRevoked} event.\"},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/SingleIdentifierID.sol\":\"SingleIdentifierID\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts/access/AccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IAccessControl} from \\\"./IAccessControl.sol\\\";\\nimport {Context} from \\\"../utils/Context.sol\\\";\\nimport {ERC165} from \\\"../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```solidity\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```solidity\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it. We recommend using {AccessControlDefaultAdminRules}\\n * to enforce additional security measures for this role.\\n */\\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\\n    struct RoleData {\\n        mapping(address account => bool) hasRole;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 role => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with an {AccessControlUnauthorizedAccount} error including the required role.\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual returns (bool) {\\n        return _roles[role].hasRole[account];\\n    }\\n\\n    /**\\n     * @dev Reverts with an {AccessControlUnauthorizedAccount} error if `_msgSender()`\\n     * is missing `role`. Overriding this function changes the behavior of the {onlyRole} modifier.\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Reverts with an {AccessControlUnauthorizedAccount} error if `account`\\n     * is missing `role`.\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert AccessControlUnauthorizedAccount(account, role);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `callerConfirmation`.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function renounceRole(bytes32 role, address callerConfirmation) public virtual {\\n        if (callerConfirmation != _msgSender()) {\\n            revert AccessControlBadConfirmation();\\n        }\\n\\n        _revokeRole(role, callerConfirmation);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Attempts to grant `role` to `account` and returns a boolean indicating if `role` was granted.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual returns (bool) {\\n        if (!hasRole(role, account)) {\\n            _roles[role].hasRole[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Attempts to revoke `role` to `account` and returns a boolean indicating if `role` was revoked.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual returns (bool) {\\n        if (hasRole(role, account)) {\\n            _roles[role].hasRole[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa0e92d42942f4f57c5be50568dac11e9d00c93efcb458026e18d2d9b9b2e7308\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/IAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev The `account` is missing a role.\\n     */\\n    error AccessControlUnauthorizedAccount(address account, bytes32 neededRole);\\n\\n    /**\\n     * @dev The caller of a function is not the expected one.\\n     *\\n     * NOTE: Don't confuse with {AccessControlUnauthorizedAccount}.\\n     */\\n    error AccessControlBadConfirmation();\\n\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `callerConfirmation`.\\n     */\\n    function renounceRole(bytes32 role, address callerConfirmation) external;\\n}\\n\",\"keccak256\":\"0xb6b36edd6a2999fd243ff226d6cbf84bd71af2432bbd0dfe19392996a1d9cb41\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC5267.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/IERC5267.sol)\\n\\npragma solidity ^0.8.20;\\n\\ninterface IERC5267 {\\n    /**\\n     * @dev MAY be emitted to signal that the domain could have changed.\\n     */\\n    event EIP712DomainChanged();\\n\\n    /**\\n     * @dev returns the fields and values that describe the domain separator used by this contract for EIP-712\\n     * signature.\\n     */\\n    function eip712Domain()\\n        external\\n        view\\n        returns (\\n            bytes1 fields,\\n            string memory name,\\n            string memory version,\\n            uint256 chainId,\\n            address verifyingContract,\\n            bytes32 salt,\\n            uint256[] memory extensions\\n        );\\n}\\n\",\"keccak256\":\"0x92aa1df62dc3d33f1656d63bede0923e0df0b706ad4137c8b10b0a8fe549fd92\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/ShortStrings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/ShortStrings.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {StorageSlot} from \\\"./StorageSlot.sol\\\";\\n\\n// | string  | 0xAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA   |\\n// | length  | 0x                                                              BB |\\ntype ShortString is bytes32;\\n\\n/**\\n * @dev This library provides functions to convert short memory strings\\n * into a `ShortString` type that can be used as an immutable variable.\\n *\\n * Strings of arbitrary length can be optimized using this library if\\n * they are short enough (up to 31 bytes) by packing them with their\\n * length (1 byte) in a single EVM word (32 bytes). Additionally, a\\n * fallback mechanism can be used for every other case.\\n *\\n * Usage example:\\n *\\n * ```solidity\\n * contract Named {\\n *     using ShortStrings for *;\\n *\\n *     ShortString private immutable _name;\\n *     string private _nameFallback;\\n *\\n *     constructor(string memory contractName) {\\n *         _name = contractName.toShortStringWithFallback(_nameFallback);\\n *     }\\n *\\n *     function name() external view returns (string memory) {\\n *         return _name.toStringWithFallback(_nameFallback);\\n *     }\\n * }\\n * ```\\n */\\nlibrary ShortStrings {\\n    // Used as an identifier for strings longer than 31 bytes.\\n    bytes32 private constant FALLBACK_SENTINEL = 0x00000000000000000000000000000000000000000000000000000000000000FF;\\n\\n    error StringTooLong(string str);\\n    error InvalidShortString();\\n\\n    /**\\n     * @dev Encode a string of at most 31 chars into a `ShortString`.\\n     *\\n     * This will trigger a `StringTooLong` error is the input string is too long.\\n     */\\n    function toShortString(string memory str) internal pure returns (ShortString) {\\n        bytes memory bstr = bytes(str);\\n        if (bstr.length > 31) {\\n            revert StringTooLong(str);\\n        }\\n        return ShortString.wrap(bytes32(uint256(bytes32(bstr)) | bstr.length));\\n    }\\n\\n    /**\\n     * @dev Decode a `ShortString` back to a \\\"normal\\\" string.\\n     */\\n    function toString(ShortString sstr) internal pure returns (string memory) {\\n        uint256 len = byteLength(sstr);\\n        // using `new string(len)` would work locally but is not memory safe.\\n        string memory str = new string(32);\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            mstore(str, len)\\n            mstore(add(str, 0x20), sstr)\\n        }\\n        return str;\\n    }\\n\\n    /**\\n     * @dev Return the length of a `ShortString`.\\n     */\\n    function byteLength(ShortString sstr) internal pure returns (uint256) {\\n        uint256 result = uint256(ShortString.unwrap(sstr)) & 0xFF;\\n        if (result > 31) {\\n            revert InvalidShortString();\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Encode a string into a `ShortString`, or write it to storage if it is too long.\\n     */\\n    function toShortStringWithFallback(string memory value, string storage store) internal returns (ShortString) {\\n        if (bytes(value).length < 32) {\\n            return toShortString(value);\\n        } else {\\n            StorageSlot.getStringSlot(store).value = value;\\n            return ShortString.wrap(FALLBACK_SENTINEL);\\n        }\\n    }\\n\\n    /**\\n     * @dev Decode a string that was encoded to `ShortString` or written to storage using {setWithFallback}.\\n     */\\n    function toStringWithFallback(ShortString value, string storage store) internal pure returns (string memory) {\\n        if (ShortString.unwrap(value) != FALLBACK_SENTINEL) {\\n            return toString(value);\\n        } else {\\n            return store;\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the length of a string that was encoded to `ShortString` or written to storage using\\n     * {setWithFallback}.\\n     *\\n     * WARNING: This will return the \\\"byte length\\\" of the string. This may not reflect the actual length in terms of\\n     * actual characters as the UTF-8 encoding of a single character can span over multiple bytes.\\n     */\\n    function byteLengthWithFallback(ShortString value, string storage store) internal view returns (uint256) {\\n        if (ShortString.unwrap(value) != FALLBACK_SENTINEL) {\\n            return byteLength(value);\\n        } else {\\n            return bytes(store).length;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x18a7171df639a934592915a520ecb97c5bbc9675a1105607aac8a94e72bf62c6\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/StorageSlot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/StorageSlot.sol)\\n// This file was procedurally generated from scripts/generate/templates/StorageSlot.js.\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```solidity\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(newImplementation.code.length > 0);\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n */\\nlibrary StorageSlot {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    struct StringSlot {\\n        string value;\\n    }\\n\\n    struct BytesSlot {\\n        bytes value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` with member `value` located at `slot`.\\n     */\\n    function getStringSlot(bytes32 slot) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` representation of the string storage pointer `store`.\\n     */\\n    function getStringSlot(string storage store) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` with member `value` located at `slot`.\\n     */\\n    function getBytesSlot(bytes32 slot) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` representation of the bytes storage pointer `store`.\\n     */\\n    function getBytesSlot(bytes storage store) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x32ba59b4b7299237c8ba56319110989d7978a039faf754793064e967e5894418\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Math} from \\\"./math/Math.sol\\\";\\nimport {SignedMath} from \\\"./math/SignedMath.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant HEX_DIGITS = \\\"0123456789abcdef\\\";\\n    uint8 private constant ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev The `value` string doesn't fit in the specified `length`.\\n     */\\n    error StringsInsufficientHexLength(uint256 value, uint256 length);\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), HEX_DIGITS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toStringSigned(int256 value) internal pure returns (string memory) {\\n        return string.concat(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMath.abs(value)));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        uint256 localValue = value;\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = HEX_DIGITS[localValue & 0xf];\\n            localValue >>= 4;\\n        }\\n        if (localValue != 0) {\\n            revert StringsInsufficientHexLength(value, length);\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal\\n     * representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return bytes(a).length == bytes(b).length && keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\",\"keccak256\":\"0x55f102ea785d8399c0e58d1108e2d289506dde18abc6db1b7f68c1f9f9bc5792\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/cryptography/ECDSA.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSA {\\n    enum RecoverError {\\n        NoError,\\n        InvalidSignature,\\n        InvalidSignatureLength,\\n        InvalidSignatureS\\n    }\\n\\n    /**\\n     * @dev The signature derives the `address(0)`.\\n     */\\n    error ECDSAInvalidSignature();\\n\\n    /**\\n     * @dev The signature has an invalid length.\\n     */\\n    error ECDSAInvalidSignatureLength(uint256 length);\\n\\n    /**\\n     * @dev The signature has an S value that is in the upper half order.\\n     */\\n    error ECDSAInvalidSignatureS(bytes32 s);\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with `signature` or an error. This will not\\n     * return address(0) without also returning an error description. Errors are documented using an enum (error type)\\n     * and a bytes32 providing additional information about the error.\\n     *\\n     * If no error is returned, then the address can be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM precompile allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {MessageHashUtils-toEthSignedMessageHash} on it.\\n     *\\n     * Documentation for signature generation:\\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\\n     */\\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError, bytes32) {\\n        if (signature.length == 65) {\\n            bytes32 r;\\n            bytes32 s;\\n            uint8 v;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                s := mload(add(signature, 0x40))\\n                v := byte(0, mload(add(signature, 0x60)))\\n            }\\n            return tryRecover(hash, v, r, s);\\n        } else {\\n            return (address(0), RecoverError.InvalidSignatureLength, bytes32(signature.length));\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM precompile allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {MessageHashUtils-toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        (address recovered, RecoverError error, bytes32 errorArg) = tryRecover(hash, signature);\\n        _throwError(error, errorArg);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\\n     *\\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\\n     */\\n    function tryRecover(bytes32 hash, bytes32 r, bytes32 vs) internal pure returns (address, RecoverError, bytes32) {\\n        unchecked {\\n            bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\\n            // We do not check for an overflow here since the shift operation results in 0 or 1.\\n            uint8 v = uint8((uint256(vs) >> 255) + 27);\\n            return tryRecover(hash, v, r, s);\\n        }\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\\n     */\\n    function recover(bytes32 hash, bytes32 r, bytes32 vs) internal pure returns (address) {\\n        (address recovered, RecoverError error, bytes32 errorArg) = tryRecover(hash, r, vs);\\n        _throwError(error, errorArg);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address, RecoverError, bytes32) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (301): 0 < s < secp256k1n \\u00f7 2 + 1, and for v in (302): v \\u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\n            return (address(0), RecoverError.InvalidSignatureS, s);\\n        }\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        if (signer == address(0)) {\\n            return (address(0), RecoverError.InvalidSignature, bytes32(0));\\n        }\\n\\n        return (signer, RecoverError.NoError, bytes32(0));\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) internal pure returns (address) {\\n        (address recovered, RecoverError error, bytes32 errorArg) = tryRecover(hash, v, r, s);\\n        _throwError(error, errorArg);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Optionally reverts with the corresponding custom error according to the `error` argument provided.\\n     */\\n    function _throwError(RecoverError error, bytes32 errorArg) private pure {\\n        if (error == RecoverError.NoError) {\\n            return; // no error: do nothing\\n        } else if (error == RecoverError.InvalidSignature) {\\n            revert ECDSAInvalidSignature();\\n        } else if (error == RecoverError.InvalidSignatureLength) {\\n            revert ECDSAInvalidSignatureLength(uint256(errorArg));\\n        } else if (error == RecoverError.InvalidSignatureS) {\\n            revert ECDSAInvalidSignatureS(errorArg);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xeed0a08b0b091f528356cbc7245891a4c748682d4f6a18055e8e6ca77d12a6cf\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/EIP712.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/cryptography/EIP712.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {MessageHashUtils} from \\\"./MessageHashUtils.sol\\\";\\nimport {ShortStrings, ShortString} from \\\"../ShortStrings.sol\\\";\\nimport {IERC5267} from \\\"../../interfaces/IERC5267.sol\\\";\\n\\n/**\\n * @dev https://eips.ethereum.org/EIPS/eip-712[EIP 712] is a standard for hashing and signing of typed structured data.\\n *\\n * The encoding scheme specified in the EIP requires a domain separator and a hash of the typed structured data, whose\\n * encoding is very generic and therefore its implementation in Solidity is not feasible, thus this contract\\n * does not implement the encoding itself. Protocols need to implement the type-specific encoding they need in order to\\n * produce the hash of their typed data using a combination of `abi.encode` and `keccak256`.\\n *\\n * This contract implements the EIP 712 domain separator ({_domainSeparatorV4}) that is used as part of the encoding\\n * scheme, and the final step of the encoding to obtain the message digest that is then signed via ECDSA\\n * ({_hashTypedDataV4}).\\n *\\n * The implementation of the domain separator was designed to be as efficient as possible while still properly updating\\n * the chain id to protect against replay attacks on an eventual fork of the chain.\\n *\\n * NOTE: This contract implements the version of the encoding known as \\\"v4\\\", as implemented by the JSON RPC method\\n * https://docs.metamask.io/guide/signing-data.html[`eth_signTypedDataV4` in MetaMask].\\n *\\n * NOTE: In the upgradeable version of this contract, the cached values will correspond to the address, and the domain\\n * separator of the implementation contract. This will cause the {_domainSeparatorV4} function to always rebuild the\\n * separator from the immutable values, which is cheaper than accessing a cached version in cold storage.\\n *\\n * @custom:oz-upgrades-unsafe-allow state-variable-immutable\\n */\\nabstract contract EIP712 is IERC5267 {\\n    using ShortStrings for *;\\n\\n    bytes32 private constant TYPE_HASH =\\n        keccak256(\\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\");\\n\\n    // Cache the domain separator as an immutable value, but also store the chain id that it corresponds to, in order to\\n    // invalidate the cached domain separator if the chain id changes.\\n    bytes32 private immutable _cachedDomainSeparator;\\n    uint256 private immutable _cachedChainId;\\n    address private immutable _cachedThis;\\n\\n    bytes32 private immutable _hashedName;\\n    bytes32 private immutable _hashedVersion;\\n\\n    ShortString private immutable _name;\\n    ShortString private immutable _version;\\n    string private _nameFallback;\\n    string private _versionFallback;\\n\\n    /**\\n     * @dev Initializes the domain separator and parameter caches.\\n     *\\n     * The meaning of `name` and `version` is specified in\\n     * https://eips.ethereum.org/EIPS/eip-712#definition-of-domainseparator[EIP 712]:\\n     *\\n     * - `name`: the user readable name of the signing domain, i.e. the name of the DApp or the protocol.\\n     * - `version`: the current major version of the signing domain.\\n     *\\n     * NOTE: These parameters cannot be changed except through a xref:learn::upgrading-smart-contracts.adoc[smart\\n     * contract upgrade].\\n     */\\n    constructor(string memory name, string memory version) {\\n        _name = name.toShortStringWithFallback(_nameFallback);\\n        _version = version.toShortStringWithFallback(_versionFallback);\\n        _hashedName = keccak256(bytes(name));\\n        _hashedVersion = keccak256(bytes(version));\\n\\n        _cachedChainId = block.chainid;\\n        _cachedDomainSeparator = _buildDomainSeparator();\\n        _cachedThis = address(this);\\n    }\\n\\n    /**\\n     * @dev Returns the domain separator for the current chain.\\n     */\\n    function _domainSeparatorV4() internal view returns (bytes32) {\\n        if (address(this) == _cachedThis && block.chainid == _cachedChainId) {\\n            return _cachedDomainSeparator;\\n        } else {\\n            return _buildDomainSeparator();\\n        }\\n    }\\n\\n    function _buildDomainSeparator() private view returns (bytes32) {\\n        return keccak256(abi.encode(TYPE_HASH, _hashedName, _hashedVersion, block.chainid, address(this)));\\n    }\\n\\n    /**\\n     * @dev Given an already https://eips.ethereum.org/EIPS/eip-712#definition-of-hashstruct[hashed struct], this\\n     * function returns the hash of the fully encoded EIP712 message for this domain.\\n     *\\n     * This hash can be used together with {ECDSA-recover} to obtain the signer of a message. For example:\\n     *\\n     * ```solidity\\n     * bytes32 digest = _hashTypedDataV4(keccak256(abi.encode(\\n     *     keccak256(\\\"Mail(address to,string contents)\\\"),\\n     *     mailTo,\\n     *     keccak256(bytes(mailContents))\\n     * )));\\n     * address signer = ECDSA.recover(digest, signature);\\n     * ```\\n     */\\n    function _hashTypedDataV4(bytes32 structHash) internal view virtual returns (bytes32) {\\n        return MessageHashUtils.toTypedDataHash(_domainSeparatorV4(), structHash);\\n    }\\n\\n    /**\\n     * @dev See {IERC-5267}.\\n     */\\n    function eip712Domain()\\n        public\\n        view\\n        virtual\\n        returns (\\n            bytes1 fields,\\n            string memory name,\\n            string memory version,\\n            uint256 chainId,\\n            address verifyingContract,\\n            bytes32 salt,\\n            uint256[] memory extensions\\n        )\\n    {\\n        return (\\n            hex\\\"0f\\\", // 01111\\n            _EIP712Name(),\\n            _EIP712Version(),\\n            block.chainid,\\n            address(this),\\n            bytes32(0),\\n            new uint256[](0)\\n        );\\n    }\\n\\n    /**\\n     * @dev The name parameter for the EIP712 domain.\\n     *\\n     * NOTE: By default this function reads _name which is an immutable value.\\n     * It only reads from storage if necessary (in case the value is too large to fit in a ShortString).\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function _EIP712Name() internal view returns (string memory) {\\n        return _name.toStringWithFallback(_nameFallback);\\n    }\\n\\n    /**\\n     * @dev The version parameter for the EIP712 domain.\\n     *\\n     * NOTE: By default this function reads _version which is an immutable value.\\n     * It only reads from storage if necessary (in case the value is too large to fit in a ShortString).\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function _EIP712Version() internal view returns (string memory) {\\n        return _version.toStringWithFallback(_versionFallback);\\n    }\\n}\\n\",\"keccak256\":\"0x999f705a027ed6dc2d4e0df2cc4a509852c6bfd11de1c8161bf88832d0503fd0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/MessageHashUtils.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/cryptography/MessageHashUtils.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Strings} from \\\"../Strings.sol\\\";\\n\\n/**\\n * @dev Signature message hash utilities for producing digests to be consumed by {ECDSA} recovery or signing.\\n *\\n * The library provides methods for generating a hash of a message that conforms to the\\n * https://eips.ethereum.org/EIPS/eip-191[EIP 191] and https://eips.ethereum.org/EIPS/eip-712[EIP 712]\\n * specifications.\\n */\\nlibrary MessageHashUtils {\\n    /**\\n     * @dev Returns the keccak256 digest of an EIP-191 signed data with version\\n     * `0x45` (`personal_sign` messages).\\n     *\\n     * The digest is calculated by prefixing a bytes32 `messageHash` with\\n     * `\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\"` and hashing the result. It corresponds with the\\n     * hash signed when using the https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`] JSON-RPC method.\\n     *\\n     * NOTE: The `messageHash` parameter is intended to be the result of hashing a raw message with\\n     * keccak256, although any bytes32 value can be safely used because the final digest will\\n     * be re-hashed.\\n     *\\n     * See {ECDSA-recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 messageHash) internal pure returns (bytes32 digest) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            mstore(0x00, \\\"\\\\x19Ethereum Signed Message:\\\\n32\\\") // 32 is the bytes-length of messageHash\\n            mstore(0x1c, messageHash) // 0x1c (28) is the length of the prefix\\n            digest := keccak256(0x00, 0x3c) // 0x3c is the length of the prefix (0x1c) + messageHash (0x20)\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the keccak256 digest of an EIP-191 signed data with version\\n     * `0x45` (`personal_sign` messages).\\n     *\\n     * The digest is calculated by prefixing an arbitrary `message` with\\n     * `\\\"\\\\x19Ethereum Signed Message:\\\\n\\\" + len(message)` and hashing the result. It corresponds with the\\n     * hash signed when using the https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`] JSON-RPC method.\\n     *\\n     * See {ECDSA-recover}.\\n     */\\n    function toEthSignedMessageHash(bytes memory message) internal pure returns (bytes32) {\\n        return\\n            keccak256(bytes.concat(\\\"\\\\x19Ethereum Signed Message:\\\\n\\\", bytes(Strings.toString(message.length)), message));\\n    }\\n\\n    /**\\n     * @dev Returns the keccak256 digest of an EIP-191 signed data with version\\n     * `0x00` (data with intended validator).\\n     *\\n     * The digest is calculated by prefixing an arbitrary `data` with `\\\"\\\\x19\\\\x00\\\"` and the intended\\n     * `validator` address. Then hashing the result.\\n     *\\n     * See {ECDSA-recover}.\\n     */\\n    function toDataWithIntendedValidatorHash(address validator, bytes memory data) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(hex\\\"19_00\\\", validator, data));\\n    }\\n\\n    /**\\n     * @dev Returns the keccak256 digest of an EIP-712 typed data (EIP-191 version `0x01`).\\n     *\\n     * The digest is calculated from a `domainSeparator` and a `structHash`, by prefixing them with\\n     * `\\\\x19\\\\x01` and hashing the result. It corresponds to the hash signed by the\\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`] JSON-RPC method as part of EIP-712.\\n     *\\n     * See {ECDSA-recover}.\\n     */\\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32 digest) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(ptr, hex\\\"19_01\\\")\\n            mstore(add(ptr, 0x02), domainSeparator)\\n            mstore(add(ptr, 0x22), structHash)\\n            digest := keccak256(ptr, 0x42)\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xba333517a3add42cd35fe877656fc3dfcc9de53baa4f3aabbd6d12a92e4ea435\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0x9e8778b14317ba9e256c30a76fd6c32b960af621987f56069e1e819c77c6a133\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x4296879f55019b23e135000eb36896057e7101fb7fb859c5ef690cf14643757b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    /**\\n     * @dev Muldiv operation overflow.\\n     */\\n    error MathOverflowedMulDiv();\\n\\n    enum Rounding {\\n        Floor, // Toward negative infinity\\n        Ceil, // Toward positive infinity\\n        Trunc, // Toward zero\\n        Expand // Away from zero\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds towards infinity instead\\n     * of rounding towards zero.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (b == 0) {\\n            // Guarantee the same behavior as in a regular Solidity division.\\n            return a / b;\\n        }\\n\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or\\n     * denominator == 0.\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv) with further edits by\\n     * Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0 = x * y; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            if (denominator <= prod1) {\\n                revert MathOverflowedMulDiv();\\n            }\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator.\\n            // Always >= 1. See https://cs.stackexchange.com/q/138556/92363.\\n\\n            uint256 twos = denominator & (0 - denominator);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also\\n            // works in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (unsignedRoundsUp(rounding) && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded\\n     * towards zero.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (unsignedRoundsUp(rounding) && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (unsignedRoundsUp(rounding) && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (unsignedRoundsUp(rounding) && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (unsignedRoundsUp(rounding) && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns whether a provided rounding mode is considered rounding up for unsigned integers.\\n     */\\n    function unsignedRoundsUp(Rounding rounding) internal pure returns (bool) {\\n        return uint8(rounding) % 2 == 1;\\n    }\\n}\\n\",\"keccak256\":\"0x005ec64c6313f0555d59e278f9a7a5ab2db5bdc72a027f255a37c327af1ec02d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SignedMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x5f7e4076e175393767754387c962926577f1660dd9b810187b9002407656be72\",\"license\":\"MIT\"},\"contracts/SingleIdentifierID.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity =0.8.24;\\n\\nimport {ECDSA} from \\\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\\\";\\nimport {EIP712, MessageHashUtils} from \\\"@openzeppelin/contracts/utils/cryptography/EIP712.sol\\\";\\nimport {Emitter} from \\\"./types/Structs.sol\\\";\\n\\nimport {ISingleIdentifierRegistry} from \\\"./interfaces/ISingleIdentifierRegistry.sol\\\";\\nimport {MessageLib} from \\\"./lib/MessageLib.sol\\\";\\nimport {ISingleRouter} from \\\"./interfaces/ISingleRouter.sol\\\";\\nimport {IConnector} from \\\"./interfaces/IConnector.sol\\\";\\nimport {SingleRouter} from \\\"./SingleRouter.sol\\\";\\nimport {AccessControl} from \\\"@openzeppelin/contracts/access/AccessControl.sol\\\";\\n\\ncontract SingleIdentifierID is AccessControl, EIP712 {\\n    bytes32 public constant OPERATOR_ROLE = keccak256(\\\"OPERATOR_ROLE\\\");\\n    string public constant NAME = \\\"Rubyscore_Single_Identifier_Id\\\";\\n    string public constant VERSION = \\\"0.0.1\\\";\\n    bytes32 private constant TYPE_HASH =\\n    keccak256(\\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\");\\n\\n    uint256 public protocolFee;\\n    uint256 public protocolBalance;\\n    SingleRouter public router;\\n\\n    mapping(bytes32 emitterId => Emitter emitter) public emitters;\\n    mapping(bytes32 emitterId => uint256 balance) public emittersBalances;\\n\\n    event EmitterRegistered(bytes32 indexed emitterId, address indexed emitterAddress, uint256 registryChainId);\\n    event SentRegisterSIDMessage(bytes32 indexed schemaId, uint32 indexed protocolId, address indexed user, uint256 registryDst);\\n    event SentUpdateSIDMessage(bytes32 indexed id, uint32 indexed protocolId, address indexed user, uint256 registryDst);\\n    event Withdrawal(address indexed receiver, uint256 amount);\\n    event UpdateEmitter(bytes32 indexed emitterId, address indexed newEmitter);\\n    event SetProtocolFee(uint256 fee);\\n    event SetRouter(address indexed newRouter);\\n\\n    error EmitterNotExists();\\n    error EmitterAlreadyExists();\\n    error DataIsEmpty();\\n    error SignatureInvalid();\\n    error WrongFeeAmount();\\n    error SenderNotEmitter();\\n    error AddressIsZero();\\n    error SIDNotValid();\\n    error SchemaIdInvalid();\\n    error ProtocolIdInvalid();\\n    error ExpirationDateInvalid();\\n    error ChainIdInvalid();\\n\\n    constructor(uint256 _protocolFee, address _admin, address _operator, address _router) EIP712(NAME, VERSION) {\\n        if (_admin == address(0)) revert AddressIsZero();\\n        if (_operator == address(0)) revert AddressIsZero();\\n\\n        protocolFee = _protocolFee;\\n        _setRouter(_router);\\n\\n        _grantRole(DEFAULT_ADMIN_ROLE, _admin);\\n        _grantRole(OPERATOR_ROLE, msg.sender);\\n        _grantRole(OPERATOR_ROLE, _operator);\\n    }\\n\\n    function registerSID(bytes32 _emitterId, uint32 _connectorId, bytes calldata _data, bytes calldata _signature, string calldata _metadata) external payable checkEmitter(_emitterId) {\\n        if (_data.length == 0) revert DataIsEmpty();\\n        if (_signature.length == 0) revert SignatureInvalid();\\n\\n        Emitter storage emitter = emitters[_emitterId];\\n\\n        bytes32 digest = _hashTypedDataV4(\\n            keccak256(\\n                abi.encode(\\n                    keccak256(\\\"RegisterParams(bytes32 schemaId,address user,bytes data,string metadata)\\\"),\\n                    emitter.schemaId,\\n                    msg.sender,\\n                    keccak256(_data),\\n                    keccak256(abi.encodePacked(_metadata))\\n                )\\n            )\\n        );\\n        _checkRole(OPERATOR_ROLE, ECDSA.recover(digest, _signature));\\n\\n        _sendRegisterSIDMessage(_emitterId, emitter.schemaId, _connectorId, emitter.fee, emitter.registryChainId, emitter.expirationDate, _data, _metadata);\\n    }\\n\\n    function registerSIDWithEmitter(\\n        bytes32 _schemaId,\\n        uint32 _connectorId,\\n        uint64 _expirationDate,\\n        uint256 _fee,\\n        uint256 _registryChainId,\\n        address _emitterAddress,\\n        bytes calldata _data,\\n        string calldata _metadata,\\n        bytes calldata _signature\\n    ) external payable {\\n        bytes32 emitterId = registerEmitter(_schemaId, _registryChainId, _emitterAddress, _expirationDate, _fee, _data, _signature);\\n        _sendRegisterSIDMessage(emitterId, _schemaId, _connectorId, _fee, _registryChainId, _expirationDate, _data, _metadata);\\n    }\\n\\n    function updateSID(bytes32 _emitterId, uint32 _connectorId, bytes32 _sidId, uint64 _expirationDate, bytes calldata _data, string calldata _metadata, bytes memory _signature) external checkEmitter(_emitterId) {\\n        if (_expirationDate < block.timestamp) revert ExpirationDateInvalid();\\n        if (_data.length == 0) revert DataIsEmpty();\\n        if (_signature.length == 0) revert SignatureInvalid();\\n        if (_sidId == bytes32(0)) revert SIDNotValid();\\n\\n        Emitter storage emitter = emitters[_emitterId];\\n\\n        bytes32 digest = _hashTypedDataV4(\\n            keccak256(\\n                abi.encode(\\n                    keccak256(\\\"UpdateParams(bytes32 sidId,uint64 expirationDate,bytes data,string metadata)\\\"),\\n                    _sidId,\\n                    _expirationDate,\\n                    keccak256(_data),\\n                    keccak256(abi.encodePacked(_metadata))\\n                )\\n            )\\n        );\\n        _checkRole(OPERATOR_ROLE, ECDSA.recover(digest, _signature));\\n\\n        _sendUpdateSIDMessage(emitter.emitterId, _connectorId, emitter.fee, emitter.registryChainId, _sidId, _expirationDate, _data, _metadata);\\n    }\\n\\n    function updateEmitter(bytes32 _emitterId, address _newEmitter) external onlyRole(OPERATOR_ROLE) checkEmitter(_emitterId) {\\n        if (_newEmitter == address(0)) revert AddressIsZero();\\n\\n        emitters[_emitterId].owner = _newEmitter;\\n\\n        emit UpdateEmitter(_emitterId, _newEmitter);\\n    }\\n\\n    function updateFee(bytes32 _emitterId, uint256 _fee) external checkEmitter(_emitterId) {\\n        Emitter storage emitter = emitters[_emitterId];\\n\\n        if (msg.sender != emitter.owner) revert SenderNotEmitter();\\n\\n\\n        emitters[_emitterId].fee = _fee;\\n    }\\n\\n    function withdraw(bytes32 _emitterId, address payable _receiver) external checkEmitter(_emitterId) {\\n        if (_receiver == address(0)) revert AddressIsZero();\\n\\n        Emitter memory emitter = emitters[_emitterId];\\n        if (msg.sender != emitter.owner) revert SenderNotEmitter();\\n\\n        uint256 amount = emittersBalances[_emitterId];\\n\\n        (bool sent,) = _receiver.call{value: amount}(\\\"\\\");\\n        require(sent, \\\"Failed to send Ether\\\");\\n\\n        emittersBalances[_emitterId] = 0;\\n\\n        emit Withdrawal(_receiver, amount);\\n    }\\n\\n    function withdraw(address payable _receiver) external onlyRole(DEFAULT_ADMIN_ROLE) {\\n        if (_receiver == address(0)) revert AddressIsZero();\\n\\n        (bool sent,) = _receiver.call{value: protocolBalance}(\\\"\\\");\\n        require(sent, \\\"Failed to send Ether\\\");\\n        protocolBalance = 0;\\n\\n        emit Withdrawal(_receiver, protocolBalance);\\n    }\\n\\n    function setProtocolFee(uint256 _fee) external onlyRole(OPERATOR_ROLE) {\\n        _setProtocolFee(_fee);\\n    }\\n\\n    function setRouter(address _router) external onlyRole(OPERATOR_ROLE) {\\n        _setRouter(_router);\\n        emit SetRouter(_router);\\n    }\\n\\n    function registerEmitter(\\n        bytes32 _schemaId,\\n        uint256 _registryChainId,\\n        address _emitterAddress,\\n        uint64 _expirationDate,\\n        uint256 _fee,\\n        bytes calldata _data,\\n        bytes calldata _signature\\n    ) public returns (bytes32) {\\n        if (_schemaId == bytes32(0)) revert SchemaIdInvalid();\\n        if (_expirationDate < block.timestamp) revert ExpirationDateInvalid();\\n        if (_registryChainId == uint256(0)) revert ChainIdInvalid();\\n        if (_emitterAddress == address(0)) revert AddressIsZero();\\n        if (_data.length == 0) revert DataIsEmpty();\\n        if (_signature.length == 0) revert SignatureInvalid();\\n\\n        bytes32 emitterId = _generateEmitterId(_schemaId, _registryChainId);\\n        if (emitters[emitterId].emitterId != bytes32(0)) revert EmitterAlreadyExists();\\n\\n        bytes32 registerDigest = _hashTypedDataV4WithoutDomain(\\n            keccak256(\\n                abi.encode(\\n                    keccak256(\\\"SendWithRegistryParams(bytes32 schemaId,address emitterAddress,uint256 registryChainId,address user,bytes data)\\\"),\\n                    _schemaId,\\n                    _emitterAddress,\\n                    _registryChainId,\\n                    msg.sender,\\n                    keccak256(_data)\\n                )\\n            )\\n        );\\n\\n        _checkRole(OPERATOR_ROLE, ECDSA.recover(registerDigest, _signature));\\n\\n        emitters[emitterId] = Emitter(\\n            emitterId,\\n            _schemaId,\\n            _expirationDate,\\n            _fee,\\n            _registryChainId,\\n            _emitterAddress\\n        );\\n\\n        emit EmitterRegistered(emitterId, _emitterAddress, _registryChainId);\\n\\n        return emitterId;\\n    }\\n\\n    function _generateEmitterId(bytes32 _schemaId, uint256 _registryChainId) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(_schemaId, _registryChainId));\\n    }\\n\\n    function _setRouter(address _router) private {\\n        if (_router == address(0)) revert AddressIsZero();\\n        router = SingleRouter(_router);\\n    }\\n\\n    function _setProtocolFee(uint256 _fee) private {\\n        protocolFee = _fee;\\n        emit SetProtocolFee(_fee);\\n    }\\n\\n    function _hashTypedDataV4WithoutDomain(bytes32 structHash) private pure returns (bytes32) {\\n        bytes32 hashedName = keccak256(bytes(NAME));\\n        bytes32 hashedVersion = keccak256(bytes(VERSION));\\n\\n        bytes32 domainSeparator = keccak256(abi.encode(TYPE_HASH, hashedName, hashedVersion, uint256(0), address(0)));\\n        return MessageHashUtils.toTypedDataHash(domainSeparator, structHash);\\n    }\\n\\n    function _sendRegisterSIDMessage(bytes32 _emitterId, bytes32 _schemaId, uint32 _connectorId, uint256 _fee, uint256 _registryChainId, uint64 _expirationDate, bytes calldata _data, string calldata _metadata) internal {\\n        uint256 totalAmount = _fee + protocolFee;\\n        if (msg.value < totalAmount) revert WrongFeeAmount();\\n\\n        emittersBalances[_emitterId] = _fee;\\n        protocolBalance += protocolFee;\\n\\n        IConnector connector = router.getRoute(_connectorId, _registryChainId);\\n        bytes memory payload = MessageLib.encodeMessage(MessageLib.SendMessage(_schemaId, msg.sender, _expirationDate, _data, _metadata));\\n\\n        connector.sendMessage(_registryChainId, payload);\\n\\n        emit SentRegisterSIDMessage(_schemaId, _connectorId, msg.sender, _registryChainId);\\n    }\\n\\n    function _sendUpdateSIDMessage(bytes32 _emitterId, uint32 _connectorId, uint256 _fee, uint256 _registryChainId, bytes32 _sidId, uint64 _expirationDate, bytes calldata _data, string calldata _metadata) internal {\\n        uint256 totalAmount = _fee + protocolFee;\\n        if (msg.value < totalAmount) revert WrongFeeAmount();\\n\\n        emittersBalances[_emitterId] = _fee;\\n        protocolBalance += protocolFee;\\n\\n        IConnector connector = router.getRoute(_connectorId, _registryChainId);\\n        bytes memory payload = MessageLib.encodeMessage(MessageLib.UpdateMessage(_sidId, _expirationDate, _data, _metadata));\\n\\n        uint256 fee = connector.quote(_registryChainId, payload);\\n        connector.sendMessage{ value: fee }(_registryChainId, payload);\\n\\n        emit SentUpdateSIDMessage(_sidId, _connectorId, msg.sender, _registryChainId);\\n    }\\n\\n    modifier checkEmitter(bytes32 _emitterId) {\\n        if (emitters[_emitterId].emitterId == bytes32(0)) revert EmitterNotExists();\\n        _;\\n    }\\n}\\n\",\"keccak256\":\"0xc885374838a77ebfaa75add851334f9edb0cb1e1107174d210593f8b4344a82a\",\"license\":\"MIT\"},\"contracts/SingleRouter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity =0.8.24;\\n\\nimport {IConnector} from \\\"./interfaces/IConnector.sol\\\";\\nimport {Destination} from \\\"./types/Structs.sol\\\";\\nimport {AccessControl} from \\\"@openzeppelin/contracts/access/AccessControl.sol\\\";\\n\\n\\ncontract SingleRouter is AccessControl {\\n    bytes32 public constant OPERATOR_ROLE = keccak256(\\\"OPERATOR_ROLE\\\");\\n\\n    address[] public connectorsList;\\n\\n    mapping(uint32 connectorId => IConnector connector) public connectors;\\n    mapping(uint256 chainId => mapping(uint32 connectorId => bytes32 peer)) public peers;\\n\\n    function getRoute(uint32 _connectorId, uint256 _destinationChainId) external view returns (IConnector) {\\n        IConnector connector;\\n\\n        if (block.chainid == _destinationChainId) {\\n            connector = connectors[0];\\n        } else {\\n            connector = connectors[_connectorId];\\n        }\\n\\n        return connector;\\n    }\\n\\n    function getPeer(uint32 _connectorId, uint256 _chainId) external view returns (bytes32) {\\n        bytes32 peer = peers[_chainId][_connectorId];\\n        if (peer == bytes32(0)) revert PeerNotExist(_chainId);\\n\\n        return peer;\\n    }\\n\\n    function isAvailablePeer(uint256 _chainId, uint32 _connectorId, address _sender) external view returns (bool) {\\n        bytes32 senderInBytes32 = bytes32(uint256(uint160(_sender)));\\n\\n        bytes32 peer = peers[_chainId][_connectorId];\\n\\n        return senderInBytes32 == peer;\\n    }\\n\\n    event PeerSet(uint256 indexed chainId, uint32 indexed _connectorId, bytes32 peer);\\n    event SetConnector(uint32 indexed connectorId, address indexed transferProtocol);\\n    event SetProtocolChainId(uint32 protocolChainId, uint256 chainId);\\n\\n    error PeerNotExist(uint256 chainId);\\n    error PeerInvalid();\\n\\n    constructor(address _operator) {\\n\\n        _grantRole(OPERATOR_ROLE, msg.sender);\\n        _grantRole(OPERATOR_ROLE, _operator);\\n    }\\n\\n    function setPeer(uint256 _chainId, uint32 _connectorId, bytes32 _peer) external onlyRole(OPERATOR_ROLE) {\\n        _setPeer(_chainId, _connectorId, _peer);\\n    }\\n\\n    function setPeers(uint32 _connectorId, uint256[]  calldata _chainIds, bytes32[]  calldata _peers) external onlyRole(OPERATOR_ROLE) {\\n        require(_chainIds.length == _peers.length, \\\"Invalid arrays length.\\\");\\n\\n        for (uint256 i = 0; i < _chainIds.length; i++) {\\n            _setPeer(_chainIds[i], _connectorId, _peers[i]);\\n        }\\n    }\\n\\n    function setConnectors(uint32[] calldata _connectorIds, address[] calldata _connectors) external onlyRole(OPERATOR_ROLE) {\\n        require(_connectorIds.length == _connectors.length, \\\"Invalid arrays length.\\\");\\n\\n        for (uint256 i = 0; i < _connectors.length; i++) {\\n            _setConnector(_connectorIds[i], _connectors[i]);\\n        }\\n    }\\n\\n    function setConnector(uint32 connectorId, address _connector) external onlyRole(OPERATOR_ROLE) {\\n        _setConnector(connectorId, _connector);\\n    }\\n\\n    function _setConnector(uint32 _connectorId, address _connector) private {\\n        connectors[_connectorId] = IConnector(_connector);\\n\\n        IConnector(_connector).setConnectorId(_connectorId);\\n        emit SetConnector(_connectorId, _connector);\\n    }\\n\\n    function _setConnector(address _connector) private {\\n        uint32 connectorId = uint32(connectorsList.length);\\n\\n        connectors[connectorId] = IConnector(_connector);\\n\\n        IConnector(_connector).setConnectorId(connectorId);\\n        emit SetConnector(connectorId, _connector);\\n    }\\n\\n    function _setPeer(uint256 _chainId, uint32 _connectorId, bytes32 _peer) private {\\n        if (_peer == bytes32(0)) revert PeerInvalid();\\n\\n        peers[_chainId][_connectorId] = _peer;\\n        emit PeerSet(_chainId, _connectorId, _peer);\\n    }\\n}\\n\",\"keccak256\":\"0xc16d153092e9fefb68faa2a86bbfd833d0eecabe05a08155d65c194673438704\",\"license\":\"MIT\"},\"contracts/interfaces/IConnector.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity =0.8.24;\\n\\ninterface IConnector {\\n\\n    function sendMessage(uint256 _registryDst, bytes calldata _payload) external payable;\\n\\n    function quote(uint256 _registryDst, bytes memory _payload) external view returns (uint256);\\n\\n    function getProtocolId() external view returns (bytes32);\\n\\n    function getDestinationChainId(uint256 nativeChainId) external view returns (uint256);\\n\\n    function setConnectorId(uint32 _connectorId) external;\\n\\n    function connectorId() external view returns (uint32);\\n}\\n\",\"keccak256\":\"0x82b004b53b048e3ee386962fcf3362f53282da8a122018dcd841f7092cbdd7df\",\"license\":\"MIT\"},\"contracts/interfaces/ISingleIdentifierRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity =0.8.24;\\n\\nimport {SIDSchema, SID} from \\\"../types/Structs.sol\\\";\\nimport {MessageLib} from \\\"../lib/MessageLib.sol\\\";\\n\\ninterface ISingleIdentifierRegistry {\\n\\n    function registrySID(MessageLib.SendMessage memory _payload) external;\\n\\n    function updateSID(MessageLib.UpdateMessage memory _payload) external;\\n\\n    function schemaRegistry(SIDSchema calldata _passportSchema, bytes calldata _signature) external;\\n\\n    function updateSchemaEmitter(bytes32 _schemaId, address _emitter) external;\\n\\n    function revoke(bytes32 _passportId) external;\\n}\\n\",\"keccak256\":\"0x126fab85543450d721389c70be5d4cc079ba9cac069f1e956ce78b86e0f4a0bd\",\"license\":\"MIT\"},\"contracts/interfaces/ISingleRouter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity =0.8.24;\\n\\ninterface ISingleRouter {\\n\\n    function getTransferProtocol(bytes32 _emitterId, uint32 _destination) external returns (address);\\n}\\n\",\"keccak256\":\"0x70f1f086416a0dc490c67f51a1d3b2599f148bf1ac9164705b22c3cc27d76273\",\"license\":\"MIT\"},\"contracts/lib/MessageLib.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity =0.8.24;\\n\\nlibrary MessageLib {\\n\\n    struct SendMessage {\\n        bytes32 schemaId;\\n        address user;\\n        uint64 expirationDate;\\n        bytes data;\\n        string metadata;\\n    }\\n\\n    struct UpdateMessage {\\n        bytes32 id;\\n        uint64 expirationDate;\\n        bytes data;\\n        string metadata;\\n    }\\n\\n    enum MessageType {TYPE_SEND_REGISTER, TYPE_SEND_UPDATE}\\n\\n    struct DecodedMessage {\\n        MessageType messageType;\\n        SendMessage sendMessage;\\n        UpdateMessage renewalMessage;\\n    }\\n\\n    uint8 public constant TYPE_SEND_REGISTER = 1;\\n    uint8 public constant TYPE_SEND_UPDATE = 2;\\n\\n    function encodeMessage(SendMessage memory _message) internal pure returns (bytes memory) {\\n        return abi.encode(TYPE_SEND_REGISTER, _message.schemaId, _message.user, _message.expirationDate, _message.data, _message.metadata);\\n    }\\n\\n    function encodeMessage(UpdateMessage memory _message) internal pure returns (bytes memory) {\\n        return abi.encode(TYPE_SEND_UPDATE, _message.id, _message.expirationDate, _message.data, _message.metadata);\\n    }\\n\\n    function decodeMessage(bytes memory _rawData) internal pure returns (DecodedMessage memory) {\\n        uint8 messageType;\\n        assembly {\\n            messageType := mload(add(_rawData, 1))\\n        }\\n\\n        if (messageType == TYPE_SEND_REGISTER) {\\n            (,bytes32 schemaId,\\n                address user,\\n                uint64 expirationDate,\\n                bytes memory registerData,\\n                string memory metadata\\n            ) = abi.decode(_rawData, (uint8, bytes32, address, uint64, bytes, string));\\n\\n            SendMessage memory sendMessage = SendMessage(schemaId, user, expirationDate, registerData, metadata);\\n            return DecodedMessage(MessageType.TYPE_SEND_REGISTER, sendMessage, UpdateMessage(bytes32(0), 0, \\\"\\\", \\\"\\\"));\\n        } else if (messageType == TYPE_SEND_UPDATE) {\\n            (, bytes32 id, uint64 expirationDate, bytes memory updateData, string memory metadata) = abi.decode(_rawData, (uint8, bytes32, uint64, bytes, string));\\n\\n            UpdateMessage memory renewalMessage = UpdateMessage(id, expirationDate, updateData, metadata);\\n            return DecodedMessage(MessageType.TYPE_SEND_UPDATE, SendMessage(bytes32(0), address(0), 0, \\\"\\\", \\\"\\\"), renewalMessage);\\n        } else {\\n            revert(\\\"Unknown message type\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x94b769e8d5657230bc15e5d5b96741a783f2453dfa0de54506d86648e241ea79\",\"license\":\"MIT\"},\"contracts/types/Structs.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity =0.8.24;\\n\\n    struct SID {\\n        bytes32 SIDId;\\n        bytes32 schemaId;\\n        uint64 expirationDate;\\n        uint64 revocationDate;\\n        bool revoked;\\n        address user;\\n        bytes data;\\n        string metadata;\\n    }\\n\\n    struct SIDSchema {\\n        bytes32 schemaId;\\n        string name;\\n        string description;\\n        string schema;\\n        address emitter;\\n    }\\n\\n    struct Emitter {\\n        bytes32 emitterId;\\n        bytes32 schemaId;\\n        uint64 expirationDate;\\n        uint256 fee;\\n        uint256 registryChainId;\\n        address owner;\\n    }\\n\\n    struct Destination {\\n        uint256 chainId;\\n        uint32 layerZero;\\n        uint32 hyperlane;\\n    }\\n\\n    struct Peers {\\n        bytes32 sender;\\n        bytes32 receiver;\\n    }\\n\",\"keccak256\":\"0x92f3154973a3fdf4df4e5e8af680e6dc0c4f660c70d1a06425b23b259f55a7f1\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x610160346200025c57601f620025d538819003918201601f1916830192916001600160401b039182851184861017620002465781608092859260409788528339810103126200025c5781519262000059602084016200027d565b926200007560606200006d8484016200027d565b92016200027d565b93825193620000848562000261565b601e855260208501957f5275627973636f72655f53696e676c655f4964656e7469666965725f496400008752845197620000be8962000261565b600589526020890164302e302e3160d81b8152620000dc88620003b4565b98610120998a52620000ee8b6200058b565b98610140998a52519020998a60e0525190209861010099808b524660a05287519060208201927f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f84528983015260608201524660808201523060a082015260a0815260c08101948186109086111762000246578488525190206080523060c0526001600160a01b0392848416156200023757508285161562000226576003551680156200021557600580546001600160a01b0319169091179055620001cc9190620001b99062000292565b50620001c53362000312565b5062000312565b505191611e71938462000744853960805184611ac5015260a05184611b80015260c05184611a8f015260e05184611b1401525183611b3a0152518261094b015251816109750152f35b835163867915ab60e01b8152600490fd5b855163867915ab60e01b8152600490fd5b63867915ab60e01b8152600490fd5b634e487b7160e01b600052604160045260246000fd5b600080fd5b604081019081106001600160401b038211176200024657604052565b51906001600160a01b03821682036200025c57565b6001600160a01b031660008181527fad3228b676f7d3cd4284a5443f17f1962b36e491b30a40b2405849e597ba5fb5602052604081205490919060ff166200030e57818052816020526040822081835260205260408220600160ff198254161790553391600080516020620025b58339815191528180a4600190565b5090565b6001600160a01b031660008181527fee57cd81e84075558e8fcc182a1f4393f91fc97f963a136e66b7f949a62f319f60205260408120549091907f97667070c54ef182b0f5858b034beac1b6f3089aa2d3188bb1e8929f4fa9b9299060ff16620003af57808352826020526040832082845260205260408320600160ff19825416179055600080516020620025b5833981519152339380a4600190565b505090565b805160209081811015620004515750601f825111620003f05780825192015190808310620003e157501790565b82600019910360031b1b161790565b90604051809263305a27a960e01b82528060048301528251908160248401526000935b82851062000437575050604492506000838284010152601f80199101168101030190fd5b848101820151868601604401529381019385935062000413565b9192916001600160401b038111620002465760019182548381811c9116801562000580575b828210146200056a57601f811162000531575b5080601f8311600114620004c9575081929394600092620004bd575b5050600019600383901b1c191690821b17905560ff90565b015190503880620004a5565b90601f198316958460005282600020926000905b888210620005195750508385969710620004ff575b505050811b01905560ff90565b015160001960f88460031b161c19169055388080620004f2565b808785968294968601518155019501930190620004dd565b8360005283601f83600020920160051c820191601f850160051c015b8281106200055d57505062000489565b600081550184906200054d565b634e487b7160e01b600052602260045260246000fd5b90607f169062000476565b805160209081811015620006195750601f825111620005b85780825192015190808310620003e157501790565b90604051809263305a27a960e01b82528060048301528251908160248401526000935b828510620005ff575050604492506000838284010152601f80199101168101030190fd5b8481018201518686016044015293810193859350620005db565b906001600160401b0382116200024657600254926001938481811c9116801562000738575b838210146200056a57601f8111620006fe575b5081601f841160011462000692575092829391839260009462000686575b50501b916000199060031b1c19161760025560ff90565b0151925038806200066f565b919083601f198116600260005284600020946000905b88838310620006e35750505010620006c9575b505050811b0160025560ff90565b015160001960f88460031b161c19169055388080620006bb565b858701518855909601959485019487935090810190620006a8565b600260005284601f84600020920160051c820191601f860160051c015b8281106200072b57505062000651565b600081550185906200071b565b90607f16906200063e56fe608080604052600436101561001357600080fd5b600090813560e01c90816301ffc9a714611064575080630c3f573c14610fa357806311d7d03514610f125780631b258d5014610e18578063248a9ca314610dec5780632f2ff15d14610dad5780633427b33f14610d4057806336568abe14610cf857806351cff8d914610c4657806361adccb114610ac257806361e98db814610aa4578063787dce3d14610a5557806384b0196e1461093557806391d14854146108ed57806398ac5f1b1461042d578063a0ede6a91461038d578063a217fddf14610371578063a3f4df7e14610355578063b0e21e8a14610337578063c0d78655146102ba578063cbac3e4914610246578063d547741f14610203578063eca1cacf146101d9578063f5b541a61461019e578063f887ea40146101755763ffa1ad741461013f57600080fd5b3461017257806003193601126101725761016e61015a61128b565b604051918291602083526020830190611140565b0390f35b80fd5b50346101725780600319360112610172576005546040516001600160a01b039091168152602090f35b503461017257806003193601126101725760206040517f97667070c54ef182b0f5858b034beac1b6f3089aa2d3188bb1e8929f4fa9b9298152f35b50346101725760203660031901126101725760406020916004358152600783522054604051908152f35b5034610172576040366003190112610172576102426004356102236110e7565b908084528360205261023d6001604086200154339061188a565b611939565b5080f35b503461017257602036600319011261017257604060c09160043581526006602052208054906001810154906001600160401b03600282015416600382015490600483015492600560018060a01b039101541693604051958652602086015260408501526060840152608083015260a0820152f35b5034610172576020366003190112610172576102d46110fd565b6102dd33611807565b6001600160a01b0316801561032557600580546001600160a01b031916821790557f6de4326a8b9054d72d9dbab97d27bc4edffadee7d966f5af9cc4eafdaf8e54558280a280f35b60405163867915ab60e01b8152600490fd5b50346101725780600319360112610172576020600354604051908152f35b503461017257806003193601126101725761016e61015a611252565b5034610172578060031936011261017257602090604051908152f35b5034610172576040366003190112610172576004356103aa6110e7565b6103b333611807565b818352600660205260408320541561041b576001600160a01b03169081156103255780835260066020526040832060050180546001600160a01b031916831790557f667925a9bdae8446a1b9442b13ed4c01f57a9b33ed84c5f58992a6d5be8c2f868380a380f35b60405163b6df4bdb60e01b8152600490fd5b50346101725760e03660031901126101725760043561044a6110b9565b906104536110d1565b906084356001600160401b0381116108e957610473903690600401611113565b60a4356001600160401b0381116108e557610492903690600401611113565b939060c4356001600160401b0381116108e157366023820112156108e1576104c490369060248160040135910161121b565b95828952600660205260408920541561041b576001600160401b0316914283106108cf5783156108bd578651156108ab57604435156108995788526006602052604088209561051436858761121b565b80519060200120604051602081019088858337808981018d60208201520380825260200161054290826111df565b5190206040519060208201927f3e7a516fe2d41e22e28fe9cb74cd05e64b2325fb408b583b94d2c278ea87d45984526044356040840152866060840152608083015260a082015260a0815261059681611180565b5190206105a1611a8c565b906105ab916119ae565b906105b5916119cb565b6105be91611a07565b6105c790611807565b85549360038701549660040154966003546105e290826115ba565b61088757610645958a52600760205260408a20556106046003546004546115ba565b60045560208760018060a01b03600554168a604051809981948293634918d76b60e01b8452600484016020909392919363ffffffff60408201951681520152565b03915afa94851561087c57899561084b575b5060405193608085018581106001600160401b03821117610837576001600160401b036106b68c9897956106a761070a98966106fe966106eb966040526044358a5260208a01988952369161121b565b9a604088019b8c52369161121b565b94856060820152519351169751604051988994600260208701526040860152606085015260a0608085015260c0840190611140565b601f1993848483030160a0850152611140565b039081018552846111df565b604080516377d2b77160e01b815260048101869052602481019190915292906001600160a01b0316602084806107436044820186611140565b0381845afa93841561082c5783946107f8575b50803b156107f45761078c9160405194858094819363e289adcd60e01b8352896004840152604060248401526044830190611140565b03925af180156107e9576107d6575b5060405190815263ffffffff339216907f67a4c03bf8579f3c9861215d59876074cd52df280ba316d73f0eecc7aacbe160602060443592a480f35b6107e2909391936111b1565b913861079b565b6040513d86823e3d90fd5b8280fd5b9093506020813d602011610824575b81610814602093836111df565b810103126107f457519238610756565b3d9150610807565b6040513d85823e3d90fd5b634e487b7160e01b8b52604160045260248bfd5b61086e91955060203d602011610875575b61086681836111df565b8101906115dd565b9338610657565b503d61085c565b6040513d8b823e3d90fd5b604051636bae82db60e11b8152600490fd5b6040516313b96ac560e31b8152600490fd5b6040516337e8456b60e01b8152600490fd5b6040516391ea306f60e01b8152600490fd5b604051633b1e6c5f60e11b8152600490fd5b8880fd5b8680fd5b8480fd5b50346101725760403660031901126101725760ff604060209261090e6110e7565b60043582528185528282206001600160a01b03909116825284522054604051911615158152f35b503461017257806003193601126101725761096f7f0000000000000000000000000000000000000000000000000000000000000000611ba6565b906109997f0000000000000000000000000000000000000000000000000000000000000000611cd3565b906040519060209060208301938385106001600160401b03861117610a415792849260206109f788966109e998604052858552604051988998600f60f81b8a5260e0858b015260e08a0190611140565b9088820360408a0152611140565b924660608801523060808801528460a088015286840360c088015251928381520193925b828110610a2a57505050500390f35b835185528695509381019392810192600101610a1b565b634e487b7160e01b82526041600452602482fd5b5034610172576020366003190112610172577fdc0410a296e1e33943a772020d333d5f99319d7fcad932a484c53889f7aaa2b16020600435610a9633611807565b80600355604051908152a180f35b50346101725780600319360112610172576020600454604051908152f35b5060a036600319011261017257600435610ada6110b9565b6001600160401b03906044358281116108e957610afb903690600401611113565b906064358481116108e557610b14903690600401611113565b6084358681116108e157610b2c903690600401611113565b969095888a526020926006845260408b20541561041b5786156108bd5780156108ab57898b526006845260408b2060018101549590948a908a8e82610b72368e8e61121b565b8181519101209460405192818492848401968737820190838201520380835201610b9c90826111df565b519020604051918201927f3099343916b7010ba6d9380d3a62b19ae833bcc0f9214c67d2f40a9c3221f4348452896040840152336060840152608083015260a082015260a08152610bec81611180565b519020610bf7611a8c565b90610c01916119ae565b913690610c0d9261121b565b610c16916119cb565b610c1f91611a07565b610c2890611807565b600383015491600484015493600201541693610c43996115fc565b80f35b503461017257602036600319011261017257610c606110fd565b818052816020526040822033835260205260ff60408320541615610cd9576001600160a01b0316801561032557610ca882808080600454865af1610ca2611547565b50611577565b816004557f7fcf532c15f0a6db0bd6d0e038bea71d30d808c7d98cb3bf7268a95bf5081b656020604051848152a280f35b60405163e2517d3f60e01b815233600482015260248101839052604490fd5b503461017257604036600319011261017257610d126110e7565b336001600160a01b03821603610d2e5761024290600435611939565b60405163334bd91960e11b8152600490fd5b503461017257604036600319011261017257600435808252600660205260408220541561041b57808252600660205260408220600501546001600160a01b03163303610d9b5781526006602052602435600360408320015580f35b604051632d7e4ee760e21b8152600490fd5b503461017257604036600319011261017257610242600435610dcd6110e7565b9080845283602052610de76001604086200154339061188a565b6118bb565b503461017257602036600319011261017257600160406020926004358152808452200154604051908152f35b503461017257604036600319011261017257600435610e356110e7565b9080835260206006815260408420541561041b576001600160a01b039283169283156103255760a090838652600683526040862090600560405192610e7984611180565b805484526001810154868501526001600160401b036002820154166040850152600381015460608501526004810154608085015201541691829101523303610d9b578184526007815260408420547f7fcf532c15f0a6db0bd6d0e038bea71d30d808c7d98cb3bf7268a95bf5081b6592610efc86808080868a5af1610ca2611547565b855260078252846040812055604051908152a280f35b50346101725760e036600319011261017257604435906001600160a01b038216820361017257610f406110d1565b906001600160401b039060a435828111610f9f57610f62903690600401611113565b92909160c435918211610172576020610f9787878787610f853660048a01611113565b949093608435916024356004356112ac565b604051908152f35b5080fd5b5061012036600319011261017257600435610fbc6110b9565b906044356001600160401b039283821682036108e95760a4359160643591906084356001600160a01b03851685036110605760c4358781116108e157611006903690600401611113565b94909360e43589811161105c57611021903690600401611113565b989097610104359a8b11611058578561105391898987610c439f611049903690600401611113565b9590948b896112ac565b6115fc565b8b80fd5b8a80fd5b8780fd5b905034610f9f576020366003190112610f9f5760043563ffffffff60e01b81168091036107f45760209250637965db0b60e01b81149081156110a8575b5015158152f35b6301ffc9a760e01b149050386110a1565b6024359063ffffffff821682036110cc57565b600080fd5b606435906001600160401b03821682036110cc57565b602435906001600160a01b03821682036110cc57565b600435906001600160a01b03821682036110cc57565b9181601f840112156110cc578235916001600160401b0383116110cc57602083818601950101116110cc57565b919082519283825260005b84811061116c575050826000602080949584010152601f8019910116010190565b60208183018101518483018201520161114b565b60c081019081106001600160401b0382111761119b57604052565b634e487b7160e01b600052604160045260246000fd5b6001600160401b03811161119b57604052565b604081019081106001600160401b0382111761119b57604052565b90601f801991011681019081106001600160401b0382111761119b57604052565b6001600160401b03811161119b57601f01601f191660200190565b92919261122782611200565b9161123560405193846111df565b8294818452818301116110cc578281602093846000960137010152565b6040519061125f826111c4565b601e82527f5275627973636f72655f53696e676c655f4964656e7469666965725f496400006020830152565b60405190611298826111c4565b6005825264302e302e3160d81b6020830152565b909495979391928115611535576001600160401b03809116914283106108cf578615611523576001600160a01b03948516988915610325578a156108bd5786156108ab5760409687519160209a8b84018581528b8b8601528a855260608501948086108887111761119b57858c525190209d8e948d6000968752600690528b86205461151457508d9161134091369161121b565b8c81519101208a51908d8201927fa661ba5adeddc46f883f4f86d014fe04b4c6a599d6f714d3f750c4c88fe1fc9e8452878d84015260608301528c60808301523360a083015260c082015260c0815260e081018181108882111761150057958f9d9b8f9993968f977f1e25e2f1371ab2b801f4d9d7359bd854406ce605572b1b994ba7b32c5da121f79f9d9a948f908f99859f996114799161146a60059f9261146260069861147e97611470968d525190208b6113fb611252565b8a815191012061140961128b565b8b81519101208251918c8301937f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f855283015260608201528c60808201528c60a082015260a0815261145a81611180565b5190206119ae565b92369161121b565b906119cb565b90929192611a07565b611807565b83519961148a8b611180565b808b52818b01958652848b0197885260608b0198895260808b01998a5260a08b019d8e528352522095518655516001860155600285019151166001600160401b0319825416179055516003830155516004820155019151166bffffffffffffffffffffffff60a01b82541617905551908152a390565b634e487b7160e01b86526041600452602486fd5b6399ed5a0360e01b8152600490fd5b604051636fd794c760e01b8152600490fd5b60405163335ece0360e01b8152600490fd5b3d15611572573d9061155882611200565b9161156660405193846111df565b82523d6000602084013e565b606090565b1561157e57565b60405162461bcd60e51b81526020600482015260146024820152732330b4b632b2103a379039b2b7321022ba3432b960611b6044820152606490fd5b919082018092116115c757565b634e487b7160e01b600052601160045260246000fd5b908160209103126110cc57516001600160a01b03811681036110cc5790565b93979590969198949294611612600354876115ba565b341061088757899361168093600096875260209860078a526040988989205561163f6003546004546115ba565b600455898c60018060a01b03988960055416908c51809a81948293634918d76b60e01b8452600484016020909392919363ffffffff60408201951681520152565b03915afa9586156117fd5788966117de575b508851946001600160401b039260a087018481118882101761083757958795858f9b8f978f976116eb60019f98849f9e986116fa946117459f9c8e6117329d6106fe9f83528d528c019b338d520198168852369161121b565b9560608c01968752369161121b565b98896080820152519451169151169151928d519b8c978801528d8701526060860152608085015260c060a085015260e0840190611140565b601f1993848483030160c0850152611140565b1690813b156107f45761177d83928392865195868094819363e289adcd60e01b83528d60048401528a60248401526044830190611140565b03925af19081156117d35750907f99846cbfae302af9a36c958b82461e643139f9aff8e6d0e5ee931d70655537379392916117c4575b505193845263ffffffff33951693a4565b6117cd906111b1565b386117b3565b8351903d90823e3d90fd5b6117f69196508a3d8c116108755761086681836111df565b9438611692565b89513d8a823e3d90fd5b6001600160a01b031660008181527fee57cd81e84075558e8fcc182a1f4393f91fc97f963a136e66b7f949a62f319f60205260409020547f97667070c54ef182b0f5858b034beac1b6f3089aa2d3188bb1e8929f4fa9b9299060ff161561186c575050565b604492506040519163e2517d3f60e01b835260048301526024820152fd5b80600052600060205260406000209160018060a01b0316918260005260205260ff604060002054161561186c575050565b9060009180835282602052604083209160018060a01b03169182845260205260ff6040842054161560001461193457808352826020526040832082845260205260408320600160ff198254161790557f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d339380a4600190565b505090565b9060009180835282602052604083209160018060a01b03169182845260205260ff6040842054166000146119345780835282602052604083208284526020526040832060ff1981541690557ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b339380a4600190565b6042916040519161190160f01b8352600283015260228201522090565b81519190604183036119fc576119f592506020820151906060604084015193015160001a90611dab565b9192909190565b505060009160029190565b6004811015611a765780611a19575050565b60018103611a335760405163f645eedf60e01b8152600490fd5b60028103611a545760405163fce698f760e01b815260048101839052602490fd5b600314611a5e5750565b602490604051906335e2f38360e21b82526004820152fd5b634e487b7160e01b600052602160045260246000fd5b307f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03161480611b7d575b15611ae7577f000000000000000000000000000000000000000000000000000000000000000090565b60405160208101907f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f82527f000000000000000000000000000000000000000000000000000000000000000060408201527f000000000000000000000000000000000000000000000000000000000000000060608201524660808201523060a082015260a08152611b7781611180565b51902090565b507f00000000000000000000000000000000000000000000000000000000000000004614611abe565b60ff8114611be45760ff811690601f8211611bd25760405191611bc8836111c4565b8252602082015290565b604051632cd44ac360e21b8152600490fd5b506040516000600190600154918260011c9060018416938415611cc9575b6020948584108114611cb55783875286949392918115611c955750600114611c36575b5050611c33925003826111df565b90565b9093915060016000527fb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cf6936000915b818310611c7d575050611c3393508201013880611c25565b85548784018501529485019486945091830191611c65565b915050611c3394925060ff191682840152151560051b8201013880611c25565b634e487b7160e01b85526022600452602485fd5b91607f1691611c02565b60ff8114611cf55760ff811690601f8211611bd25760405191611bc8836111c4565b5060405160006002549060018260011c9060018416938415611da1575b6020948584108114611cb55783875286949392918115611c955750600114611d42575050611c33925003826111df565b9093915060026000527f405787fa12a823e0f2b7631cc41b3ba8828b3321ca811111fa75cd3aa3bb5ace936000915b818310611d89575050611c3393508201013880611c25565b85548784018501529485019486945091830191611d71565b91607f1691611d12565b91907f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a08411611e2f57926020929160ff608095604051948552168484015260408301526060820152600092839182805260015afa15611e235780516001600160a01b03811615611e1a57918190565b50809160019190565b604051903d90823e3d90fd5b5050506000916003919056fea26469706673582212203eff82166188f007f2b81324d5b29b2a4bb7824f79517995644c92a1a2943bcb64736f6c634300081800332f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
  "deployedBytecode": "0x608080604052600436101561001357600080fd5b600090813560e01c90816301ffc9a714611064575080630c3f573c14610fa357806311d7d03514610f125780631b258d5014610e18578063248a9ca314610dec5780632f2ff15d14610dad5780633427b33f14610d4057806336568abe14610cf857806351cff8d914610c4657806361adccb114610ac257806361e98db814610aa4578063787dce3d14610a5557806384b0196e1461093557806391d14854146108ed57806398ac5f1b1461042d578063a0ede6a91461038d578063a217fddf14610371578063a3f4df7e14610355578063b0e21e8a14610337578063c0d78655146102ba578063cbac3e4914610246578063d547741f14610203578063eca1cacf146101d9578063f5b541a61461019e578063f887ea40146101755763ffa1ad741461013f57600080fd5b3461017257806003193601126101725761016e61015a61128b565b604051918291602083526020830190611140565b0390f35b80fd5b50346101725780600319360112610172576005546040516001600160a01b039091168152602090f35b503461017257806003193601126101725760206040517f97667070c54ef182b0f5858b034beac1b6f3089aa2d3188bb1e8929f4fa9b9298152f35b50346101725760203660031901126101725760406020916004358152600783522054604051908152f35b5034610172576040366003190112610172576102426004356102236110e7565b908084528360205261023d6001604086200154339061188a565b611939565b5080f35b503461017257602036600319011261017257604060c09160043581526006602052208054906001810154906001600160401b03600282015416600382015490600483015492600560018060a01b039101541693604051958652602086015260408501526060840152608083015260a0820152f35b5034610172576020366003190112610172576102d46110fd565b6102dd33611807565b6001600160a01b0316801561032557600580546001600160a01b031916821790557f6de4326a8b9054d72d9dbab97d27bc4edffadee7d966f5af9cc4eafdaf8e54558280a280f35b60405163867915ab60e01b8152600490fd5b50346101725780600319360112610172576020600354604051908152f35b503461017257806003193601126101725761016e61015a611252565b5034610172578060031936011261017257602090604051908152f35b5034610172576040366003190112610172576004356103aa6110e7565b6103b333611807565b818352600660205260408320541561041b576001600160a01b03169081156103255780835260066020526040832060050180546001600160a01b031916831790557f667925a9bdae8446a1b9442b13ed4c01f57a9b33ed84c5f58992a6d5be8c2f868380a380f35b60405163b6df4bdb60e01b8152600490fd5b50346101725760e03660031901126101725760043561044a6110b9565b906104536110d1565b906084356001600160401b0381116108e957610473903690600401611113565b60a4356001600160401b0381116108e557610492903690600401611113565b939060c4356001600160401b0381116108e157366023820112156108e1576104c490369060248160040135910161121b565b95828952600660205260408920541561041b576001600160401b0316914283106108cf5783156108bd578651156108ab57604435156108995788526006602052604088209561051436858761121b565b80519060200120604051602081019088858337808981018d60208201520380825260200161054290826111df565b5190206040519060208201927f3e7a516fe2d41e22e28fe9cb74cd05e64b2325fb408b583b94d2c278ea87d45984526044356040840152866060840152608083015260a082015260a0815261059681611180565b5190206105a1611a8c565b906105ab916119ae565b906105b5916119cb565b6105be91611a07565b6105c790611807565b85549360038701549660040154966003546105e290826115ba565b61088757610645958a52600760205260408a20556106046003546004546115ba565b60045560208760018060a01b03600554168a604051809981948293634918d76b60e01b8452600484016020909392919363ffffffff60408201951681520152565b03915afa94851561087c57899561084b575b5060405193608085018581106001600160401b03821117610837576001600160401b036106b68c9897956106a761070a98966106fe966106eb966040526044358a5260208a01988952369161121b565b9a604088019b8c52369161121b565b94856060820152519351169751604051988994600260208701526040860152606085015260a0608085015260c0840190611140565b601f1993848483030160a0850152611140565b039081018552846111df565b604080516377d2b77160e01b815260048101869052602481019190915292906001600160a01b0316602084806107436044820186611140565b0381845afa93841561082c5783946107f8575b50803b156107f45761078c9160405194858094819363e289adcd60e01b8352896004840152604060248401526044830190611140565b03925af180156107e9576107d6575b5060405190815263ffffffff339216907f67a4c03bf8579f3c9861215d59876074cd52df280ba316d73f0eecc7aacbe160602060443592a480f35b6107e2909391936111b1565b913861079b565b6040513d86823e3d90fd5b8280fd5b9093506020813d602011610824575b81610814602093836111df565b810103126107f457519238610756565b3d9150610807565b6040513d85823e3d90fd5b634e487b7160e01b8b52604160045260248bfd5b61086e91955060203d602011610875575b61086681836111df565b8101906115dd565b9338610657565b503d61085c565b6040513d8b823e3d90fd5b604051636bae82db60e11b8152600490fd5b6040516313b96ac560e31b8152600490fd5b6040516337e8456b60e01b8152600490fd5b6040516391ea306f60e01b8152600490fd5b604051633b1e6c5f60e11b8152600490fd5b8880fd5b8680fd5b8480fd5b50346101725760403660031901126101725760ff604060209261090e6110e7565b60043582528185528282206001600160a01b03909116825284522054604051911615158152f35b503461017257806003193601126101725761096f7f0000000000000000000000000000000000000000000000000000000000000000611ba6565b906109997f0000000000000000000000000000000000000000000000000000000000000000611cd3565b906040519060209060208301938385106001600160401b03861117610a415792849260206109f788966109e998604052858552604051988998600f60f81b8a5260e0858b015260e08a0190611140565b9088820360408a0152611140565b924660608801523060808801528460a088015286840360c088015251928381520193925b828110610a2a57505050500390f35b835185528695509381019392810192600101610a1b565b634e487b7160e01b82526041600452602482fd5b5034610172576020366003190112610172577fdc0410a296e1e33943a772020d333d5f99319d7fcad932a484c53889f7aaa2b16020600435610a9633611807565b80600355604051908152a180f35b50346101725780600319360112610172576020600454604051908152f35b5060a036600319011261017257600435610ada6110b9565b6001600160401b03906044358281116108e957610afb903690600401611113565b906064358481116108e557610b14903690600401611113565b6084358681116108e157610b2c903690600401611113565b969095888a526020926006845260408b20541561041b5786156108bd5780156108ab57898b526006845260408b2060018101549590948a908a8e82610b72368e8e61121b565b8181519101209460405192818492848401968737820190838201520380835201610b9c90826111df565b519020604051918201927f3099343916b7010ba6d9380d3a62b19ae833bcc0f9214c67d2f40a9c3221f4348452896040840152336060840152608083015260a082015260a08152610bec81611180565b519020610bf7611a8c565b90610c01916119ae565b913690610c0d9261121b565b610c16916119cb565b610c1f91611a07565b610c2890611807565b600383015491600484015493600201541693610c43996115fc565b80f35b503461017257602036600319011261017257610c606110fd565b818052816020526040822033835260205260ff60408320541615610cd9576001600160a01b0316801561032557610ca882808080600454865af1610ca2611547565b50611577565b816004557f7fcf532c15f0a6db0bd6d0e038bea71d30d808c7d98cb3bf7268a95bf5081b656020604051848152a280f35b60405163e2517d3f60e01b815233600482015260248101839052604490fd5b503461017257604036600319011261017257610d126110e7565b336001600160a01b03821603610d2e5761024290600435611939565b60405163334bd91960e11b8152600490fd5b503461017257604036600319011261017257600435808252600660205260408220541561041b57808252600660205260408220600501546001600160a01b03163303610d9b5781526006602052602435600360408320015580f35b604051632d7e4ee760e21b8152600490fd5b503461017257604036600319011261017257610242600435610dcd6110e7565b9080845283602052610de76001604086200154339061188a565b6118bb565b503461017257602036600319011261017257600160406020926004358152808452200154604051908152f35b503461017257604036600319011261017257600435610e356110e7565b9080835260206006815260408420541561041b576001600160a01b039283169283156103255760a090838652600683526040862090600560405192610e7984611180565b805484526001810154868501526001600160401b036002820154166040850152600381015460608501526004810154608085015201541691829101523303610d9b578184526007815260408420547f7fcf532c15f0a6db0bd6d0e038bea71d30d808c7d98cb3bf7268a95bf5081b6592610efc86808080868a5af1610ca2611547565b855260078252846040812055604051908152a280f35b50346101725760e036600319011261017257604435906001600160a01b038216820361017257610f406110d1565b906001600160401b039060a435828111610f9f57610f62903690600401611113565b92909160c435918211610172576020610f9787878787610f853660048a01611113565b949093608435916024356004356112ac565b604051908152f35b5080fd5b5061012036600319011261017257600435610fbc6110b9565b906044356001600160401b039283821682036108e95760a4359160643591906084356001600160a01b03851685036110605760c4358781116108e157611006903690600401611113565b94909360e43589811161105c57611021903690600401611113565b989097610104359a8b11611058578561105391898987610c439f611049903690600401611113565b9590948b896112ac565b6115fc565b8b80fd5b8a80fd5b8780fd5b905034610f9f576020366003190112610f9f5760043563ffffffff60e01b81168091036107f45760209250637965db0b60e01b81149081156110a8575b5015158152f35b6301ffc9a760e01b149050386110a1565b6024359063ffffffff821682036110cc57565b600080fd5b606435906001600160401b03821682036110cc57565b602435906001600160a01b03821682036110cc57565b600435906001600160a01b03821682036110cc57565b9181601f840112156110cc578235916001600160401b0383116110cc57602083818601950101116110cc57565b919082519283825260005b84811061116c575050826000602080949584010152601f8019910116010190565b60208183018101518483018201520161114b565b60c081019081106001600160401b0382111761119b57604052565b634e487b7160e01b600052604160045260246000fd5b6001600160401b03811161119b57604052565b604081019081106001600160401b0382111761119b57604052565b90601f801991011681019081106001600160401b0382111761119b57604052565b6001600160401b03811161119b57601f01601f191660200190565b92919261122782611200565b9161123560405193846111df565b8294818452818301116110cc578281602093846000960137010152565b6040519061125f826111c4565b601e82527f5275627973636f72655f53696e676c655f4964656e7469666965725f496400006020830152565b60405190611298826111c4565b6005825264302e302e3160d81b6020830152565b909495979391928115611535576001600160401b03809116914283106108cf578615611523576001600160a01b03948516988915610325578a156108bd5786156108ab5760409687519160209a8b84018581528b8b8601528a855260608501948086108887111761119b57858c525190209d8e948d6000968752600690528b86205461151457508d9161134091369161121b565b8c81519101208a51908d8201927fa661ba5adeddc46f883f4f86d014fe04b4c6a599d6f714d3f750c4c88fe1fc9e8452878d84015260608301528c60808301523360a083015260c082015260c0815260e081018181108882111761150057958f9d9b8f9993968f977f1e25e2f1371ab2b801f4d9d7359bd854406ce605572b1b994ba7b32c5da121f79f9d9a948f908f99859f996114799161146a60059f9261146260069861147e97611470968d525190208b6113fb611252565b8a815191012061140961128b565b8b81519101208251918c8301937f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f855283015260608201528c60808201528c60a082015260a0815261145a81611180565b5190206119ae565b92369161121b565b906119cb565b90929192611a07565b611807565b83519961148a8b611180565b808b52818b01958652848b0197885260608b0198895260808b01998a5260a08b019d8e528352522095518655516001860155600285019151166001600160401b0319825416179055516003830155516004820155019151166bffffffffffffffffffffffff60a01b82541617905551908152a390565b634e487b7160e01b86526041600452602486fd5b6399ed5a0360e01b8152600490fd5b604051636fd794c760e01b8152600490fd5b60405163335ece0360e01b8152600490fd5b3d15611572573d9061155882611200565b9161156660405193846111df565b82523d6000602084013e565b606090565b1561157e57565b60405162461bcd60e51b81526020600482015260146024820152732330b4b632b2103a379039b2b7321022ba3432b960611b6044820152606490fd5b919082018092116115c757565b634e487b7160e01b600052601160045260246000fd5b908160209103126110cc57516001600160a01b03811681036110cc5790565b93979590969198949294611612600354876115ba565b341061088757899361168093600096875260209860078a526040988989205561163f6003546004546115ba565b600455898c60018060a01b03988960055416908c51809a81948293634918d76b60e01b8452600484016020909392919363ffffffff60408201951681520152565b03915afa9586156117fd5788966117de575b508851946001600160401b039260a087018481118882101761083757958795858f9b8f978f976116eb60019f98849f9e986116fa946117459f9c8e6117329d6106fe9f83528d528c019b338d520198168852369161121b565b9560608c01968752369161121b565b98896080820152519451169151169151928d519b8c978801528d8701526060860152608085015260c060a085015260e0840190611140565b601f1993848483030160c0850152611140565b1690813b156107f45761177d83928392865195868094819363e289adcd60e01b83528d60048401528a60248401526044830190611140565b03925af19081156117d35750907f99846cbfae302af9a36c958b82461e643139f9aff8e6d0e5ee931d70655537379392916117c4575b505193845263ffffffff33951693a4565b6117cd906111b1565b386117b3565b8351903d90823e3d90fd5b6117f69196508a3d8c116108755761086681836111df565b9438611692565b89513d8a823e3d90fd5b6001600160a01b031660008181527fee57cd81e84075558e8fcc182a1f4393f91fc97f963a136e66b7f949a62f319f60205260409020547f97667070c54ef182b0f5858b034beac1b6f3089aa2d3188bb1e8929f4fa9b9299060ff161561186c575050565b604492506040519163e2517d3f60e01b835260048301526024820152fd5b80600052600060205260406000209160018060a01b0316918260005260205260ff604060002054161561186c575050565b9060009180835282602052604083209160018060a01b03169182845260205260ff6040842054161560001461193457808352826020526040832082845260205260408320600160ff198254161790557f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d339380a4600190565b505090565b9060009180835282602052604083209160018060a01b03169182845260205260ff6040842054166000146119345780835282602052604083208284526020526040832060ff1981541690557ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b339380a4600190565b6042916040519161190160f01b8352600283015260228201522090565b81519190604183036119fc576119f592506020820151906060604084015193015160001a90611dab565b9192909190565b505060009160029190565b6004811015611a765780611a19575050565b60018103611a335760405163f645eedf60e01b8152600490fd5b60028103611a545760405163fce698f760e01b815260048101839052602490fd5b600314611a5e5750565b602490604051906335e2f38360e21b82526004820152fd5b634e487b7160e01b600052602160045260246000fd5b307f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03161480611b7d575b15611ae7577f000000000000000000000000000000000000000000000000000000000000000090565b60405160208101907f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f82527f000000000000000000000000000000000000000000000000000000000000000060408201527f000000000000000000000000000000000000000000000000000000000000000060608201524660808201523060a082015260a08152611b7781611180565b51902090565b507f00000000000000000000000000000000000000000000000000000000000000004614611abe565b60ff8114611be45760ff811690601f8211611bd25760405191611bc8836111c4565b8252602082015290565b604051632cd44ac360e21b8152600490fd5b506040516000600190600154918260011c9060018416938415611cc9575b6020948584108114611cb55783875286949392918115611c955750600114611c36575b5050611c33925003826111df565b90565b9093915060016000527fb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cf6936000915b818310611c7d575050611c3393508201013880611c25565b85548784018501529485019486945091830191611c65565b915050611c3394925060ff191682840152151560051b8201013880611c25565b634e487b7160e01b85526022600452602485fd5b91607f1691611c02565b60ff8114611cf55760ff811690601f8211611bd25760405191611bc8836111c4565b5060405160006002549060018260011c9060018416938415611da1575b6020948584108114611cb55783875286949392918115611c955750600114611d42575050611c33925003826111df565b9093915060026000527f405787fa12a823e0f2b7631cc41b3ba8828b3321ca811111fa75cd3aa3bb5ace936000915b818310611d89575050611c3393508201013880611c25565b85548784018501529485019486945091830191611d71565b91607f1691611d12565b91907f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a08411611e2f57926020929160ff608095604051948552168484015260408301526060820152600092839182805260015afa15611e235780516001600160a01b03811615611e1a57918190565b50809160019190565b604051903d90823e3d90fd5b5050506000916003919056fea26469706673582212203eff82166188f007f2b81324d5b29b2a4bb7824f79517995644c92a1a2943bcb64736f6c63430008180033",
  "devdoc": {
    "errors": {
      "AccessControlBadConfirmation()": [
        {
          "details": "The caller of a function is not the expected one. NOTE: Don't confuse with {AccessControlUnauthorizedAccount}."
        }
      ],
      "AccessControlUnauthorizedAccount(address,bytes32)": [
        {
          "details": "The `account` is missing a role."
        }
      ],
      "ECDSAInvalidSignature()": [
        {
          "details": "The signature derives the `address(0)`."
        }
      ],
      "ECDSAInvalidSignatureLength(uint256)": [
        {
          "details": "The signature has an invalid length."
        }
      ],
      "ECDSAInvalidSignatureS(bytes32)": [
        {
          "details": "The signature has an S value that is in the upper half order."
        }
      ]
    },
    "events": {
      "EIP712DomainChanged()": {
        "details": "MAY be emitted to signal that the domain could have changed."
      },
      "RoleAdminChanged(bytes32,bytes32,bytes32)": {
        "details": "Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole` `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite {RoleAdminChanged} not being emitted signaling this."
      },
      "RoleGranted(bytes32,address,address)": {
        "details": "Emitted when `account` is granted `role`. `sender` is the account that originated the contract call, an admin role bearer except when using {AccessControl-_setupRole}."
      },
      "RoleRevoked(bytes32,address,address)": {
        "details": "Emitted when `account` is revoked `role`. `sender` is the account that originated the contract call:   - if using `revokeRole`, it is the admin role bearer   - if using `renounceRole`, it is the role bearer (i.e. `account`)"
      }
    },
    "kind": "dev",
    "methods": {
      "eip712Domain()": {
        "details": "See {IERC-5267}."
      },
      "getRoleAdmin(bytes32)": {
        "details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."
      },
      "grantRole(bytes32,address)": {
        "details": "Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event."
      },
      "hasRole(bytes32,address)": {
        "details": "Returns `true` if `account` has been granted `role`."
      },
      "renounceRole(bytes32,address)": {
        "details": "Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `callerConfirmation`. May emit a {RoleRevoked} event."
      },
      "revokeRole(bytes32,address)": {
        "details": "Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event."
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 4918,
        "contract": "contracts/SingleIdentifierID.sol:SingleIdentifierID",
        "label": "_roles",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_bytes32,t_struct(RoleData)4913_storage)"
      },
      {
        "astId": 7097,
        "contract": "contracts/SingleIdentifierID.sol:SingleIdentifierID",
        "label": "_nameFallback",
        "offset": 0,
        "slot": "1",
        "type": "t_string_storage"
      },
      {
        "astId": 7099,
        "contract": "contracts/SingleIdentifierID.sol:SingleIdentifierID",
        "label": "_versionFallback",
        "offset": 0,
        "slot": "2",
        "type": "t_string_storage"
      },
      {
        "astId": 10354,
        "contract": "contracts/SingleIdentifierID.sol:SingleIdentifierID",
        "label": "protocolFee",
        "offset": 0,
        "slot": "3",
        "type": "t_uint256"
      },
      {
        "astId": 10356,
        "contract": "contracts/SingleIdentifierID.sol:SingleIdentifierID",
        "label": "protocolBalance",
        "offset": 0,
        "slot": "4",
        "type": "t_uint256"
      },
      {
        "astId": 10359,
        "contract": "contracts/SingleIdentifierID.sol:SingleIdentifierID",
        "label": "router",
        "offset": 0,
        "slot": "5",
        "type": "t_contract(SingleRouter)12434"
      },
      {
        "astId": 10364,
        "contract": "contracts/SingleIdentifierID.sol:SingleIdentifierID",
        "label": "emitters",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_bytes32,t_struct(Emitter)13961_storage)"
      },
      {
        "astId": 10368,
        "contract": "contracts/SingleIdentifierID.sol:SingleIdentifierID",
        "label": "emittersBalances",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_bytes32,t_uint256)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(SingleRouter)12434": {
        "encoding": "inplace",
        "label": "contract SingleRouter",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_bytes32,t_struct(Emitter)13961_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct Emitter)",
        "numberOfBytes": "32",
        "value": "t_struct(Emitter)13961_storage"
      },
      "t_mapping(t_bytes32,t_struct(RoleData)4913_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct AccessControl.RoleData)",
        "numberOfBytes": "32",
        "value": "t_struct(RoleData)4913_storage"
      },
      "t_mapping(t_bytes32,t_uint256)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(Emitter)13961_storage": {
        "encoding": "inplace",
        "label": "struct Emitter",
        "members": [
          {
            "astId": 13950,
            "contract": "contracts/SingleIdentifierID.sol:SingleIdentifierID",
            "label": "emitterId",
            "offset": 0,
            "slot": "0",
            "type": "t_bytes32"
          },
          {
            "astId": 13952,
            "contract": "contracts/SingleIdentifierID.sol:SingleIdentifierID",
            "label": "schemaId",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          },
          {
            "astId": 13954,
            "contract": "contracts/SingleIdentifierID.sol:SingleIdentifierID",
            "label": "expirationDate",
            "offset": 0,
            "slot": "2",
            "type": "t_uint64"
          },
          {
            "astId": 13956,
            "contract": "contracts/SingleIdentifierID.sol:SingleIdentifierID",
            "label": "fee",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 13958,
            "contract": "contracts/SingleIdentifierID.sol:SingleIdentifierID",
            "label": "registryChainId",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 13960,
            "contract": "contracts/SingleIdentifierID.sol:SingleIdentifierID",
            "label": "owner",
            "offset": 0,
            "slot": "5",
            "type": "t_address"
          }
        ],
        "numberOfBytes": "192"
      },
      "t_struct(RoleData)4913_storage": {
        "encoding": "inplace",
        "label": "struct AccessControl.RoleData",
        "members": [
          {
            "astId": 4910,
            "contract": "contracts/SingleIdentifierID.sol:SingleIdentifierID",
            "label": "hasRole",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_address,t_bool)"
          },
          {
            "astId": 4912,
            "contract": "contracts/SingleIdentifierID.sol:SingleIdentifierID",
            "label": "adminRole",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint64": {
        "encoding": "inplace",
        "label": "uint64",
        "numberOfBytes": "8"
      }
    }
  }
}