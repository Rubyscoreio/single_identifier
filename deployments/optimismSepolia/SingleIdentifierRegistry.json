{
  "address": "0x979Be3738f4D0e5f230065F6E4e25e0A3dB1D1AA",
  "abi": [
    {
      "inputs": [],
      "name": "AddressIsZero",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ECDSAInvalidSignature",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "length",
          "type": "uint256"
        }
      ],
      "name": "ECDSAInvalidSignatureLength",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "s",
          "type": "bytes32"
        }
      ],
      "name": "ECDSAInvalidSignatureS",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "EmitterInvalid",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "MethodNotFound",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "OnlyEmitter",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "SIDAlreadyExists",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "SIDNotExists",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "SchemaAlreadyExists",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "SchemaNameMissing",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "SchemaNotExist",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "SchemaStringMissing",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "SenderIsNotPeer",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "SignatureInvalid",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "UnknownSelector",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "previousAdmin",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "newAdmin",
          "type": "address"
        }
      ],
      "name": "AdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "beacon",
          "type": "address"
        }
      ],
      "name": "BeaconUpgraded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [],
      "name": "EIP712DomainChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "schemaId",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "emitter",
          "type": "address"
        }
      ],
      "name": "EmitterRevoked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "schemaId",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newEmitterAddress",
          "type": "address"
        }
      ],
      "name": "EmitterUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "previousAdminRole",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "newAdminRole",
          "type": "bytes32"
        }
      ],
      "name": "RoleAdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleRevoked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "SIDId",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "SIDRegistered",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "SIDId",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "SIDRevoked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "SIDId",
          "type": "bytes32"
        }
      ],
      "name": "SIDUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "schemaId",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "emitter",
          "type": "address"
        }
      ],
      "name": "SchemaRegistered",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "router",
          "type": "address"
        }
      ],
      "name": "SetRouter",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "implementation",
          "type": "address"
        }
      ],
      "name": "Upgraded",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "DEFAULT_ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "NAME",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "OPERATOR_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "VERSION",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "eip712Domain",
      "outputs": [
        {
          "internalType": "bytes1",
          "name": "fields",
          "type": "bytes1"
        },
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "version",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "chainId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "verifyingContract",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "salt",
          "type": "bytes32"
        },
        {
          "internalType": "uint256[]",
          "name": "extensions",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "emitterCounter",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleAdmin",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "grantRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_operator",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "proxiableUUID",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "bytes32",
              "name": "schemaId",
              "type": "bytes32"
            },
            {
              "internalType": "address",
              "name": "user",
              "type": "address"
            },
            {
              "internalType": "uint64",
              "name": "expirationDate",
              "type": "uint64"
            },
            {
              "internalType": "bytes",
              "name": "data",
              "type": "bytes"
            },
            {
              "internalType": "string",
              "name": "metadata",
              "type": "string"
            }
          ],
          "internalType": "struct MessageLib.SendMessage",
          "name": "_payload",
          "type": "tuple"
        }
      ],
      "name": "registrySID",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "renounceRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_sidId",
          "type": "bytes32"
        }
      ],
      "name": "revoke",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "revokeRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "router",
      "outputs": [
        {
          "internalType": "contract SingleRouter",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "emitter",
          "type": "address"
        }
      ],
      "name": "schemaIds",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "schemaId",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "string",
              "name": "name",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "description",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "schema",
              "type": "string"
            },
            {
              "internalType": "address",
              "name": "emitter",
              "type": "address"
            }
          ],
          "internalType": "struct SIDSchemaParams",
          "name": "_schema",
          "type": "tuple"
        },
        {
          "internalType": "bytes",
          "name": "_signature",
          "type": "bytes"
        }
      ],
      "name": "schemaRegistry",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "schemaId",
          "type": "bytes32"
        }
      ],
      "name": "schemas",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "schemaId",
          "type": "bytes32"
        },
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "description",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "schema",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "emitter",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_router",
          "type": "address"
        }
      ],
      "name": "setRouter",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "sidCounter",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "id",
          "type": "bytes32"
        }
      ],
      "name": "singleIdentifierData",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "SIDId",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "schemaId",
          "type": "bytes32"
        },
        {
          "internalType": "uint64",
          "name": "expirationDate",
          "type": "uint64"
        },
        {
          "internalType": "uint64",
          "name": "revocationDate",
          "type": "uint64"
        },
        {
          "internalType": "bool",
          "name": "revoked",
          "type": "bool"
        },
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        },
        {
          "internalType": "string",
          "name": "metadata",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "bytes32",
              "name": "id",
              "type": "bytes32"
            },
            {
              "internalType": "uint64",
              "name": "expirationDate",
              "type": "uint64"
            },
            {
              "internalType": "bytes",
              "name": "data",
              "type": "bytes"
            },
            {
              "internalType": "string",
              "name": "metadata",
              "type": "string"
            }
          ],
          "internalType": "struct MessageLib.UpdateMessage",
          "name": "_payload",
          "type": "tuple"
        }
      ],
      "name": "updateSID",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_schemaId",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "_emitter",
          "type": "address"
        }
      ],
      "name": "updateSchemaEmitter",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newImplementation",
          "type": "address"
        }
      ],
      "name": "upgradeTo",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newImplementation",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "upgradeToAndCall",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    }
  ],
  "numDeployments": 1,
  "solcInputHash": "ed2252f80b10e936ef23184019e93e2d",
  "metadata": "{\"compiler\":{\"version\":\"0.8.24+commit.e11b9ed9\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"AddressIsZero\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ECDSAInvalidSignature\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"length\",\"type\":\"uint256\"}],\"name\":\"ECDSAInvalidSignatureLength\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"ECDSAInvalidSignatureS\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"EmitterInvalid\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"MethodNotFound\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OnlyEmitter\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SIDAlreadyExists\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SIDNotExists\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SchemaAlreadyExists\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SchemaNameMissing\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SchemaNotExist\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SchemaStringMissing\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"SenderIsNotPeer\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SignatureInvalid\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"UnknownSelector\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"previousAdmin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"AdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"beacon\",\"type\":\"address\"}],\"name\":\"BeaconUpgraded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"EIP712DomainChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"schemaId\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"emitter\",\"type\":\"address\"}],\"name\":\"EmitterRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"schemaId\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newEmitterAddress\",\"type\":\"address\"}],\"name\":\"EmitterUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"SIDId\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"SIDRegistered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"SIDId\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"SIDRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"SIDId\",\"type\":\"bytes32\"}],\"name\":\"SIDUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"schemaId\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"emitter\",\"type\":\"address\"}],\"name\":\"SchemaRegistered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"router\",\"type\":\"address\"}],\"name\":\"SetRouter\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"Upgraded\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"NAME\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"OPERATOR_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"VERSION\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"eip712Domain\",\"outputs\":[{\"internalType\":\"bytes1\",\"name\":\"fields\",\"type\":\"bytes1\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"version\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"verifyingContract\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"salt\",\"type\":\"bytes32\"},{\"internalType\":\"uint256[]\",\"name\":\"extensions\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"emitterCounter\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"proxiableUUID\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"schemaId\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"expirationDate\",\"type\":\"uint64\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"internalType\":\"string\",\"name\":\"metadata\",\"type\":\"string\"}],\"internalType\":\"struct MessageLib.SendMessage\",\"name\":\"_payload\",\"type\":\"tuple\"}],\"name\":\"registrySID\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_sidId\",\"type\":\"bytes32\"}],\"name\":\"revoke\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"router\",\"outputs\":[{\"internalType\":\"contract SingleRouter\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"emitter\",\"type\":\"address\"}],\"name\":\"schemaIds\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"schemaId\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"schema\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"emitter\",\"type\":\"address\"}],\"internalType\":\"struct SIDSchemaParams\",\"name\":\"_schema\",\"type\":\"tuple\"},{\"internalType\":\"bytes\",\"name\":\"_signature\",\"type\":\"bytes\"}],\"name\":\"schemaRegistry\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"schemaId\",\"type\":\"bytes32\"}],\"name\":\"schemas\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"schemaId\",\"type\":\"bytes32\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"schema\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"emitter\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_router\",\"type\":\"address\"}],\"name\":\"setRouter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sidCounter\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"}],\"name\":\"singleIdentifierData\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"SIDId\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"schemaId\",\"type\":\"bytes32\"},{\"internalType\":\"uint64\",\"name\":\"expirationDate\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"revocationDate\",\"type\":\"uint64\"},{\"internalType\":\"bool\",\"name\":\"revoked\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"internalType\":\"string\",\"name\":\"metadata\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"},{\"internalType\":\"uint64\",\"name\":\"expirationDate\",\"type\":\"uint64\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"internalType\":\"string\",\"name\":\"metadata\",\"type\":\"string\"}],\"internalType\":\"struct MessageLib.UpdateMessage\",\"name\":\"_payload\",\"type\":\"tuple\"}],\"name\":\"updateSID\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_schemaId\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"_emitter\",\"type\":\"address\"}],\"name\":\"updateSchemaEmitter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"}],\"name\":\"upgradeTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"upgradeToAndCall\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"}],\"devdoc\":{\"errors\":{\"ECDSAInvalidSignature()\":[{\"details\":\"The signature derives the `address(0)`.\"}],\"ECDSAInvalidSignatureLength(uint256)\":[{\"details\":\"The signature has an invalid length.\"}],\"ECDSAInvalidSignatureS(bytes32)\":[{\"details\":\"The signature has an S value that is in the upper half order.\"}]},\"events\":{\"AdminChanged(address,address)\":{\"details\":\"Emitted when the admin account has changed.\"},\"BeaconUpgraded(address)\":{\"details\":\"Emitted when the beacon is changed.\"},\"EIP712DomainChanged()\":{\"details\":\"MAY be emitted to signal that the domain could have changed.\"},\"Initialized(uint8)\":{\"details\":\"Triggered when the contract has been initialized or reinitialized.\"},\"RoleAdminChanged(bytes32,bytes32,bytes32)\":{\"details\":\"Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole` `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite {RoleAdminChanged} not being emitted signaling this. _Available since v3.1._\"},\"RoleGranted(bytes32,address,address)\":{\"details\":\"Emitted when `account` is granted `role`. `sender` is the account that originated the contract call, an admin role bearer except when using {AccessControl-_setupRole}.\"},\"RoleRevoked(bytes32,address,address)\":{\"details\":\"Emitted when `account` is revoked `role`. `sender` is the account that originated the contract call:   - if using `revokeRole`, it is the admin role bearer   - if using `renounceRole`, it is the role bearer (i.e. `account`)\"},\"Upgraded(address)\":{\"details\":\"Emitted when the implementation is upgraded.\"}},\"kind\":\"dev\",\"methods\":{\"eip712Domain()\":{\"details\":\"See {EIP-5267}. _Available since v4.9._\"},\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"proxiableUUID()\":{\"details\":\"Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the implementation. It is used to validate the implementation's compatibility when performing an upgrade. IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier.\"},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`. May emit a {RoleRevoked} event.\"},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"upgradeTo(address)\":{\"custom:oz-upgrades-unsafe-allow-reachable\":\"delegatecall\",\"details\":\"Upgrade the implementation of the proxy to `newImplementation`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event.\"},\"upgradeToAndCall(address,bytes)\":{\"custom:oz-upgrades-unsafe-allow-reachable\":\"delegatecall\",\"details\":\"Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call encoded in `data`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/SingleIdentifierRegistry.sol\":\"SingleIdentifierRegistry\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControlUpgradeable.sol\\\";\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../utils/StringsUpgradeable.sol\\\";\\nimport \\\"../utils/introspection/ERC165Upgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```solidity\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```solidity\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it. We recommend using {AccessControlDefaultAdminRules}\\n * to enforce additional security measures for this role.\\n */\\nabstract contract AccessControlUpgradeable is Initializable, ContextUpgradeable, IAccessControlUpgradeable, ERC165Upgradeable {\\n    function __AccessControl_init() internal onlyInitializing {\\n    }\\n\\n    function __AccessControl_init_unchained() internal onlyInitializing {\\n    }\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControlUpgradeable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\\n     *\\n     * Format of the revert message is described in {_checkRole}.\\n     *\\n     * _Available since v4.6._\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        StringsUpgradeable.toHexString(account),\\n                        \\\" is missing role \\\",\\n                        StringsUpgradeable.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * May emit a {RoleGranted} event.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     *\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0xfeefb24d068524440e1ba885efdf105d91f83504af3c2d745ffacc4595396831\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControlUpgradeable {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0xb8f5302f12138c5561362e88a78d061573e6298b7a1a5afe84a1e2c8d4d5aeaa\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/interfaces/IERC1967Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (interfaces/IERC1967.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev ERC-1967: Proxy Storage Slots. This interface contains the events defined in the ERC.\\n *\\n * _Available since v4.8.3._\\n */\\ninterface IERC1967Upgradeable {\\n    /**\\n     * @dev Emitted when the implementation is upgraded.\\n     */\\n    event Upgraded(address indexed implementation);\\n\\n    /**\\n     * @dev Emitted when the admin account has changed.\\n     */\\n    event AdminChanged(address previousAdmin, address newAdmin);\\n\\n    /**\\n     * @dev Emitted when the beacon is changed.\\n     */\\n    event BeaconUpgraded(address indexed beacon);\\n}\\n\",\"keccak256\":\"0x47d6e06872b12e72c79d1b5eb55842f860b5fb1207b2317c2358d2766b950a7b\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/interfaces/IERC5267Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (interfaces/IERC5267.sol)\\n\\npragma solidity ^0.8.0;\\n\\ninterface IERC5267Upgradeable {\\n    /**\\n     * @dev MAY be emitted to signal that the domain could have changed.\\n     */\\n    event EIP712DomainChanged();\\n\\n    /**\\n     * @dev returns the fields and values that describe the domain separator used by this contract for EIP-712\\n     * signature.\\n     */\\n    function eip712Domain()\\n        external\\n        view\\n        returns (\\n            bytes1 fields,\\n            string memory name,\\n            string memory version,\\n            uint256 chainId,\\n            address verifyingContract,\\n            bytes32 salt,\\n            uint256[] memory extensions\\n        );\\n}\\n\",\"keccak256\":\"0xe562dab443278837fa50faddb76743399e942181881db8dccaea3bd1712994db\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (interfaces/draft-IERC1822.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev ERC1822: Universal Upgradeable Proxy Standard (UUPS) documents a method for upgradeability through a simplified\\n * proxy whose upgrades are fully controlled by the current implementation.\\n */\\ninterface IERC1822ProxiableUpgradeable {\\n    /**\\n     * @dev Returns the storage slot that the proxiable contract assumes is being used to store the implementation\\n     * address.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy.\\n     */\\n    function proxiableUUID() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0x77c89f893e403efc6929ba842b7ccf6534d4ffe03afe31670b4a528c0ad78c0f\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/ERC1967/ERC1967Upgrade.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../beacon/IBeaconUpgradeable.sol\\\";\\nimport \\\"../../interfaces/IERC1967Upgradeable.sol\\\";\\nimport \\\"../../interfaces/draft-IERC1822Upgradeable.sol\\\";\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\nimport \\\"../../utils/StorageSlotUpgradeable.sol\\\";\\nimport \\\"../utils/Initializable.sol\\\";\\n\\n/**\\n * @dev This abstract contract provides getters and event emitting update functions for\\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\\n *\\n * _Available since v4.1._\\n */\\nabstract contract ERC1967UpgradeUpgradeable is Initializable, IERC1967Upgradeable {\\n    function __ERC1967Upgrade_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC1967Upgrade_init_unchained() internal onlyInitializing {\\n    }\\n    // This is the keccak-256 hash of \\\"eip1967.proxy.rollback\\\" subtracted by 1\\n    bytes32 private constant _ROLLBACK_SLOT = 0x4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143;\\n\\n    /**\\n     * @dev Storage slot with the address of the current implementation.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.implementation\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n\\n    /**\\n     * @dev Returns the current implementation address.\\n     */\\n    function _getImplementation() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 implementation slot.\\n     */\\n    function _setImplementation(address newImplementation) private {\\n        require(AddressUpgradeable.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n        StorageSlotUpgradeable.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeTo(address newImplementation) internal {\\n        _setImplementation(newImplementation);\\n        emit Upgraded(newImplementation);\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCall(address newImplementation, bytes memory data, bool forceCall) internal {\\n        _upgradeTo(newImplementation);\\n        if (data.length > 0 || forceCall) {\\n            AddressUpgradeable.functionDelegateCall(newImplementation, data);\\n        }\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with security checks for UUPS proxies, and additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCallUUPS(address newImplementation, bytes memory data, bool forceCall) internal {\\n        // Upgrades from old implementations will perform a rollback test. This test requires the new\\n        // implementation to upgrade back to the old, non-ERC1822 compliant, implementation. Removing\\n        // this special case will break upgrade paths from old UUPS implementation to new ones.\\n        if (StorageSlotUpgradeable.getBooleanSlot(_ROLLBACK_SLOT).value) {\\n            _setImplementation(newImplementation);\\n        } else {\\n            try IERC1822ProxiableUpgradeable(newImplementation).proxiableUUID() returns (bytes32 slot) {\\n                require(slot == _IMPLEMENTATION_SLOT, \\\"ERC1967Upgrade: unsupported proxiableUUID\\\");\\n            } catch {\\n                revert(\\\"ERC1967Upgrade: new implementation is not UUPS\\\");\\n            }\\n            _upgradeToAndCall(newImplementation, data, forceCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Storage slot with the admin of the contract.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.admin\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\\n\\n    /**\\n     * @dev Returns the current admin.\\n     */\\n    function _getAdmin() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_ADMIN_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 admin slot.\\n     */\\n    function _setAdmin(address newAdmin) private {\\n        require(newAdmin != address(0), \\\"ERC1967: new admin is the zero address\\\");\\n        StorageSlotUpgradeable.getAddressSlot(_ADMIN_SLOT).value = newAdmin;\\n    }\\n\\n    /**\\n     * @dev Changes the admin of the proxy.\\n     *\\n     * Emits an {AdminChanged} event.\\n     */\\n    function _changeAdmin(address newAdmin) internal {\\n        emit AdminChanged(_getAdmin(), newAdmin);\\n        _setAdmin(newAdmin);\\n    }\\n\\n    /**\\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\\n     * This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor.\\n     */\\n    bytes32 internal constant _BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\\n\\n    /**\\n     * @dev Returns the current beacon.\\n     */\\n    function _getBeacon() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_BEACON_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new beacon in the EIP1967 beacon slot.\\n     */\\n    function _setBeacon(address newBeacon) private {\\n        require(AddressUpgradeable.isContract(newBeacon), \\\"ERC1967: new beacon is not a contract\\\");\\n        require(\\n            AddressUpgradeable.isContract(IBeaconUpgradeable(newBeacon).implementation()),\\n            \\\"ERC1967: beacon implementation is not a contract\\\"\\n        );\\n        StorageSlotUpgradeable.getAddressSlot(_BEACON_SLOT).value = newBeacon;\\n    }\\n\\n    /**\\n     * @dev Perform beacon upgrade with additional setup call. Note: This upgrades the address of the beacon, it does\\n     * not upgrade the implementation contained in the beacon (see {UpgradeableBeacon-_setImplementation} for that).\\n     *\\n     * Emits a {BeaconUpgraded} event.\\n     */\\n    function _upgradeBeaconToAndCall(address newBeacon, bytes memory data, bool forceCall) internal {\\n        _setBeacon(newBeacon);\\n        emit BeaconUpgraded(newBeacon);\\n        if (data.length > 0 || forceCall) {\\n            AddressUpgradeable.functionDelegateCall(IBeaconUpgradeable(newBeacon).implementation(), data);\\n        }\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x584ebdf9c1118a7c773f98788e3f3ede01982bdf8932aa06f5acc7d54876e161\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/beacon/IBeaconUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/beacon/IBeacon.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\\n */\\ninterface IBeaconUpgradeable {\\n    /**\\n     * @dev Must return an address that can be used as a delegate call target.\\n     *\\n     * {BeaconProxy} will check that this address is a contract.\\n     */\\n    function implementation() external view returns (address);\\n}\\n\",\"keccak256\":\"0x24b86ac8c005b8c654fbf6ac34a5a4f61580d7273541e83e013e89d66fbf0908\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```solidity\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n *\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized != type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\",\"keccak256\":\"0x89be10e757d242e9b18d5a32c9fbe2019f6d63052bbe46397a430a1d60d7f794\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/utils/UUPSUpgradeable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../interfaces/draft-IERC1822Upgradeable.sol\\\";\\nimport \\\"../ERC1967/ERC1967UpgradeUpgradeable.sol\\\";\\nimport \\\"./Initializable.sol\\\";\\n\\n/**\\n * @dev An upgradeability mechanism designed for UUPS proxies. The functions included here can perform an upgrade of an\\n * {ERC1967Proxy}, when this contract is set as the implementation behind such a proxy.\\n *\\n * A security mechanism ensures that an upgrade does not turn off upgradeability accidentally, although this risk is\\n * reinstated if the upgrade retains upgradeability but removes the security mechanism, e.g. by replacing\\n * `UUPSUpgradeable` with a custom implementation of upgrades.\\n *\\n * The {_authorizeUpgrade} function must be overridden to include access restriction to the upgrade mechanism.\\n *\\n * _Available since v4.1._\\n */\\nabstract contract UUPSUpgradeable is Initializable, IERC1822ProxiableUpgradeable, ERC1967UpgradeUpgradeable {\\n    function __UUPSUpgradeable_init() internal onlyInitializing {\\n    }\\n\\n    function __UUPSUpgradeable_init_unchained() internal onlyInitializing {\\n    }\\n    /// @custom:oz-upgrades-unsafe-allow state-variable-immutable state-variable-assignment\\n    address private immutable __self = address(this);\\n\\n    /**\\n     * @dev Check that the execution is being performed through a delegatecall call and that the execution context is\\n     * a proxy contract with an implementation (as defined in ERC1967) pointing to self. This should only be the case\\n     * for UUPS and transparent proxies that are using the current contract as their implementation. Execution of a\\n     * function through ERC1167 minimal proxies (clones) would not normally pass this test, but is not guaranteed to\\n     * fail.\\n     */\\n    modifier onlyProxy() {\\n        require(address(this) != __self, \\\"Function must be called through delegatecall\\\");\\n        require(_getImplementation() == __self, \\\"Function must be called through active proxy\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Check that the execution is not being performed through a delegate call. This allows a function to be\\n     * callable on the implementing contract but not through proxies.\\n     */\\n    modifier notDelegated() {\\n        require(address(this) == __self, \\\"UUPSUpgradeable: must not be called through delegatecall\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the\\n     * implementation. It is used to validate the implementation's compatibility when performing an upgrade.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier.\\n     */\\n    function proxiableUUID() external view virtual override notDelegated returns (bytes32) {\\n        return _IMPLEMENTATION_SLOT;\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy to `newImplementation`.\\n     *\\n     * Calls {_authorizeUpgrade}.\\n     *\\n     * Emits an {Upgraded} event.\\n     *\\n     * @custom:oz-upgrades-unsafe-allow-reachable delegatecall\\n     */\\n    function upgradeTo(address newImplementation) public virtual onlyProxy {\\n        _authorizeUpgrade(newImplementation);\\n        _upgradeToAndCallUUPS(newImplementation, new bytes(0), false);\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call\\n     * encoded in `data`.\\n     *\\n     * Calls {_authorizeUpgrade}.\\n     *\\n     * Emits an {Upgraded} event.\\n     *\\n     * @custom:oz-upgrades-unsafe-allow-reachable delegatecall\\n     */\\n    function upgradeToAndCall(address newImplementation, bytes memory data) public payable virtual onlyProxy {\\n        _authorizeUpgrade(newImplementation);\\n        _upgradeToAndCallUUPS(newImplementation, data, true);\\n    }\\n\\n    /**\\n     * @dev Function that should revert when `msg.sender` is not authorized to upgrade the contract. Called by\\n     * {upgradeTo} and {upgradeToAndCall}.\\n     *\\n     * Normally, this function will use an xref:access.adoc[access control] modifier such as {Ownable-onlyOwner}.\\n     *\\n     * ```solidity\\n     * function _authorizeUpgrade(address) internal override onlyOwner {}\\n     * ```\\n     */\\n    function _authorizeUpgrade(address newImplementation) internal virtual;\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0xb607cb94c27e89750f5ae2ccebcb94e654e926f6125f4fd4c6262c89875118ad\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9c80f545915582e63fe206c6ce27cbe85a86fc10b9cd2a0e8c9488fb7c2ee422\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/StorageSlotUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/StorageSlot.sol)\\n// This file was procedurally generated from scripts/generate/templates/StorageSlot.js.\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```solidity\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, `uint256`._\\n * _Available since v4.9 for `string`, `bytes`._\\n */\\nlibrary StorageSlotUpgradeable {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    struct StringSlot {\\n        string value;\\n    }\\n\\n    struct BytesSlot {\\n        bytes value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` with member `value` located at `slot`.\\n     */\\n    function getStringSlot(bytes32 slot) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` representation of the string storage pointer `store`.\\n     */\\n    function getStringSlot(string storage store) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` with member `value` located at `slot`.\\n     */\\n    function getBytesSlot(bytes32 slot) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` representation of the bytes storage pointer `store`.\\n     */\\n    function getBytesSlot(bytes storage store) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x07ac95acad040f1fb1f6120dd0aa5f702db69446e95f82613721879d30de0908\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/MathUpgradeable.sol\\\";\\nimport \\\"./math/SignedMathUpgradeable.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary StringsUpgradeable {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = MathUpgradeable.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(int256 value) internal pure returns (string memory) {\\n        return string(abi.encodePacked(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMathUpgradeable.abs(value))));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, MathUpgradeable.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\",\"keccak256\":\"0xb96dc79b65b7c37937919dcdb356a969ce0aa2e8338322bf4dc027a3c9c9a7eb\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/cryptography/ECDSAUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/cryptography/ECDSA.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../StringsUpgradeable.sol\\\";\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSAUpgradeable {\\n    enum RecoverError {\\n        NoError,\\n        InvalidSignature,\\n        InvalidSignatureLength,\\n        InvalidSignatureS,\\n        InvalidSignatureV // Deprecated in v4.8\\n    }\\n\\n    function _throwError(RecoverError error) private pure {\\n        if (error == RecoverError.NoError) {\\n            return; // no error: do nothing\\n        } else if (error == RecoverError.InvalidSignature) {\\n            revert(\\\"ECDSA: invalid signature\\\");\\n        } else if (error == RecoverError.InvalidSignatureLength) {\\n            revert(\\\"ECDSA: invalid signature length\\\");\\n        } else if (error == RecoverError.InvalidSignatureS) {\\n            revert(\\\"ECDSA: invalid signature 's' value\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature` or error string. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     *\\n     * Documentation for signature generation:\\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\\n        if (signature.length == 65) {\\n            bytes32 r;\\n            bytes32 s;\\n            uint8 v;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                s := mload(add(signature, 0x40))\\n                v := byte(0, mload(add(signature, 0x60)))\\n            }\\n            return tryRecover(hash, v, r, s);\\n        } else {\\n            return (address(0), RecoverError.InvalidSignatureLength);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\\n     *\\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes32 r, bytes32 vs) internal pure returns (address, RecoverError) {\\n        bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\\n        uint8 v = uint8((uint256(vs) >> 255) + 27);\\n        return tryRecover(hash, v, r, s);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\\n     *\\n     * _Available since v4.2._\\n     */\\n    function recover(bytes32 hash, bytes32 r, bytes32 vs) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) internal pure returns (address, RecoverError) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (301): 0 < s < secp256k1n \\u00f7 2 + 1, and for v in (302): v \\u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\n            return (address(0), RecoverError.InvalidSignatureS);\\n        }\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        if (signer == address(0)) {\\n            return (address(0), RecoverError.InvalidSignature);\\n        }\\n\\n        return (signer, RecoverError.NoError);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32 message) {\\n        // 32 is the length in bytes of hash,\\n        // enforced by the type signature above\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            mstore(0x00, \\\"\\\\x19Ethereum Signed Message:\\\\n32\\\")\\n            mstore(0x1c, hash)\\n            message := keccak256(0x00, 0x3c)\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n\\\", StringsUpgradeable.toString(s.length), s));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Typed Data, created from a\\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\\n     * to the one signed with the\\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\\n     * JSON-RPC method as part of EIP-712.\\n     *\\n     * See {recover}.\\n     */\\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32 data) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(ptr, \\\"\\\\x19\\\\x01\\\")\\n            mstore(add(ptr, 0x02), domainSeparator)\\n            mstore(add(ptr, 0x22), structHash)\\n            data := keccak256(ptr, 0x42)\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Data with intended validator, created from a\\n     * `validator` and `data` according to the version 0 of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toDataWithIntendedValidatorHash(address validator, bytes memory data) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x00\\\", validator, data));\\n    }\\n}\\n\",\"keccak256\":\"0xa014f65d84b02827055d99993ccdbfb4b56b2c9e91eb278d82a93330659d06e4\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/cryptography/EIP712.sol)\\n\\npragma solidity ^0.8.8;\\n\\nimport \\\"./ECDSAUpgradeable.sol\\\";\\nimport \\\"../../interfaces/IERC5267Upgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev https://eips.ethereum.org/EIPS/eip-712[EIP 712] is a standard for hashing and signing of typed structured data.\\n *\\n * The encoding specified in the EIP is very generic, and such a generic implementation in Solidity is not feasible,\\n * thus this contract does not implement the encoding itself. Protocols need to implement the type-specific encoding\\n * they need in their contracts using a combination of `abi.encode` and `keccak256`.\\n *\\n * This contract implements the EIP 712 domain separator ({_domainSeparatorV4}) that is used as part of the encoding\\n * scheme, and the final step of the encoding to obtain the message digest that is then signed via ECDSA\\n * ({_hashTypedDataV4}).\\n *\\n * The implementation of the domain separator was designed to be as efficient as possible while still properly updating\\n * the chain id to protect against replay attacks on an eventual fork of the chain.\\n *\\n * NOTE: This contract implements the version of the encoding known as \\\"v4\\\", as implemented by the JSON RPC method\\n * https://docs.metamask.io/guide/signing-data.html[`eth_signTypedDataV4` in MetaMask].\\n *\\n * NOTE: In the upgradeable version of this contract, the cached values will correspond to the address, and the domain\\n * separator of the implementation contract. This will cause the `_domainSeparatorV4` function to always rebuild the\\n * separator from the immutable values, which is cheaper than accessing a cached version in cold storage.\\n *\\n * _Available since v3.4._\\n *\\n * @custom:storage-size 52\\n */\\nabstract contract EIP712Upgradeable is Initializable, IERC5267Upgradeable {\\n    bytes32 private constant _TYPE_HASH =\\n        keccak256(\\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\");\\n\\n    /// @custom:oz-renamed-from _HASHED_NAME\\n    bytes32 private _hashedName;\\n    /// @custom:oz-renamed-from _HASHED_VERSION\\n    bytes32 private _hashedVersion;\\n\\n    string private _name;\\n    string private _version;\\n\\n    /**\\n     * @dev Initializes the domain separator and parameter caches.\\n     *\\n     * The meaning of `name` and `version` is specified in\\n     * https://eips.ethereum.org/EIPS/eip-712#definition-of-domainseparator[EIP 712]:\\n     *\\n     * - `name`: the user readable name of the signing domain, i.e. the name of the DApp or the protocol.\\n     * - `version`: the current major version of the signing domain.\\n     *\\n     * NOTE: These parameters cannot be changed except through a xref:learn::upgrading-smart-contracts.adoc[smart\\n     * contract upgrade].\\n     */\\n    function __EIP712_init(string memory name, string memory version) internal onlyInitializing {\\n        __EIP712_init_unchained(name, version);\\n    }\\n\\n    function __EIP712_init_unchained(string memory name, string memory version) internal onlyInitializing {\\n        _name = name;\\n        _version = version;\\n\\n        // Reset prior values in storage if upgrading\\n        _hashedName = 0;\\n        _hashedVersion = 0;\\n    }\\n\\n    /**\\n     * @dev Returns the domain separator for the current chain.\\n     */\\n    function _domainSeparatorV4() internal view returns (bytes32) {\\n        return _buildDomainSeparator();\\n    }\\n\\n    function _buildDomainSeparator() private view returns (bytes32) {\\n        return keccak256(abi.encode(_TYPE_HASH, _EIP712NameHash(), _EIP712VersionHash(), block.chainid, address(this)));\\n    }\\n\\n    /**\\n     * @dev Given an already https://eips.ethereum.org/EIPS/eip-712#definition-of-hashstruct[hashed struct], this\\n     * function returns the hash of the fully encoded EIP712 message for this domain.\\n     *\\n     * This hash can be used together with {ECDSA-recover} to obtain the signer of a message. For example:\\n     *\\n     * ```solidity\\n     * bytes32 digest = _hashTypedDataV4(keccak256(abi.encode(\\n     *     keccak256(\\\"Mail(address to,string contents)\\\"),\\n     *     mailTo,\\n     *     keccak256(bytes(mailContents))\\n     * )));\\n     * address signer = ECDSA.recover(digest, signature);\\n     * ```\\n     */\\n    function _hashTypedDataV4(bytes32 structHash) internal view virtual returns (bytes32) {\\n        return ECDSAUpgradeable.toTypedDataHash(_domainSeparatorV4(), structHash);\\n    }\\n\\n    /**\\n     * @dev See {EIP-5267}.\\n     *\\n     * _Available since v4.9._\\n     */\\n    function eip712Domain()\\n        public\\n        view\\n        virtual\\n        override\\n        returns (\\n            bytes1 fields,\\n            string memory name,\\n            string memory version,\\n            uint256 chainId,\\n            address verifyingContract,\\n            bytes32 salt,\\n            uint256[] memory extensions\\n        )\\n    {\\n        // If the hashed name and version in storage are non-zero, the contract hasn't been properly initialized\\n        // and the EIP712 domain is not reliable, as it will be missing name and version.\\n        require(_hashedName == 0 && _hashedVersion == 0, \\\"EIP712: Uninitialized\\\");\\n\\n        return (\\n            hex\\\"0f\\\", // 01111\\n            _EIP712Name(),\\n            _EIP712Version(),\\n            block.chainid,\\n            address(this),\\n            bytes32(0),\\n            new uint256[](0)\\n        );\\n    }\\n\\n    /**\\n     * @dev The name parameter for the EIP712 domain.\\n     *\\n     * NOTE: This function reads from storage by default, but can be redefined to return a constant value if gas costs\\n     * are a concern.\\n     */\\n    function _EIP712Name() internal virtual view returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev The version parameter for the EIP712 domain.\\n     *\\n     * NOTE: This function reads from storage by default, but can be redefined to return a constant value if gas costs\\n     * are a concern.\\n     */\\n    function _EIP712Version() internal virtual view returns (string memory) {\\n        return _version;\\n    }\\n\\n    /**\\n     * @dev The hash of the name parameter for the EIP712 domain.\\n     *\\n     * NOTE: In previous versions this function was virtual. In this version you should override `_EIP712Name` instead.\\n     */\\n    function _EIP712NameHash() internal view returns (bytes32) {\\n        string memory name = _EIP712Name();\\n        if (bytes(name).length > 0) {\\n            return keccak256(bytes(name));\\n        } else {\\n            // If the name is empty, the contract may have been upgraded without initializing the new storage.\\n            // We return the name hash in storage if non-zero, otherwise we assume the name is empty by design.\\n            bytes32 hashedName = _hashedName;\\n            if (hashedName != 0) {\\n                return hashedName;\\n            } else {\\n                return keccak256(\\\"\\\");\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev The hash of the version parameter for the EIP712 domain.\\n     *\\n     * NOTE: In previous versions this function was virtual. In this version you should override `_EIP712Version` instead.\\n     */\\n    function _EIP712VersionHash() internal view returns (bytes32) {\\n        string memory version = _EIP712Version();\\n        if (bytes(version).length > 0) {\\n            return keccak256(bytes(version));\\n        } else {\\n            // If the version is empty, the contract may have been upgraded without initializing the new storage.\\n            // We return the version hash in storage if non-zero, otherwise we assume the version is empty by design.\\n            bytes32 hashedVersion = _hashedVersion;\\n            if (hashedVersion != 0) {\\n                return hashedVersion;\\n            } else {\\n                return keccak256(\\\"\\\");\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[48] private __gap;\\n}\\n\",\"keccak256\":\"0xeb8d6be406a373771724922eb41b5d593bc8e2dc705daa22cd1145cfc8f5a3a0\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165Upgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165Upgradeable is Initializable, IERC165Upgradeable {\\n    function __ERC165_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC165_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165Upgradeable).interfaceId;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x9a3b990bd56d139df3e454a9edf1c64668530b5a77fc32eb063bc206f958274a\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165Upgradeable {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xc6cef87559d0aeffdf0a99803de655938a7779ec0a3cd5d4383483ad85565a09\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary MathUpgradeable {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1, \\\"Math: mulDiv overflow\\\");\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2bc0007987c229ae7624eb29be6a9b84f6a6a5872f76248b15208b131ea41c4e\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/math/SignedMathUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMathUpgradeable {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x88f6b7bba3ee33eeb741f9a0f5bc98b6e6e352d0fe4905377bb328590f84095a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/cryptography/ECDSA.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSA {\\n    enum RecoverError {\\n        NoError,\\n        InvalidSignature,\\n        InvalidSignatureLength,\\n        InvalidSignatureS\\n    }\\n\\n    /**\\n     * @dev The signature derives the `address(0)`.\\n     */\\n    error ECDSAInvalidSignature();\\n\\n    /**\\n     * @dev The signature has an invalid length.\\n     */\\n    error ECDSAInvalidSignatureLength(uint256 length);\\n\\n    /**\\n     * @dev The signature has an S value that is in the upper half order.\\n     */\\n    error ECDSAInvalidSignatureS(bytes32 s);\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with `signature` or an error. This will not\\n     * return address(0) without also returning an error description. Errors are documented using an enum (error type)\\n     * and a bytes32 providing additional information about the error.\\n     *\\n     * If no error is returned, then the address can be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM precompile allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {MessageHashUtils-toEthSignedMessageHash} on it.\\n     *\\n     * Documentation for signature generation:\\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\\n     */\\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError, bytes32) {\\n        if (signature.length == 65) {\\n            bytes32 r;\\n            bytes32 s;\\n            uint8 v;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                s := mload(add(signature, 0x40))\\n                v := byte(0, mload(add(signature, 0x60)))\\n            }\\n            return tryRecover(hash, v, r, s);\\n        } else {\\n            return (address(0), RecoverError.InvalidSignatureLength, bytes32(signature.length));\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM precompile allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {MessageHashUtils-toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        (address recovered, RecoverError error, bytes32 errorArg) = tryRecover(hash, signature);\\n        _throwError(error, errorArg);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\\n     *\\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\\n     */\\n    function tryRecover(bytes32 hash, bytes32 r, bytes32 vs) internal pure returns (address, RecoverError, bytes32) {\\n        unchecked {\\n            bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\\n            // We do not check for an overflow here since the shift operation results in 0 or 1.\\n            uint8 v = uint8((uint256(vs) >> 255) + 27);\\n            return tryRecover(hash, v, r, s);\\n        }\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\\n     */\\n    function recover(bytes32 hash, bytes32 r, bytes32 vs) internal pure returns (address) {\\n        (address recovered, RecoverError error, bytes32 errorArg) = tryRecover(hash, r, vs);\\n        _throwError(error, errorArg);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address, RecoverError, bytes32) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (301): 0 < s < secp256k1n \\u00f7 2 + 1, and for v in (302): v \\u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\n            return (address(0), RecoverError.InvalidSignatureS, s);\\n        }\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        if (signer == address(0)) {\\n            return (address(0), RecoverError.InvalidSignature, bytes32(0));\\n        }\\n\\n        return (signer, RecoverError.NoError, bytes32(0));\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) internal pure returns (address) {\\n        (address recovered, RecoverError error, bytes32 errorArg) = tryRecover(hash, v, r, s);\\n        _throwError(error, errorArg);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Optionally reverts with the corresponding custom error according to the `error` argument provided.\\n     */\\n    function _throwError(RecoverError error, bytes32 errorArg) private pure {\\n        if (error == RecoverError.NoError) {\\n            return; // no error: do nothing\\n        } else if (error == RecoverError.InvalidSignature) {\\n            revert ECDSAInvalidSignature();\\n        } else if (error == RecoverError.InvalidSignatureLength) {\\n            revert ECDSAInvalidSignatureLength(uint256(errorArg));\\n        } else if (error == RecoverError.InvalidSignatureS) {\\n            revert ECDSAInvalidSignatureS(errorArg);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xeed0a08b0b091f528356cbc7245891a4c748682d4f6a18055e8e6ca77d12a6cf\",\"license\":\"MIT\"},\"contracts/SingleIdentifierRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity =0.8.24;\\n\\nimport {UUPSUpgradeable} from \\\"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\\\";\\nimport {AccessControlUpgradeable} from \\\"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\\\";\\nimport {EIP712Upgradeable} from \\\"@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol\\\";\\nimport {ECDSA} from \\\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\\\";\\n\\nimport {SID, SIDSchema, SIDSchemaParams} from \\\"./types/Structs.sol\\\";\\nimport {ISingleIdentifierRegistry} from \\\"./interfaces/ISingleIdentifierRegistry.sol\\\";\\nimport {MessageLib} from \\\"./lib/MessageLib.sol\\\";\\nimport {SingleRouter} from \\\"./SingleRouter.sol\\\";\\nimport {IConnector} from \\\"./interfaces/IConnector.sol\\\";\\n\\ncontract SingleIdentifierRegistry is ISingleIdentifierRegistry, EIP712Upgradeable, AccessControlUpgradeable, UUPSUpgradeable {\\n    bytes32 public constant OPERATOR_ROLE = keccak256(\\\"OPERATOR_ROLE\\\");\\n    string public constant NAME = \\\"Rubyscore_Single_Identifier_Registry\\\";\\n    string public constant VERSION = \\\"0.0.1\\\";\\n\\n    SingleRouter public router;\\n\\n    mapping(bytes32 schemaId => SIDSchema schema) public schemas;\\n    mapping(address emitter => bytes32 schemaId) public schemaIds;\\n    mapping(bytes32 id => SID sid) public singleIdentifierData;\\n\\n    uint256 public sidCounter;\\n    uint256 public emitterCounter;\\n\\n    event SchemaRegistered(bytes32 indexed schemaId, address indexed emitter);\\n    event EmitterUpdated(bytes32 indexed schemaId, address indexed newEmitterAddress);\\n    event EmitterRevoked(bytes32 indexed schemaId, address indexed emitter);\\n    event SIDRegistered(bytes32 indexed SIDId, address indexed user);\\n    event SIDRevoked(bytes32 indexed SIDId, address indexed user);\\n    event SIDUpdated(bytes32 indexed SIDId);\\n    event SetRouter(address indexed router);\\n\\n    error SchemaNameMissing();\\n    error SchemaStringMissing();\\n    error SchemaNotExist();\\n    error EmitterInvalid();\\n    error SchemaAlreadyExists();\\n    error SIDAlreadyExists();\\n    error SIDNotExists();\\n    error SignatureInvalid();\\n    error OnlyEmitter();\\n    error UnknownSelector();\\n    error MethodNotFound(bytes data);\\n    error AddressIsZero();\\n    error SenderIsNotPeer(address sender);\\n\\n    function initialize(address _operator) external initializer {\\n        __EIP712_init(NAME, VERSION);\\n        __AccessControl_init();\\n        __UUPSUpgradeable_init();\\n\\n        if (_operator == address(0)) revert AddressIsZero();\\n\\n        _grantRole(OPERATOR_ROLE, msg.sender);\\n        _grantRole(OPERATOR_ROLE, _operator);\\n    }\\n\\n    function schemaRegistry(SIDSchemaParams calldata _schema, bytes calldata _signature) external {\\n        if (bytes(_schema.name).length == 0) revert SchemaNameMissing();\\n        if (bytes(_schema.schema).length == 0) revert SchemaStringMissing();\\n        if (_signature.length == 0) revert SignatureInvalid();\\n\\n        bytes32 schemaId = _generateSchemaId(msg.sender, _schema.schema);\\n        if (schemas[schemaId].schemaId != bytes32(0)) revert SchemaAlreadyExists();\\n\\n        bytes32 digest = _hashTypedDataV4(\\n            keccak256(\\n                abi.encode(\\n                    keccak256(\\\"SchemaRegistryParams(string name,string description,string schema,address emitter)\\\"),\\n                    keccak256(abi.encodePacked(_schema.name)),\\n                    keccak256(abi.encodePacked(_schema.description)),\\n                    keccak256(abi.encodePacked(_schema.schema)),\\n                    _schema.emitter\\n                )\\n            )\\n        );\\n        _checkRole(OPERATOR_ROLE, ECDSA.recover(digest, _signature));\\n\\n        schemaIds[msg.sender] = schemaId;\\n        schemas[schemaId] = SIDSchema(\\n        schemaId,\\n            _schema.name,\\n            _schema.description,\\n            _schema.schema,\\n            _schema.emitter\\n        );\\n        emitterCounter++;\\n\\n        emit SchemaRegistered(schemaId, msg.sender);\\n    }\\n\\n    function updateSchemaEmitter(bytes32 _schemaId, address _emitter) external onlyRole(OPERATOR_ROLE) {\\n        SIDSchema storage schema = schemas[_schemaId];\\n        if (schema.schemaId == bytes32(0)) revert SchemaNotExist();\\n        if (_emitter == address(0)) revert EmitterInvalid();\\n\\n        schemaIds[schema.emitter] = bytes32(0);\\n        schemaIds[_emitter] = _schemaId;\\n        schema.emitter = _emitter;\\n\\n        emit EmitterUpdated(_schemaId, _emitter);\\n    }\\n\\n    function registrySID(MessageLib.SendMessage memory _payload) external onlyConnector {\\n        SIDSchema memory schema = schemas[_payload.schemaId];\\n        if (schema.schemaId == bytes32(0)) revert SchemaNotExist();\\n\\n        bytes32 sidId = _generateSIDId(_payload.schemaId, _payload.user);\\n\\n        if (singleIdentifierData[sidId].SIDId != bytes32(0)) revert SIDAlreadyExists();\\n\\n        singleIdentifierData[sidId] = SID(\\n            bytes32(sidId),\\n            bytes32(_payload.schemaId),\\n            uint64(_payload.expirationDate),\\n            uint64(0),\\n            bool(false),\\n            address(_payload.user),\\n            bytes(_payload.data),\\n            string(_payload.metadata)\\n        );\\n\\n        sidCounter++;\\n\\n        emit SIDRegistered(sidId, _payload.user);\\n    }\\n\\n    function updateSID(MessageLib.UpdateMessage memory _payload) external onlyConnector {\\n\\n        SID storage sid = singleIdentifierData[_payload.id];\\n        if (sid.SIDId == bytes32(0)) revert SIDNotExists();\\n\\n        if (_payload.expirationDate != uint64(0)) {\\n            sid.expirationDate = _payload.expirationDate;\\n        }\\n\\n        if (_payload.data.length != 0) {\\n            sid.data = _payload.data;\\n        }\\n\\n        if (bytes(_payload.metadata).length != 0) {\\n            sid.metadata = _payload.metadata;\\n        }\\n\\n        emit SIDUpdated(_payload.id);\\n    }\\n\\n    function setRouter(address _router) external onlyRole(OPERATOR_ROLE) {\\n        if (_router == address(0)) revert AddressIsZero();\\n\\n        router = SingleRouter(_router);\\n        emit SetRouter(_router);\\n    }\\n\\n    function _authorizeUpgrade(address newImplementation) internal override onlyRole(OPERATOR_ROLE) {}\\n\\n    function _generateSchemaId(address _emitter, string calldata _schema) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(_emitter, _schema));\\n    }\\n\\n    function revoke(bytes32 _sidId) public {\\n        SID storage sid = singleIdentifierData[_sidId];\\n        if (sid.SIDId == bytes32(0)) revert SIDNotExists();\\n\\n        SIDSchema memory schema = schemas[sid.schemaId];\\n        if (schema.emitter != msg.sender) revert OnlyEmitter();\\n\\n        sid.revocationDate = uint64(block.timestamp);\\n        sid.revoked = true;\\n\\n        emit SIDRevoked(_sidId, sid.user);\\n    }\\n\\n    function _generateSIDId(bytes32 _schemaId, address _userAddress) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(_schemaId, _userAddress));\\n    }\\n\\n    modifier onlyConnector() {\\n        uint32 connectorId = IConnector(msg.sender).connectorId();\\n        if (!router.isAvailablePeer(block.chainid, connectorId, msg.sender)) revert SenderIsNotPeer(msg.sender);\\n        _;\\n    }\\n}\\n\",\"keccak256\":\"0x2f40e876bd69d9c2ca4fc6b23107b355c0ad042b3a7e70472cee221647ce2839\",\"license\":\"MIT\"},\"contracts/SingleRouter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity =0.8.24;\\n\\nimport {UUPSUpgradeable} from \\\"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\\\";\\nimport {AccessControlUpgradeable} from \\\"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\\\";\\nimport {IConnector} from \\\"./interfaces/IConnector.sol\\\";\\nimport {Destination} from \\\"./types/Structs.sol\\\";\\n\\n\\ncontract SingleRouter is AccessControlUpgradeable, UUPSUpgradeable {\\n    bytes32 public constant OPERATOR_ROLE = keccak256(\\\"OPERATOR_ROLE\\\");\\n\\n    address[] public connectorsList;\\n\\n    mapping(uint32 connectorId => IConnector connector) public connectors;\\n    mapping(uint256 chainId => mapping(uint32 connectorId => bytes32 peer)) public peers;\\n\\n    function getRoute(uint32 _connectorId, uint256 _destinationChainId) external view returns (IConnector) {\\n        IConnector connector;\\n\\n        if (block.chainid == _destinationChainId) {\\n            connector = connectors[0];\\n        } else {\\n            connector = connectors[_connectorId];\\n        }\\n\\n        return connector;\\n    }\\n\\n    function getPeer(uint32 _connectorId, uint256 _chainId) external view returns (bytes32) {\\n        bytes32 peer = peers[_chainId][_connectorId];\\n        if (peer == bytes32(0)) revert PeerNotExist(_chainId);\\n\\n        return peer;\\n    }\\n\\n    function isAvailablePeer(uint256 _chainId, uint32 _connectorId, address _sender) external view returns (bool) {\\n        bytes32 senderInBytes32 = bytes32(uint256(uint160(_sender)));\\n\\n        bytes32 peer = peers[_chainId][_connectorId];\\n        return senderInBytes32 == peer;\\n    }\\n\\n    event PeerSet(uint256 indexed chainId, uint32 indexed _connectorId, bytes32 peer);\\n    event SetConnector(uint32 indexed connectorId, address indexed transferProtocol);\\n    event SetProtocolChainId(uint32 protocolChainId, uint256 chainId);\\n\\n    error PeerNotExist(uint256 chainId);\\n    error PeerInvalid();\\n    error AddressIsZero();\\n\\n    function initialize(address _operator) external initializer {\\n        __AccessControl_init();\\n        __UUPSUpgradeable_init();\\n\\n        if (_operator == address(0)) revert AddressIsZero();\\n\\n        _grantRole(OPERATOR_ROLE, msg.sender);\\n        _grantRole(OPERATOR_ROLE, _operator);\\n    }\\n\\n    function setPeer(uint256 _chainId, uint32 _connectorId, bytes32 _peer) external onlyRole(OPERATOR_ROLE) {\\n        _setPeer(_chainId, _connectorId, _peer);\\n    }\\n\\n    function setPeers(uint32 _connectorId, uint256[]  calldata _chainIds, bytes32[]  calldata _peers) external onlyRole(OPERATOR_ROLE) {\\n        require(_chainIds.length == _peers.length, \\\"Invalid arrays length.\\\");\\n\\n        for (uint256 i = 0; i < _chainIds.length; i++) {\\n            _setPeer(_chainIds[i], _connectorId, _peers[i]);\\n        }\\n    }\\n\\n    function setConnectors(uint32[] calldata _connectorIds, address[] calldata _connectors) external onlyRole(OPERATOR_ROLE) {\\n        require(_connectorIds.length == _connectors.length, \\\"Invalid arrays length.\\\");\\n\\n        for (uint256 i = 0; i < _connectors.length; i++) {\\n            _setConnector(_connectorIds[i], _connectors[i]);\\n        }\\n    }\\n\\n    function _authorizeUpgrade(address newImplementation) internal override onlyRole(OPERATOR_ROLE) {}\\n\\n    function setConnector(uint32 connectorId, address _connector) external onlyRole(OPERATOR_ROLE) {\\n        _setConnector(connectorId, _connector);\\n    }\\n\\n    function _setConnector(uint32 _connectorId, address _connector) private {\\n        connectors[_connectorId] = IConnector(_connector);\\n\\n        IConnector(_connector).setConnectorId(_connectorId);\\n        emit SetConnector(_connectorId, _connector);\\n    }\\n\\n    function _setConnector(address _connector) private {\\n        uint32 connectorId = uint32(connectorsList.length);\\n\\n        connectors[connectorId] = IConnector(_connector);\\n\\n        IConnector(_connector).setConnectorId(connectorId);\\n        emit SetConnector(connectorId, _connector);\\n    }\\n\\n    function _setPeer(uint256 _chainId, uint32 _connectorId, bytes32 _peer) private {\\n        if (_peer == bytes32(0)) revert PeerInvalid();\\n\\n        peers[_chainId][_connectorId] = _peer;\\n        emit PeerSet(_chainId, _connectorId, _peer);\\n    }\\n}\\n\",\"keccak256\":\"0x4c5b3b9a65aba0a3565435504fe7685dfb8210d0b613062fc44907eda30ad495\",\"license\":\"MIT\"},\"contracts/interfaces/IConnector.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity =0.8.24;\\n\\ninterface IConnector {\\n\\n    function sendMessage(uint256 _registryDst, bytes calldata _payload) external payable;\\n\\n    function quote(uint256 _registryDst, bytes memory _payload) external view returns (uint256);\\n\\n    function getProtocolId() external view returns (bytes32);\\n\\n    function getDestinationChainId(uint256 nativeChainId) external view returns (uint256);\\n\\n    function setConnectorId(uint32 _connectorId) external;\\n\\n    function connectorId() external view returns (uint32);\\n}\\n\",\"keccak256\":\"0x82b004b53b048e3ee386962fcf3362f53282da8a122018dcd841f7092cbdd7df\",\"license\":\"MIT\"},\"contracts/interfaces/ISingleIdentifierRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity =0.8.24;\\n\\nimport {SIDSchemaParams, SIDSchema, SID} from \\\"../types/Structs.sol\\\";\\nimport {MessageLib} from \\\"../lib/MessageLib.sol\\\";\\n\\ninterface ISingleIdentifierRegistry {\\n\\n    function registrySID(MessageLib.SendMessage memory _payload) external;\\n\\n    function updateSID(MessageLib.UpdateMessage memory _payload) external;\\n\\n    function schemaRegistry(SIDSchemaParams calldata _schema, bytes calldata _signature) external;\\n\\n    function updateSchemaEmitter(bytes32 _schemaId, address _emitter) external;\\n\\n    function revoke(bytes32 _passportId) external;\\n}\\n\",\"keccak256\":\"0x78d5bef3eaf8fccef462114fc7d48a640002f1d339cdb348ab4ebc6e9c7b3595\",\"license\":\"MIT\"},\"contracts/lib/MessageLib.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity =0.8.24;\\n\\nlibrary MessageLib {\\n\\n    struct SendMessage {\\n        bytes32 schemaId;\\n        address user;\\n        uint64 expirationDate;\\n        bytes data;\\n        string metadata;\\n    }\\n\\n    struct UpdateMessage {\\n        bytes32 id;\\n        uint64 expirationDate;\\n        bytes data;\\n        string metadata;\\n    }\\n\\n    enum MessageType {TYPE_SEND_REGISTER, TYPE_SEND_UPDATE}\\n\\n    struct DecodedMessage {\\n        MessageType messageType;\\n        SendMessage sendMessage;\\n        UpdateMessage renewalMessage;\\n    }\\n\\n    uint8 public constant TYPE_SEND_REGISTER = 1;\\n    uint8 public constant TYPE_SEND_UPDATE = 2;\\n\\n    function encodeMessage(SendMessage memory _message) internal pure returns (bytes memory) {\\n        return abi.encode(TYPE_SEND_REGISTER, _message.schemaId, _message.user, _message.expirationDate, _message.data, _message.metadata);\\n    }\\n\\n    function encodeMessage(UpdateMessage memory _message) internal pure returns (bytes memory) {\\n        return abi.encode(TYPE_SEND_UPDATE, _message.id, _message.expirationDate, _message.data, _message.metadata);\\n    }\\n\\n    function decodeMessage(bytes memory _rawData) internal pure returns (DecodedMessage memory) {\\n        uint8 messageType;\\n        (messageType) = abi.decode(_rawData, (uint8));\\n\\n        if (messageType == TYPE_SEND_REGISTER) {\\n            (,bytes32 schemaId,\\n                address user,\\n                uint64 expirationDate,\\n                bytes memory registerData,\\n                string memory metadata\\n            ) = abi.decode(_rawData, (uint8, bytes32, address, uint64, bytes, string));\\n\\n            SendMessage memory sendMessage = SendMessage(schemaId, user, expirationDate, registerData, metadata);\\n            return DecodedMessage(MessageType.TYPE_SEND_REGISTER, sendMessage, UpdateMessage(bytes32(0), 0, \\\"\\\", \\\"\\\"));\\n        } else if (messageType == TYPE_SEND_UPDATE) {\\n            (, bytes32 id, uint64 expirationDate, bytes memory updateData, string memory metadata) = abi.decode(_rawData, (uint8, bytes32, uint64, bytes, string));\\n\\n            UpdateMessage memory renewalMessage = UpdateMessage(id, expirationDate, updateData, metadata);\\n            return DecodedMessage(MessageType.TYPE_SEND_UPDATE, SendMessage(bytes32(0), address(0), 0, \\\"\\\", \\\"\\\"), renewalMessage);\\n        } else {\\n            revert(\\\"Unknown message type\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x377f640ce7c987338158e627f7c1f1e63fb928699636bfa4f5f7fdffe524d63f\",\"license\":\"MIT\"},\"contracts/types/Structs.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity =0.8.24;\\n\\n    struct SID {\\n        bytes32 SIDId;\\n        bytes32 schemaId;\\n        uint64 expirationDate;\\n        uint64 revocationDate;\\n        bool revoked;\\n        address user;\\n        bytes data;\\n        string metadata;\\n    }\\n\\n    struct SIDSchema {\\n        bytes32 schemaId;\\n        string name;\\n        string description;\\n        string schema;\\n        address emitter;\\n    }\\n\\n    struct SIDSchemaParams {\\n        string name;\\n        string description;\\n        string schema;\\n        address emitter;\\n    }\\n\\n    struct Emitter {\\n        bytes32 emitterId;\\n        bytes32 schemaId;\\n        uint64 expirationDate;\\n        uint256 fee;\\n        uint256 registryChainId;\\n        address owner;\\n    }\\n\\n    struct Destination {\\n        uint256 chainId;\\n        uint32 layerZero;\\n        uint32 hyperlane;\\n    }\\n\\n    struct Peers {\\n        bytes32 sender;\\n        bytes32 receiver;\\n    }\\n\",\"keccak256\":\"0xbe30507e80118ab8bb77ac35100ec409e6e3a75010ceb06d3f1f8668c63056c9\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60a08060405234610031573060805261322b90816100378239608051818181611c1e01528181611d0c0152611fa20152f35b600080fdfe608080604052600436101561001357600080fd5b60003560e01c90816301ffc9a7146122b257508063248a9ca3146122835780632f2ff15d146121ce57806336568abe1461213c5780633659cfe614611f7d5780634f1ef28614611ccf57806352d1902d14611c0b578063666e458214611bec57806378db91c914611bb157806384b0196e14611a9957806391d1485414611a4c578063a217fddf14611a30578063a330273014611974578063a36198ba1461131a578063a3cbcb2414610fa8578063a3f4df7e14610f8c578063b75c7dc614610e4b578063c0d7865514610de0578063c4d66de8146109db578063ca2adef61461091b578063cc536fc8146108fc578063d547741f146108b9578063f2e4cdea146102b6578063f5b541a61461027b578063f887ea4014610251578063f8cf0489146101815763ffa1ad741461014857600080fd5b3461017c57600036600319011261017c576101786101646126fd565b60405191829160208352602083019061246c565b0390f35b600080fd5b3461017c57602036600319011261017c57600435600052610132602052604060002080549061017860056102436001840154936002810154956001600160401b039660ff60018060a01b0360038501541691610202604051956101f2876101eb8160048501612667565b03886123b8565b6101eb604051809a819301612667565b604051998a99610100958b5260208b015280821660408b01528160401c1660608a015260801c161515608088015260a08701528060c087015285019061246c565b9083820360e085015261246c565b3461017c57600036600319011261017c5761012f546040516001600160a01b039091168152602090f35b3461017c57600036600319011261017c5760206040517f97667070c54ef182b0f5858b034beac1b6f3089aa2d3188bb1e8929f4fa9b9298152f35b3461017c5760031960203682011261017c57600435906001600160401b03821161017c5760a090823603011261017c57604051906102f382612331565b6004810135825260248101356001600160a01b038116810361017c57602083015261032060448201612491565b916040810192835260648201356001600160401b03811161017c5761034b906004369185010161242b565b91606082019283526084810135906001600160401b03821161017c576004610376923692010161242b565b916080820192835260405163167ac65160e31b8152602081600481335afa908115610880576103ee9160209160009161088c575b5061012f54604051636a80cdc560e11b815246600482015263ffffffff9092166024830152336044830152909283916001600160a01b031690829081906064820190565b03915afa90811561088057600091610851575b501561083957815160005261013060205260406000206040519061042482612331565b805482526040516104438161043c8160018601612667565b03826123b8565b602083015260405161045c8161043c8160028601612667565b60408301526040516104758161043c8160038601612667565b6060830152600401546001600160a01b031660808201525115610827578151602083015160405190602082019283526001600160601b03199060601b166040820152603481526104c481612367565b5190209283600052610132602052604060002054610815576001600160401b0383519551169160018060a01b03602085015116905191519260405196876101008101106001600160401b036101008a01111761078657610100880160405286885260208801526040870152600060608701526000608087015260a086015260c085015260e08401528160005261013260205260406000208351815560208401516001820155600281016001600160401b036040860151166001600160401b03198254161781556105c46001600160401b03606087015116829067ffffffffffffffff60401b82549160401b169067ffffffffffffffff60401b1916179055565b608085810151825460ff60801b191690151590911b60ff60801b1617905560a08401516003820180546001600160a01b0319166001600160a01b039290921691909117905560c0840151805160048301916001600160401b038211610786576106378261063185546124eb565b8561284d565b602090601f83116001146107a7578260e095936005959361066f9360009261079c575b50508160011b916000199060031b1c19161790565b90555b019301519283516001600160401b0381116107865761069b8161069584546124eb565b8461284d565b602094601f8211600114610720576106ce9293949582916000926107155750508160011b916000199060031b1c19161790565b90555b6101336106de8154612894565b9055602001516001600160a01b0316907fcdb4f4c227298777a68324767904e59ae71f9be763842b8b3beb0d0c6d4bfcd4600080a3005b01519050868061065a565b601f198216958360005260206000209160005b88811061076e57508360019596979810610755575b505050811b0190556106d1565b015160001960f88460031b161c19169055858080610748565b91926020600181928685015181550194019201610733565b634e487b7160e01b600052604160045260246000fd5b015190508a8061065a565b90601f198316918460005260206000209260005b8181106107fd575092600192859260e0989660059896106107e4575b505050811b019055610672565b015160001960f88460031b161c191690558980806107d7565b929360206001819287860151815501950193016107bb565b6040516306e3131760e11b8152600490fd5b604051637cbdaa0560e11b8152600490fd5b604051631a64ce3f60e21b8152336004820152602490fd5b610873915060203d602011610879575b61086b81836123b8565b8101906128d5565b85610401565b503d610861565b6040513d6000823e3d90fd5b6108ac9150823d84116108b2575b6108a481836123b8565b8101906128b9565b876103aa565b503d61089a565b3461017c57604036600319011261017c576108fa6004356108d8612305565b908060005260996020526108f56001604060002001543390612c3d565b61299e565b005b3461017c57600036600319011261017c57602061013454604051908152f35b3461017c57602036600319011261017c57600435600052610130602052604060002080546040519161095b836109548160018501612667565b03846123b8565b6109d160405191610973836109548160028501612667565b6109c36040519161098b836109548160038501612667565b600460018060a01b0391015416936109b5604051978897885260a0602089015260a088019061246c565b90868203604088015261246c565b90848203606086015261246c565b9060808301520390f35b3461017c5760208060031936011261017c576109f561231b565b906000549060ff8260081c1615808091610dd3575b8015610dbc575b15610d6057600192818460ff19831617600055610d4e575b50610a326124a5565b93610a3b6126fd565b94610a5660ff60005460081c16610a5181612d54565b612d54565b8051906001600160401b039182811161078657600390610a7682546124eb565b92601f93848111610d03575b508790848311600114610c8557610ab1929160009183610c7a5750508160011b916000199060031b1c19161790565b81555b875192831161078657610ac86004546124eb565b828111610c24575b5085918311600114610b9f57508190610b039394959697600092610b945750508160011b916000199060031b1c19161790565b6004555b600084556000600255610b2560ff60005460081c16610a5181612d54565b6001600160a01b03811615610b8257610b4690610b41336128ed565b6128ed565b610b4c57005b7f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989161ff001960005416600055604051908152a1005b60405163867915ab60e01b8152600490fd5b01519050878061065a565b601f1983169160046000527f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19b9260005b818110610c0f57509884899a999697989910610bf5575b50505050811b01600455610b07565b01519060f884600019921b161c1916905586808080610be6565b8a830151855593890193918801918801610bcf565b610c6b9060046000527f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19b8480870160051c8201928a8810610c71575b0160051c0190612836565b88610ad0565b92508192610c60565b015190508b8061065a565b899291601f19831691856000527fc2575a0e9e593c00f959f8c92f12db2869c3395a3b0502d05e2516446f71f85b9260005b8c828210610ced5750508411610cd5575b505050811b018155610ab4565b015160001983861b60f8161c191690558a8080610cc8565b8385015186558e97909501949384019301610cb7565b610d4890846000527fc2575a0e9e593c00f959f8c92f12db2869c3395a3b0502d05e2516446f71f85b8680860160051c8201928c8710610c71570160051c0190612836565b8a610a82565b61ffff19166101011760005584610a29565b60405162461bcd60e51b815260048101839052602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b6064820152608490fd5b50303b158015610a115750600160ff841614610a11565b50600160ff841610610a0a565b3461017c57602036600319011261017c57610df961231b565b610e0233612a14565b6001600160a01b03168015610b825761012f80546001600160a01b031916821790557f6de4326a8b9054d72d9dbab97d27bc4edffadee7d966f5af9cc4eafdaf8e5455600080a2005b3461017c57602036600319011261017c57600435806000526101326020526040600020805415610f7a5780600160049201546000526101306020526080604060002060405190610e9a82612331565b80548252604051610eb28161043c8160018601612667565b6020830152604051610ecb8161043c8160028601612667565b6040830152604051610ee48161043c8160038601612667565b6060830152909301546001600160a01b03908116919093018190523303610f6857600281018054600160801b70ffffffffffffffffff00000000000000001990911667ffffffffffffffff60401b4260401b16171790556003015416907f436e32dc587e71660aef91b28c6f85cd077ceac47867d9df9930a48e65ab7ed0600080a3005b604051630ee803d760e21b8152600490fd5b6040516347b48db360e11b8152600490fd5b3461017c57600036600319011261017c576101786101646124a5565b3461017c576020600319818136011261017c57600435906001600160401b039081831161017c57608090833603011261017c57604051916080830183811083821117610786576040528060040135835261100460248201612491565b90848401918252604481013583811161017c57611027906004369184010161242b565b906040850191825260648101359084821161017c57600461104b923692010161242b565b906060850191825260405163167ac65160e31b81528681600481335afa908115610880576110c09188916000916112fd575061012f54604051636a80cdc560e11b815246600482015263ffffffff9092166024830152336044830152909283916001600160a01b031690829081906064820190565b03915afa908115610880576000916112e0575b50156108395784516000526101328652604060002092835415610f7a57518416806112c6575b5051805180611201575b5050519384519182611139575b84517fb16e238411c7a7cdf16f07b1bb3b95461fa3af1218deea488f95f582b5d51cea600080a2005b600501928211610786576111518261063185546124eb565b80601f831160011461119a5750819061118293949560009261118f5750508160011b916000199060031b1c19161790565b90555b8082808080611110565b01519050858061065a565b90601f198316958460005282600020926000905b8882106111e9575050836001959697106111d0575b505050811b019055611185565b015160001960f88460031b161c191690558480806111c3565b806001859682949686015181550195019301906111ae565b60048401918582116107865761121b8261063185546124eb565b8790601f831160011461125f5761124a9291600091836112545750508160011b916000199060031b1c19161790565b90555b8580611103565b01519050898061065a565b90601f1983169184600052896000209260005b8b8282106112b0575050908460019594939210611297575b505050811b01905561124d565b015160001960f88460031b161c1916905588808061128a565b6001859682939686015181550195019301611272565b60028401906001600160401b0319825416179055866110f9565b6112f79150873d89116108795761086b81836123b8565b876110d3565b6113149150823d84116108b2576108a481836123b8565b896103aa565b3461017c5760031960403682011261017c57600435906001600160401b03821161017c57608090823603011261017c576001600160401b036024351161017c5736602360243501121561017c576001600160401b03602435600401351161017c57366024803560040135813501011161017c5761139a60048201806127f0565b905015611962576113b160448201826004016127f0565b90501561195057602435600401351561193e576113d460448201826004016127f0565b611404603460405183819460208301963360601b88528484013781016000838201520360148101845201826123b8565b5190208060005261013060205260406000205461192c57611657916115d66115d16115c8604261143760048601806127f0565b61145b602060405183819483830196873781016000838201520380845201826123b8565b51902061146e60248701876004016127f0565b611492602060405183819483830196873781016000838201520380845201826123b8565b5190206114a560448801886004016127f0565b6114c9602060405183819483830196873781016000838201520380845201826123b8565b5190206114d860648901612822565b91604051937f7c9ef3db6c57694a9a92d6d98cd1c6104b9c8f1941c466575097b2e77ecdbaa1602086015260408501526060840152608083015260018060a01b031660a082015260a0815261152c81612382565b6020815191012061153b6130bb565b61154361310e565b6040519060208201927f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f8452604083015260608201524660808201523060a082015260a0815261159281612382565b519020906040519161190160f01b835260028301526022820152206115c2366024356004013560248035016123f4565b90612e44565b90929192612e80565b612a14565b336000526101316020528160406000205561166660646115fc83600401846004016127f0565b92909361160f60248201826004016127f0565b979061164861163061162760448601866004016127f0565b97909501612822565b976040519761163e89612331565b8a895236916123f4565b9860208701998a5236916123f4565b926040850193845236916123f4565b9060608301918252608083019360018060a01b031684528460005261013060205260406000209251835560019586840190518051906001600160401b038211610786576116b78261063185546124eb565b602090601f83116001146118c9576116e792916000918361079c5750508160011b916000199060031b1c19161790565b90555b51805160028401916001600160401b0382116107865761170e8261063185546124eb565b602090601f83116001146118665761173e9291600091836112545750508160011b916000199060031b1c19161790565b90555b600382019051948551906001600160401b038211610786576117678261063185546124eb565b602090601f83116001146118005750908061179d9260049697986000926117f55750508160011b916000199060031b1c19161790565b90555b019060018060a01b039051166001600160601b0360a01b8254161790556101346117ca8154612894565b905533907fd16733fb8c2a502f4e1d1d63970cbab355e37ff6d6d12a215b7d0197ea5535f4600080a3005b01519050888061065a565b9190601f198216908460005260206000209160005b81811061185057509883600498999a10611837575b505050811b0190556117a0565b015160001960f88460031b161c1916905587808061182a565b8a83015184559285019260209283019201611815565b889291601f198316918560005260206000209260005b8181106118b157508411611898575b505050811b019055611741565b015160001960f88460031b161c1916905588808061188b565b8284015185558c96909401936020938401930161187c565b899291601f198316918560005260206000209260005b818110611914575084116118fb575b505050811b0190556116ea565b015160001960f88460031b161c191690558980806118ee565b8284015185558d9690940193602093840193016118df565b604051631cfbd86560e21b8152600490fd5b6040516337e8456b60e01b8152600490fd5b604051635421bc3560e11b8152600490fd5b60405163e474746b60e01b8152600490fd5b3461017c57604036600319011261017c57600435611990612305565b9061199a33612a14565b80600052610130602052604060002091825415610827576001600160a01b03908116928315611a1e5760040190815416600052610131602052600060408120558260005281604060002055826001600160601b0360a01b8254161790557fd05b2e32ad9ac3239164be79bbc8a379cb9864bc907d8060ecd246aedf89fe54600080a3005b60405163078ec41b60e41b8152600490fd5b3461017c57600036600319011261017c57602060405160008152f35b3461017c57604036600319011261017c57611a65612305565b600435600052609960205260406000209060018060a01b0316600052602052602060ff604060002054166040519015158152f35b3461017c57600036600319011261017c57600180541580611ba7575b15611b6a57604051611aca8161043c81612525565b60405191611adb83610954816125d9565b60405192611ae88461234c565b60008452611b1f602091611b1160405195600f60f81b875260e0602088015260e087019061246c565b90858203604087015261246c565b466060850152306080850152600060a085015283810360c08501526020808651928381520195019160005b828110611b575785870386f35b8351875295810195928101928401611b4a565b60405162461bcd60e51b81526020600482015260156024820152741152540dcc4c8e88155b9a5b9a5d1a585b1a5e9959605a1b6044820152606490fd5b5060025415611ab5565b3461017c57602036600319011261017c576001600160a01b03611bd261231b565b166000526101316020526020604060002054604051908152f35b3461017c57600036600319011261017c57602061013354604051908152f35b3461017c57600036600319011261017c577f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03163003611c645760206040516000805160206131d68339815191528152f35b60405162461bcd60e51b815260206004820152603860248201527f555550535570677261646561626c653a206d757374206e6f742062652063616c60448201527f6c6564207468726f7567682064656c656761746563616c6c00000000000000006064820152608490fd5b604036600319011261017c57611ce361231b565b6024356001600160401b03811161017c57611d0290369060040161242b565b6001600160a01b037f000000000000000000000000000000000000000000000000000000000000000081169190611d3b3084141561272e565b611d586000805160206131d683398151915293828554161461278f565b611d6133612a14565b7f4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd91435460ff1615611d97575050506108fa90612db4565b8316604051926352d1902d60e01b84526020938481600481865afa60009181611f4e575b50611e1c5760405162461bcd60e51b815260048101869052602e60248201527f45524331393637557067726164653a206e657720696d706c656d656e7461746960448201526d6f6e206973206e6f74205555505360901b6064820152608490fd5b93929303611ef757611e2d84612db4565b7fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b600080a2815115801590611eef575b611e6357005b6108fa9260008060405194611e7786612367565b602786527f416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c85870152660819985a5b195960ca1b60408701528481519101845af4903d15611ee6573d611ec9816123d9565b90611ed760405192836123b8565b8152600081943d92013e61313c565b6060925061313c565b506001611e5d565b60405162461bcd60e51b815260048101839052602960248201527f45524331393637557067726164653a20756e737570706f727465642070726f786044820152681a58589b195555525160ba1b6064820152608490fd5b9091508581813d8311611f76575b611f6681836123b8565b8101031261017c57519087611dbb565b503d611f5c565b3461017c5760208060031936011261017c57611f9761231b565b906001600160a01b037f00000000000000000000000000000000000000000000000000000000000000008116611fcf3082141561272e565b611fec6000805160206131d683398151915291838354161461278f565b611ff533612a14565b604051916120028361234c565b600083527f4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd91435460ff161561203d57505050506108fa90612db4565b8416906040516352d1902d60e01b81528481600481865afa6000918161210d575b506120bf5760405162461bcd60e51b815260048101869052602e60248201527f45524331393637557067726164653a206e657720696d706c656d656e7461746960448201526d6f6e206973206e6f74205555505360901b6064820152608490fd5b93929303611ef7576120d084612db4565b7fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b600080a281511580159061210557611e6357005b506000611e5d565b9091508581813d8311612135575b61212581836123b8565b8101031261017c5751908761205e565b503d61211b565b3461017c57604036600319011261017c57612155612305565b336001600160a01b03821603612171576108fa9060043561299e565b60405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201526e103937b632b9903337b91039b2b63360891b6064820152608490fd5b3461017c57604036600319011261017c576004356121ea612305565b8160005260996020526122066001604060002001543390612c3d565b81600052609960205260406000209060018060a01b0316908160005260205260ff604060002054161561223557005b8160005260996020526040600020816000526020526040600020600160ff1982541617905533917f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d600080a4005b3461017c57602036600319011261017c5760043560005260996020526020600160406000200154604051908152f35b3461017c57602036600319011261017c576004359063ffffffff60e01b821680920361017c57602091637965db0b60e01b81149081156122f4575b5015158152f35b6301ffc9a760e01b149050836122ed565b602435906001600160a01b038216820361017c57565b600435906001600160a01b038216820361017c57565b60a081019081106001600160401b0382111761078657604052565b602081019081106001600160401b0382111761078657604052565b606081019081106001600160401b0382111761078657604052565b60c081019081106001600160401b0382111761078657604052565b608081019081106001600160401b0382111761078657604052565b90601f801991011681019081106001600160401b0382111761078657604052565b6001600160401b03811161078657601f01601f191660200190565b929192612400826123d9565b9161240e60405193846123b8565b82948184528183011161017c578281602093846000960137010152565b9080601f8301121561017c57816020612446933591016123f4565b90565b60005b83811061245c5750506000910152565b818101518382015260200161244c565b9060209161248581518092818552858086019101612449565b601f01601f1916010190565b35906001600160401b038216820361017c57565b604051906124b282612367565b60248252637374727960e01b6040837f5275627973636f72655f53696e676c655f4964656e7469666965725f5265676960208201520152565b90600182811c9216801561251b575b602083101461250557565b634e487b7160e01b600052602260045260246000fd5b91607f16916124fa565b60035460009291612535826124eb565b808252916020906001908181169081156125b45750600114612558575b50505050565b9293945060036000527fc2575a0e9e593c00f959f8c92f12db2869c3395a3b0502d05e2516446f71f85b926000935b8585106125a1575050506020925001019038808080612552565b8054858501840152938201938101612587565b92505050602093945060ff929192191683830152151560051b01019038808080612552565b600454600092916125e9826124eb565b808252916020906001908181169081156125b4575060011461260b5750505050565b9293945060046000527f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19b926000935b858510612654575050506020925001019038808080612552565b805485850184015293820193810161263a565b805460009392612676826124eb565b918282526020936001916001811690816000146126de575060011461269d575b5050505050565b90939495506000929192528360002092846000945b8386106126ca57505050500101903880808080612696565b8054858701830152940193859082016126b2565b60ff19168685015250505090151560051b010191503880808080612696565b60405190604082018281106001600160401b03821117610786576040526005825264302e302e3160d81b6020830152565b1561273557565b60405162461bcd60e51b815260206004820152602c60248201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060448201526b19195b1959d85d1958d85b1b60a21b6064820152608490fd5b1561279657565b60405162461bcd60e51b815260206004820152602c60248201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060448201526b6163746976652070726f787960a01b6064820152608490fd5b903590601e198136030182121561017c57018035906001600160401b03821161017c5760200191813603831361017c57565b356001600160a01b038116810361017c5790565b818110612841575050565b60008155600101612836565b9190601f811161285c57505050565b612888926000526020600020906020601f840160051c8301931061288a575b601f0160051c0190612836565b565b909150819061287b565b60001981146128a35760010190565b634e487b7160e01b600052601160045260246000fd5b9081602091031261017c575163ffffffff8116810361017c5790565b9081602091031261017c5751801515810361017c5790565b6001600160a01b031660008181527f03972a83835deae8e7b8a4c3f92b91705e59d4853626afefd46026fda30169a260205260408120549091907f97667070c54ef182b0f5858b034beac1b6f3089aa2d3188bb1e8929f4fa9b9299060ff161561295657505050565b80835260996020526040832082845260205260408320600160ff198254161790557f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d339380a4565b906000918083526099602052604083209160018060a01b03169182845260205260ff6040842054166129cf57505050565b8083526099602052604083208284526020526040832060ff1981541690557ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b339380a4565b6001600160a01b031660008181527f03972a83835deae8e7b8a4c3f92b91705e59d4853626afefd46026fda30169a26020908152604080832054909391927f97667070c54ef182b0f5858b034beac1b6f3089aa2d3188bb1e8929f4fa9b92992909160ff1615612a85575050505050565b612a8e90612f2c565b91845190612a9b8261239d565b60428252848201926060368537825115612c29576030845382519060019160011015612c295790607860218501536041915b818311612bbb57505050612b79576048612b75938693612b5993612b4a985198899376020b1b1b2b9b9a1b7b73a3937b61d1030b1b1b7bab73a1604d1b8a860152612b21815180928c603789019101612449565b8401917001034b99036b4b9b9b4b733903937b6329607d1b603784015251809386840190612449565b010360288101875201856123b8565b5192839262461bcd60e51b84526004840152602483019061246c565b0390fd5b60648486519062461bcd60e51b825280600483015260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e746044820152fd5b909192600f81166010811015612c15576f181899199a1a9b1b9c1cb0b131b232b360811b901a612beb8587612f05565b5360041c928015612c0157600019019190612acd565b634e487b7160e01b82526011600452602482fd5b634e487b7160e01b83526032600452602483fd5b634e487b7160e01b81526032600452602490fd5b600090808252602091609983526040938482209060018060a01b031690818352845260ff858320541615612c72575050505050565b612c7b90612f2c565b91845190612c888261239d565b60428252848201926060368537825115612c29576030845382519060019160011015612c295790607860218501536041915b818311612d0e57505050612b79576048612b75938693612b5993612b4a985198899376020b1b1b2b9b9a1b7b73a3937b61d1030b1b1b7bab73a1604d1b8a860152612b21815180928c603789019101612449565b909192600f81166010811015612c15576f181899199a1a9b1b9c1cb0b131b232b360811b901a612d3e8587612f05565b5360041c928015612c0157600019019190612cba565b15612d5b57565b60405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b6064820152608490fd5b803b15612de9576000805160206131d683398151915280546001600160a01b0319166001600160a01b03909216919091179055565b60405162461bcd60e51b815260206004820152602d60248201527f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60448201526c1bdd08184818dbdb9d1c9858dd609a1b6064820152608490fd5b8151919060418303612e7557612e6e92506020820151906060604084015193015160001a9061302b565b9192909190565b505060009160029190565b6004811015612eef5780612e92575050565b60018103612eac5760405163f645eedf60e01b8152600490fd5b60028103612ecd5760405163fce698f760e01b815260048101839052602490fd5b600314612ed75750565b602490604051906335e2f38360e21b82526004820152fd5b634e487b7160e01b600052602160045260246000fd5b908151811015612f16570160200190565b634e487b7160e01b600052603260045260246000fd5b60405190612f3982612367565b602a8252602082016040368237825115612f165760309053815160019060011015612f1657607860218401536029905b808211612fbd575050612f795790565b606460405162461bcd60e51b815260206004820152602060248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e746044820152fd5b9091600f81166010811015613016576f181899199a1a9b1b9c1cb0b131b232b360811b901a612fec8486612f05565b5360041c918015613001576000190190612f69565b60246000634e487b7160e01b81526011600452fd5b60246000634e487b7160e01b81526032600452fd5b91907f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a084116130af57926020929160ff608095604051948552168484015260408301526060820152600092839182805260015afa156130a35780516001600160a01b0381161561309a57918190565b50809160019190565b604051903d90823e3d90fd5b50505060009160039190565b6040516130cb8161043c81612525565b80519081156130db576020012090565b505060015480156130e95790565b507fc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a47090565b60405161311e8161043c816125d9565b805190811561312e576020012090565b505060025480156130e95790565b9192901561319e5750815115613150575090565b3b156131595790565b60405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606490fd5b8251909150156131b15750805190602001fd5b60405162461bcd60e51b815260206004820152908190612b7590602483019061246c56fe360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbca26469706673582212204ed7faf15126fe6fe1f4d781b3ecba3646b504f04b350c3e2d3479647a18bbea64736f6c63430008180033",
  "deployedBytecode": "0x608080604052600436101561001357600080fd5b60003560e01c90816301ffc9a7146122b257508063248a9ca3146122835780632f2ff15d146121ce57806336568abe1461213c5780633659cfe614611f7d5780634f1ef28614611ccf57806352d1902d14611c0b578063666e458214611bec57806378db91c914611bb157806384b0196e14611a9957806391d1485414611a4c578063a217fddf14611a30578063a330273014611974578063a36198ba1461131a578063a3cbcb2414610fa8578063a3f4df7e14610f8c578063b75c7dc614610e4b578063c0d7865514610de0578063c4d66de8146109db578063ca2adef61461091b578063cc536fc8146108fc578063d547741f146108b9578063f2e4cdea146102b6578063f5b541a61461027b578063f887ea4014610251578063f8cf0489146101815763ffa1ad741461014857600080fd5b3461017c57600036600319011261017c576101786101646126fd565b60405191829160208352602083019061246c565b0390f35b600080fd5b3461017c57602036600319011261017c57600435600052610132602052604060002080549061017860056102436001840154936002810154956001600160401b039660ff60018060a01b0360038501541691610202604051956101f2876101eb8160048501612667565b03886123b8565b6101eb604051809a819301612667565b604051998a99610100958b5260208b015280821660408b01528160401c1660608a015260801c161515608088015260a08701528060c087015285019061246c565b9083820360e085015261246c565b3461017c57600036600319011261017c5761012f546040516001600160a01b039091168152602090f35b3461017c57600036600319011261017c5760206040517f97667070c54ef182b0f5858b034beac1b6f3089aa2d3188bb1e8929f4fa9b9298152f35b3461017c5760031960203682011261017c57600435906001600160401b03821161017c5760a090823603011261017c57604051906102f382612331565b6004810135825260248101356001600160a01b038116810361017c57602083015261032060448201612491565b916040810192835260648201356001600160401b03811161017c5761034b906004369185010161242b565b91606082019283526084810135906001600160401b03821161017c576004610376923692010161242b565b916080820192835260405163167ac65160e31b8152602081600481335afa908115610880576103ee9160209160009161088c575b5061012f54604051636a80cdc560e11b815246600482015263ffffffff9092166024830152336044830152909283916001600160a01b031690829081906064820190565b03915afa90811561088057600091610851575b501561083957815160005261013060205260406000206040519061042482612331565b805482526040516104438161043c8160018601612667565b03826123b8565b602083015260405161045c8161043c8160028601612667565b60408301526040516104758161043c8160038601612667565b6060830152600401546001600160a01b031660808201525115610827578151602083015160405190602082019283526001600160601b03199060601b166040820152603481526104c481612367565b5190209283600052610132602052604060002054610815576001600160401b0383519551169160018060a01b03602085015116905191519260405196876101008101106001600160401b036101008a01111761078657610100880160405286885260208801526040870152600060608701526000608087015260a086015260c085015260e08401528160005261013260205260406000208351815560208401516001820155600281016001600160401b036040860151166001600160401b03198254161781556105c46001600160401b03606087015116829067ffffffffffffffff60401b82549160401b169067ffffffffffffffff60401b1916179055565b608085810151825460ff60801b191690151590911b60ff60801b1617905560a08401516003820180546001600160a01b0319166001600160a01b039290921691909117905560c0840151805160048301916001600160401b038211610786576106378261063185546124eb565b8561284d565b602090601f83116001146107a7578260e095936005959361066f9360009261079c575b50508160011b916000199060031b1c19161790565b90555b019301519283516001600160401b0381116107865761069b8161069584546124eb565b8461284d565b602094601f8211600114610720576106ce9293949582916000926107155750508160011b916000199060031b1c19161790565b90555b6101336106de8154612894565b9055602001516001600160a01b0316907fcdb4f4c227298777a68324767904e59ae71f9be763842b8b3beb0d0c6d4bfcd4600080a3005b01519050868061065a565b601f198216958360005260206000209160005b88811061076e57508360019596979810610755575b505050811b0190556106d1565b015160001960f88460031b161c19169055858080610748565b91926020600181928685015181550194019201610733565b634e487b7160e01b600052604160045260246000fd5b015190508a8061065a565b90601f198316918460005260206000209260005b8181106107fd575092600192859260e0989660059896106107e4575b505050811b019055610672565b015160001960f88460031b161c191690558980806107d7565b929360206001819287860151815501950193016107bb565b6040516306e3131760e11b8152600490fd5b604051637cbdaa0560e11b8152600490fd5b604051631a64ce3f60e21b8152336004820152602490fd5b610873915060203d602011610879575b61086b81836123b8565b8101906128d5565b85610401565b503d610861565b6040513d6000823e3d90fd5b6108ac9150823d84116108b2575b6108a481836123b8565b8101906128b9565b876103aa565b503d61089a565b3461017c57604036600319011261017c576108fa6004356108d8612305565b908060005260996020526108f56001604060002001543390612c3d565b61299e565b005b3461017c57600036600319011261017c57602061013454604051908152f35b3461017c57602036600319011261017c57600435600052610130602052604060002080546040519161095b836109548160018501612667565b03846123b8565b6109d160405191610973836109548160028501612667565b6109c36040519161098b836109548160038501612667565b600460018060a01b0391015416936109b5604051978897885260a0602089015260a088019061246c565b90868203604088015261246c565b90848203606086015261246c565b9060808301520390f35b3461017c5760208060031936011261017c576109f561231b565b906000549060ff8260081c1615808091610dd3575b8015610dbc575b15610d6057600192818460ff19831617600055610d4e575b50610a326124a5565b93610a3b6126fd565b94610a5660ff60005460081c16610a5181612d54565b612d54565b8051906001600160401b039182811161078657600390610a7682546124eb565b92601f93848111610d03575b508790848311600114610c8557610ab1929160009183610c7a5750508160011b916000199060031b1c19161790565b81555b875192831161078657610ac86004546124eb565b828111610c24575b5085918311600114610b9f57508190610b039394959697600092610b945750508160011b916000199060031b1c19161790565b6004555b600084556000600255610b2560ff60005460081c16610a5181612d54565b6001600160a01b03811615610b8257610b4690610b41336128ed565b6128ed565b610b4c57005b7f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989161ff001960005416600055604051908152a1005b60405163867915ab60e01b8152600490fd5b01519050878061065a565b601f1983169160046000527f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19b9260005b818110610c0f57509884899a999697989910610bf5575b50505050811b01600455610b07565b01519060f884600019921b161c1916905586808080610be6565b8a830151855593890193918801918801610bcf565b610c6b9060046000527f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19b8480870160051c8201928a8810610c71575b0160051c0190612836565b88610ad0565b92508192610c60565b015190508b8061065a565b899291601f19831691856000527fc2575a0e9e593c00f959f8c92f12db2869c3395a3b0502d05e2516446f71f85b9260005b8c828210610ced5750508411610cd5575b505050811b018155610ab4565b015160001983861b60f8161c191690558a8080610cc8565b8385015186558e97909501949384019301610cb7565b610d4890846000527fc2575a0e9e593c00f959f8c92f12db2869c3395a3b0502d05e2516446f71f85b8680860160051c8201928c8710610c71570160051c0190612836565b8a610a82565b61ffff19166101011760005584610a29565b60405162461bcd60e51b815260048101839052602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b6064820152608490fd5b50303b158015610a115750600160ff841614610a11565b50600160ff841610610a0a565b3461017c57602036600319011261017c57610df961231b565b610e0233612a14565b6001600160a01b03168015610b825761012f80546001600160a01b031916821790557f6de4326a8b9054d72d9dbab97d27bc4edffadee7d966f5af9cc4eafdaf8e5455600080a2005b3461017c57602036600319011261017c57600435806000526101326020526040600020805415610f7a5780600160049201546000526101306020526080604060002060405190610e9a82612331565b80548252604051610eb28161043c8160018601612667565b6020830152604051610ecb8161043c8160028601612667565b6040830152604051610ee48161043c8160038601612667565b6060830152909301546001600160a01b03908116919093018190523303610f6857600281018054600160801b70ffffffffffffffffff00000000000000001990911667ffffffffffffffff60401b4260401b16171790556003015416907f436e32dc587e71660aef91b28c6f85cd077ceac47867d9df9930a48e65ab7ed0600080a3005b604051630ee803d760e21b8152600490fd5b6040516347b48db360e11b8152600490fd5b3461017c57600036600319011261017c576101786101646124a5565b3461017c576020600319818136011261017c57600435906001600160401b039081831161017c57608090833603011261017c57604051916080830183811083821117610786576040528060040135835261100460248201612491565b90848401918252604481013583811161017c57611027906004369184010161242b565b906040850191825260648101359084821161017c57600461104b923692010161242b565b906060850191825260405163167ac65160e31b81528681600481335afa908115610880576110c09188916000916112fd575061012f54604051636a80cdc560e11b815246600482015263ffffffff9092166024830152336044830152909283916001600160a01b031690829081906064820190565b03915afa908115610880576000916112e0575b50156108395784516000526101328652604060002092835415610f7a57518416806112c6575b5051805180611201575b5050519384519182611139575b84517fb16e238411c7a7cdf16f07b1bb3b95461fa3af1218deea488f95f582b5d51cea600080a2005b600501928211610786576111518261063185546124eb565b80601f831160011461119a5750819061118293949560009261118f5750508160011b916000199060031b1c19161790565b90555b8082808080611110565b01519050858061065a565b90601f198316958460005282600020926000905b8882106111e9575050836001959697106111d0575b505050811b019055611185565b015160001960f88460031b161c191690558480806111c3565b806001859682949686015181550195019301906111ae565b60048401918582116107865761121b8261063185546124eb565b8790601f831160011461125f5761124a9291600091836112545750508160011b916000199060031b1c19161790565b90555b8580611103565b01519050898061065a565b90601f1983169184600052896000209260005b8b8282106112b0575050908460019594939210611297575b505050811b01905561124d565b015160001960f88460031b161c1916905588808061128a565b6001859682939686015181550195019301611272565b60028401906001600160401b0319825416179055866110f9565b6112f79150873d89116108795761086b81836123b8565b876110d3565b6113149150823d84116108b2576108a481836123b8565b896103aa565b3461017c5760031960403682011261017c57600435906001600160401b03821161017c57608090823603011261017c576001600160401b036024351161017c5736602360243501121561017c576001600160401b03602435600401351161017c57366024803560040135813501011161017c5761139a60048201806127f0565b905015611962576113b160448201826004016127f0565b90501561195057602435600401351561193e576113d460448201826004016127f0565b611404603460405183819460208301963360601b88528484013781016000838201520360148101845201826123b8565b5190208060005261013060205260406000205461192c57611657916115d66115d16115c8604261143760048601806127f0565b61145b602060405183819483830196873781016000838201520380845201826123b8565b51902061146e60248701876004016127f0565b611492602060405183819483830196873781016000838201520380845201826123b8565b5190206114a560448801886004016127f0565b6114c9602060405183819483830196873781016000838201520380845201826123b8565b5190206114d860648901612822565b91604051937f7c9ef3db6c57694a9a92d6d98cd1c6104b9c8f1941c466575097b2e77ecdbaa1602086015260408501526060840152608083015260018060a01b031660a082015260a0815261152c81612382565b6020815191012061153b6130bb565b61154361310e565b6040519060208201927f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f8452604083015260608201524660808201523060a082015260a0815261159281612382565b519020906040519161190160f01b835260028301526022820152206115c2366024356004013560248035016123f4565b90612e44565b90929192612e80565b612a14565b336000526101316020528160406000205561166660646115fc83600401846004016127f0565b92909361160f60248201826004016127f0565b979061164861163061162760448601866004016127f0565b97909501612822565b976040519761163e89612331565b8a895236916123f4565b9860208701998a5236916123f4565b926040850193845236916123f4565b9060608301918252608083019360018060a01b031684528460005261013060205260406000209251835560019586840190518051906001600160401b038211610786576116b78261063185546124eb565b602090601f83116001146118c9576116e792916000918361079c5750508160011b916000199060031b1c19161790565b90555b51805160028401916001600160401b0382116107865761170e8261063185546124eb565b602090601f83116001146118665761173e9291600091836112545750508160011b916000199060031b1c19161790565b90555b600382019051948551906001600160401b038211610786576117678261063185546124eb565b602090601f83116001146118005750908061179d9260049697986000926117f55750508160011b916000199060031b1c19161790565b90555b019060018060a01b039051166001600160601b0360a01b8254161790556101346117ca8154612894565b905533907fd16733fb8c2a502f4e1d1d63970cbab355e37ff6d6d12a215b7d0197ea5535f4600080a3005b01519050888061065a565b9190601f198216908460005260206000209160005b81811061185057509883600498999a10611837575b505050811b0190556117a0565b015160001960f88460031b161c1916905587808061182a565b8a83015184559285019260209283019201611815565b889291601f198316918560005260206000209260005b8181106118b157508411611898575b505050811b019055611741565b015160001960f88460031b161c1916905588808061188b565b8284015185558c96909401936020938401930161187c565b899291601f198316918560005260206000209260005b818110611914575084116118fb575b505050811b0190556116ea565b015160001960f88460031b161c191690558980806118ee565b8284015185558d9690940193602093840193016118df565b604051631cfbd86560e21b8152600490fd5b6040516337e8456b60e01b8152600490fd5b604051635421bc3560e11b8152600490fd5b60405163e474746b60e01b8152600490fd5b3461017c57604036600319011261017c57600435611990612305565b9061199a33612a14565b80600052610130602052604060002091825415610827576001600160a01b03908116928315611a1e5760040190815416600052610131602052600060408120558260005281604060002055826001600160601b0360a01b8254161790557fd05b2e32ad9ac3239164be79bbc8a379cb9864bc907d8060ecd246aedf89fe54600080a3005b60405163078ec41b60e41b8152600490fd5b3461017c57600036600319011261017c57602060405160008152f35b3461017c57604036600319011261017c57611a65612305565b600435600052609960205260406000209060018060a01b0316600052602052602060ff604060002054166040519015158152f35b3461017c57600036600319011261017c57600180541580611ba7575b15611b6a57604051611aca8161043c81612525565b60405191611adb83610954816125d9565b60405192611ae88461234c565b60008452611b1f602091611b1160405195600f60f81b875260e0602088015260e087019061246c565b90858203604087015261246c565b466060850152306080850152600060a085015283810360c08501526020808651928381520195019160005b828110611b575785870386f35b8351875295810195928101928401611b4a565b60405162461bcd60e51b81526020600482015260156024820152741152540dcc4c8e88155b9a5b9a5d1a585b1a5e9959605a1b6044820152606490fd5b5060025415611ab5565b3461017c57602036600319011261017c576001600160a01b03611bd261231b565b166000526101316020526020604060002054604051908152f35b3461017c57600036600319011261017c57602061013354604051908152f35b3461017c57600036600319011261017c577f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03163003611c645760206040516000805160206131d68339815191528152f35b60405162461bcd60e51b815260206004820152603860248201527f555550535570677261646561626c653a206d757374206e6f742062652063616c60448201527f6c6564207468726f7567682064656c656761746563616c6c00000000000000006064820152608490fd5b604036600319011261017c57611ce361231b565b6024356001600160401b03811161017c57611d0290369060040161242b565b6001600160a01b037f000000000000000000000000000000000000000000000000000000000000000081169190611d3b3084141561272e565b611d586000805160206131d683398151915293828554161461278f565b611d6133612a14565b7f4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd91435460ff1615611d97575050506108fa90612db4565b8316604051926352d1902d60e01b84526020938481600481865afa60009181611f4e575b50611e1c5760405162461bcd60e51b815260048101869052602e60248201527f45524331393637557067726164653a206e657720696d706c656d656e7461746960448201526d6f6e206973206e6f74205555505360901b6064820152608490fd5b93929303611ef757611e2d84612db4565b7fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b600080a2815115801590611eef575b611e6357005b6108fa9260008060405194611e7786612367565b602786527f416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c85870152660819985a5b195960ca1b60408701528481519101845af4903d15611ee6573d611ec9816123d9565b90611ed760405192836123b8565b8152600081943d92013e61313c565b6060925061313c565b506001611e5d565b60405162461bcd60e51b815260048101839052602960248201527f45524331393637557067726164653a20756e737570706f727465642070726f786044820152681a58589b195555525160ba1b6064820152608490fd5b9091508581813d8311611f76575b611f6681836123b8565b8101031261017c57519087611dbb565b503d611f5c565b3461017c5760208060031936011261017c57611f9761231b565b906001600160a01b037f00000000000000000000000000000000000000000000000000000000000000008116611fcf3082141561272e565b611fec6000805160206131d683398151915291838354161461278f565b611ff533612a14565b604051916120028361234c565b600083527f4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd91435460ff161561203d57505050506108fa90612db4565b8416906040516352d1902d60e01b81528481600481865afa6000918161210d575b506120bf5760405162461bcd60e51b815260048101869052602e60248201527f45524331393637557067726164653a206e657720696d706c656d656e7461746960448201526d6f6e206973206e6f74205555505360901b6064820152608490fd5b93929303611ef7576120d084612db4565b7fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b600080a281511580159061210557611e6357005b506000611e5d565b9091508581813d8311612135575b61212581836123b8565b8101031261017c5751908761205e565b503d61211b565b3461017c57604036600319011261017c57612155612305565b336001600160a01b03821603612171576108fa9060043561299e565b60405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201526e103937b632b9903337b91039b2b63360891b6064820152608490fd5b3461017c57604036600319011261017c576004356121ea612305565b8160005260996020526122066001604060002001543390612c3d565b81600052609960205260406000209060018060a01b0316908160005260205260ff604060002054161561223557005b8160005260996020526040600020816000526020526040600020600160ff1982541617905533917f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d600080a4005b3461017c57602036600319011261017c5760043560005260996020526020600160406000200154604051908152f35b3461017c57602036600319011261017c576004359063ffffffff60e01b821680920361017c57602091637965db0b60e01b81149081156122f4575b5015158152f35b6301ffc9a760e01b149050836122ed565b602435906001600160a01b038216820361017c57565b600435906001600160a01b038216820361017c57565b60a081019081106001600160401b0382111761078657604052565b602081019081106001600160401b0382111761078657604052565b606081019081106001600160401b0382111761078657604052565b60c081019081106001600160401b0382111761078657604052565b608081019081106001600160401b0382111761078657604052565b90601f801991011681019081106001600160401b0382111761078657604052565b6001600160401b03811161078657601f01601f191660200190565b929192612400826123d9565b9161240e60405193846123b8565b82948184528183011161017c578281602093846000960137010152565b9080601f8301121561017c57816020612446933591016123f4565b90565b60005b83811061245c5750506000910152565b818101518382015260200161244c565b9060209161248581518092818552858086019101612449565b601f01601f1916010190565b35906001600160401b038216820361017c57565b604051906124b282612367565b60248252637374727960e01b6040837f5275627973636f72655f53696e676c655f4964656e7469666965725f5265676960208201520152565b90600182811c9216801561251b575b602083101461250557565b634e487b7160e01b600052602260045260246000fd5b91607f16916124fa565b60035460009291612535826124eb565b808252916020906001908181169081156125b45750600114612558575b50505050565b9293945060036000527fc2575a0e9e593c00f959f8c92f12db2869c3395a3b0502d05e2516446f71f85b926000935b8585106125a1575050506020925001019038808080612552565b8054858501840152938201938101612587565b92505050602093945060ff929192191683830152151560051b01019038808080612552565b600454600092916125e9826124eb565b808252916020906001908181169081156125b4575060011461260b5750505050565b9293945060046000527f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19b926000935b858510612654575050506020925001019038808080612552565b805485850184015293820193810161263a565b805460009392612676826124eb565b918282526020936001916001811690816000146126de575060011461269d575b5050505050565b90939495506000929192528360002092846000945b8386106126ca57505050500101903880808080612696565b8054858701830152940193859082016126b2565b60ff19168685015250505090151560051b010191503880808080612696565b60405190604082018281106001600160401b03821117610786576040526005825264302e302e3160d81b6020830152565b1561273557565b60405162461bcd60e51b815260206004820152602c60248201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060448201526b19195b1959d85d1958d85b1b60a21b6064820152608490fd5b1561279657565b60405162461bcd60e51b815260206004820152602c60248201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060448201526b6163746976652070726f787960a01b6064820152608490fd5b903590601e198136030182121561017c57018035906001600160401b03821161017c5760200191813603831361017c57565b356001600160a01b038116810361017c5790565b818110612841575050565b60008155600101612836565b9190601f811161285c57505050565b612888926000526020600020906020601f840160051c8301931061288a575b601f0160051c0190612836565b565b909150819061287b565b60001981146128a35760010190565b634e487b7160e01b600052601160045260246000fd5b9081602091031261017c575163ffffffff8116810361017c5790565b9081602091031261017c5751801515810361017c5790565b6001600160a01b031660008181527f03972a83835deae8e7b8a4c3f92b91705e59d4853626afefd46026fda30169a260205260408120549091907f97667070c54ef182b0f5858b034beac1b6f3089aa2d3188bb1e8929f4fa9b9299060ff161561295657505050565b80835260996020526040832082845260205260408320600160ff198254161790557f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d339380a4565b906000918083526099602052604083209160018060a01b03169182845260205260ff6040842054166129cf57505050565b8083526099602052604083208284526020526040832060ff1981541690557ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b339380a4565b6001600160a01b031660008181527f03972a83835deae8e7b8a4c3f92b91705e59d4853626afefd46026fda30169a26020908152604080832054909391927f97667070c54ef182b0f5858b034beac1b6f3089aa2d3188bb1e8929f4fa9b92992909160ff1615612a85575050505050565b612a8e90612f2c565b91845190612a9b8261239d565b60428252848201926060368537825115612c29576030845382519060019160011015612c295790607860218501536041915b818311612bbb57505050612b79576048612b75938693612b5993612b4a985198899376020b1b1b2b9b9a1b7b73a3937b61d1030b1b1b7bab73a1604d1b8a860152612b21815180928c603789019101612449565b8401917001034b99036b4b9b9b4b733903937b6329607d1b603784015251809386840190612449565b010360288101875201856123b8565b5192839262461bcd60e51b84526004840152602483019061246c565b0390fd5b60648486519062461bcd60e51b825280600483015260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e746044820152fd5b909192600f81166010811015612c15576f181899199a1a9b1b9c1cb0b131b232b360811b901a612beb8587612f05565b5360041c928015612c0157600019019190612acd565b634e487b7160e01b82526011600452602482fd5b634e487b7160e01b83526032600452602483fd5b634e487b7160e01b81526032600452602490fd5b600090808252602091609983526040938482209060018060a01b031690818352845260ff858320541615612c72575050505050565b612c7b90612f2c565b91845190612c888261239d565b60428252848201926060368537825115612c29576030845382519060019160011015612c295790607860218501536041915b818311612d0e57505050612b79576048612b75938693612b5993612b4a985198899376020b1b1b2b9b9a1b7b73a3937b61d1030b1b1b7bab73a1604d1b8a860152612b21815180928c603789019101612449565b909192600f81166010811015612c15576f181899199a1a9b1b9c1cb0b131b232b360811b901a612d3e8587612f05565b5360041c928015612c0157600019019190612cba565b15612d5b57565b60405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b6064820152608490fd5b803b15612de9576000805160206131d683398151915280546001600160a01b0319166001600160a01b03909216919091179055565b60405162461bcd60e51b815260206004820152602d60248201527f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60448201526c1bdd08184818dbdb9d1c9858dd609a1b6064820152608490fd5b8151919060418303612e7557612e6e92506020820151906060604084015193015160001a9061302b565b9192909190565b505060009160029190565b6004811015612eef5780612e92575050565b60018103612eac5760405163f645eedf60e01b8152600490fd5b60028103612ecd5760405163fce698f760e01b815260048101839052602490fd5b600314612ed75750565b602490604051906335e2f38360e21b82526004820152fd5b634e487b7160e01b600052602160045260246000fd5b908151811015612f16570160200190565b634e487b7160e01b600052603260045260246000fd5b60405190612f3982612367565b602a8252602082016040368237825115612f165760309053815160019060011015612f1657607860218401536029905b808211612fbd575050612f795790565b606460405162461bcd60e51b815260206004820152602060248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e746044820152fd5b9091600f81166010811015613016576f181899199a1a9b1b9c1cb0b131b232b360811b901a612fec8486612f05565b5360041c918015613001576000190190612f69565b60246000634e487b7160e01b81526011600452fd5b60246000634e487b7160e01b81526032600452fd5b91907f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a084116130af57926020929160ff608095604051948552168484015260408301526060820152600092839182805260015afa156130a35780516001600160a01b0381161561309a57918190565b50809160019190565b604051903d90823e3d90fd5b50505060009160039190565b6040516130cb8161043c81612525565b80519081156130db576020012090565b505060015480156130e95790565b507fc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a47090565b60405161311e8161043c816125d9565b805190811561312e576020012090565b505060025480156130e95790565b9192901561319e5750815115613150575090565b3b156131595790565b60405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606490fd5b8251909150156131b15750805190602001fd5b60405162461bcd60e51b815260206004820152908190612b7590602483019061246c56fe360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbca26469706673582212204ed7faf15126fe6fe1f4d781b3ecba3646b504f04b350c3e2d3479647a18bbea64736f6c63430008180033",
  "devdoc": {
    "errors": {
      "ECDSAInvalidSignature()": [
        {
          "details": "The signature derives the `address(0)`."
        }
      ],
      "ECDSAInvalidSignatureLength(uint256)": [
        {
          "details": "The signature has an invalid length."
        }
      ],
      "ECDSAInvalidSignatureS(bytes32)": [
        {
          "details": "The signature has an S value that is in the upper half order."
        }
      ]
    },
    "events": {
      "AdminChanged(address,address)": {
        "details": "Emitted when the admin account has changed."
      },
      "BeaconUpgraded(address)": {
        "details": "Emitted when the beacon is changed."
      },
      "EIP712DomainChanged()": {
        "details": "MAY be emitted to signal that the domain could have changed."
      },
      "Initialized(uint8)": {
        "details": "Triggered when the contract has been initialized or reinitialized."
      },
      "RoleAdminChanged(bytes32,bytes32,bytes32)": {
        "details": "Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole` `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite {RoleAdminChanged} not being emitted signaling this. _Available since v3.1._"
      },
      "RoleGranted(bytes32,address,address)": {
        "details": "Emitted when `account` is granted `role`. `sender` is the account that originated the contract call, an admin role bearer except when using {AccessControl-_setupRole}."
      },
      "RoleRevoked(bytes32,address,address)": {
        "details": "Emitted when `account` is revoked `role`. `sender` is the account that originated the contract call:   - if using `revokeRole`, it is the admin role bearer   - if using `renounceRole`, it is the role bearer (i.e. `account`)"
      },
      "Upgraded(address)": {
        "details": "Emitted when the implementation is upgraded."
      }
    },
    "kind": "dev",
    "methods": {
      "eip712Domain()": {
        "details": "See {EIP-5267}. _Available since v4.9._"
      },
      "getRoleAdmin(bytes32)": {
        "details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."
      },
      "grantRole(bytes32,address)": {
        "details": "Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event."
      },
      "hasRole(bytes32,address)": {
        "details": "Returns `true` if `account` has been granted `role`."
      },
      "proxiableUUID()": {
        "details": "Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the implementation. It is used to validate the implementation's compatibility when performing an upgrade. IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier."
      },
      "renounceRole(bytes32,address)": {
        "details": "Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`. May emit a {RoleRevoked} event."
      },
      "revokeRole(bytes32,address)": {
        "details": "Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event."
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      },
      "upgradeTo(address)": {
        "custom:oz-upgrades-unsafe-allow-reachable": "delegatecall",
        "details": "Upgrade the implementation of the proxy to `newImplementation`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event."
      },
      "upgradeToAndCall(address,bytes)": {
        "custom:oz-upgrades-unsafe-allow-reachable": "delegatecall",
        "details": "Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call encoded in `data`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 5146,
        "contract": "contracts/SingleIdentifierRegistry.sol:SingleIdentifierRegistry",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_uint8"
      },
      {
        "astId": 5149,
        "contract": "contracts/SingleIdentifierRegistry.sol:SingleIdentifierRegistry",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 6539,
        "contract": "contracts/SingleIdentifierRegistry.sol:SingleIdentifierRegistry",
        "label": "_hashedName",
        "offset": 0,
        "slot": "1",
        "type": "t_bytes32"
      },
      {
        "astId": 6542,
        "contract": "contracts/SingleIdentifierRegistry.sol:SingleIdentifierRegistry",
        "label": "_hashedVersion",
        "offset": 0,
        "slot": "2",
        "type": "t_bytes32"
      },
      {
        "astId": 6544,
        "contract": "contracts/SingleIdentifierRegistry.sol:SingleIdentifierRegistry",
        "label": "_name",
        "offset": 0,
        "slot": "3",
        "type": "t_string_storage"
      },
      {
        "astId": 6546,
        "contract": "contracts/SingleIdentifierRegistry.sol:SingleIdentifierRegistry",
        "label": "_version",
        "offset": 0,
        "slot": "4",
        "type": "t_string_storage"
      },
      {
        "astId": 6804,
        "contract": "contracts/SingleIdentifierRegistry.sol:SingleIdentifierRegistry",
        "label": "__gap",
        "offset": 0,
        "slot": "5",
        "type": "t_array(t_uint256)48_storage"
      },
      {
        "astId": 5815,
        "contract": "contracts/SingleIdentifierRegistry.sol:SingleIdentifierRegistry",
        "label": "__gap",
        "offset": 0,
        "slot": "53",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 6848,
        "contract": "contracts/SingleIdentifierRegistry.sol:SingleIdentifierRegistry",
        "label": "__gap",
        "offset": 0,
        "slot": "103",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 4248,
        "contract": "contracts/SingleIdentifierRegistry.sol:SingleIdentifierRegistry",
        "label": "_roles",
        "offset": 0,
        "slot": "153",
        "type": "t_mapping(t_bytes32,t_struct(RoleData)4243_storage)"
      },
      {
        "astId": 4543,
        "contract": "contracts/SingleIdentifierRegistry.sol:SingleIdentifierRegistry",
        "label": "__gap",
        "offset": 0,
        "slot": "154",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 5128,
        "contract": "contracts/SingleIdentifierRegistry.sol:SingleIdentifierRegistry",
        "label": "__gap",
        "offset": 0,
        "slot": "203",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 5443,
        "contract": "contracts/SingleIdentifierRegistry.sol:SingleIdentifierRegistry",
        "label": "__gap",
        "offset": 0,
        "slot": "253",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 14444,
        "contract": "contracts/SingleIdentifierRegistry.sol:SingleIdentifierRegistry",
        "label": "router",
        "offset": 0,
        "slot": "303",
        "type": "t_contract(SingleRouter)15559"
      },
      {
        "astId": 14449,
        "contract": "contracts/SingleIdentifierRegistry.sol:SingleIdentifierRegistry",
        "label": "schemas",
        "offset": 0,
        "slot": "304",
        "type": "t_mapping(t_bytes32,t_struct(SIDSchema)17161_storage)"
      },
      {
        "astId": 14453,
        "contract": "contracts/SingleIdentifierRegistry.sol:SingleIdentifierRegistry",
        "label": "schemaIds",
        "offset": 0,
        "slot": "305",
        "type": "t_mapping(t_address,t_bytes32)"
      },
      {
        "astId": 14458,
        "contract": "contracts/SingleIdentifierRegistry.sol:SingleIdentifierRegistry",
        "label": "singleIdentifierData",
        "offset": 0,
        "slot": "306",
        "type": "t_mapping(t_bytes32,t_struct(SID)17150_storage)"
      },
      {
        "astId": 14460,
        "contract": "contracts/SingleIdentifierRegistry.sol:SingleIdentifierRegistry",
        "label": "sidCounter",
        "offset": 0,
        "slot": "307",
        "type": "t_uint256"
      },
      {
        "astId": 14462,
        "contract": "contracts/SingleIdentifierRegistry.sol:SingleIdentifierRegistry",
        "label": "emitterCounter",
        "offset": 0,
        "slot": "308",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)48_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[48]",
        "numberOfBytes": "1536"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_bytes_storage": {
        "encoding": "bytes",
        "label": "bytes",
        "numberOfBytes": "32"
      },
      "t_contract(SingleRouter)15559": {
        "encoding": "inplace",
        "label": "contract SingleRouter",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_bytes32)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bytes32)",
        "numberOfBytes": "32",
        "value": "t_bytes32"
      },
      "t_mapping(t_bytes32,t_struct(RoleData)4243_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)",
        "numberOfBytes": "32",
        "value": "t_struct(RoleData)4243_storage"
      },
      "t_mapping(t_bytes32,t_struct(SID)17150_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct SID)",
        "numberOfBytes": "32",
        "value": "t_struct(SID)17150_storage"
      },
      "t_mapping(t_bytes32,t_struct(SIDSchema)17161_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct SIDSchema)",
        "numberOfBytes": "32",
        "value": "t_struct(SIDSchema)17161_storage"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(RoleData)4243_storage": {
        "encoding": "inplace",
        "label": "struct AccessControlUpgradeable.RoleData",
        "members": [
          {
            "astId": 4240,
            "contract": "contracts/SingleIdentifierRegistry.sol:SingleIdentifierRegistry",
            "label": "members",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_address,t_bool)"
          },
          {
            "astId": 4242,
            "contract": "contracts/SingleIdentifierRegistry.sol:SingleIdentifierRegistry",
            "label": "adminRole",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(SID)17150_storage": {
        "encoding": "inplace",
        "label": "struct SID",
        "members": [
          {
            "astId": 17135,
            "contract": "contracts/SingleIdentifierRegistry.sol:SingleIdentifierRegistry",
            "label": "SIDId",
            "offset": 0,
            "slot": "0",
            "type": "t_bytes32"
          },
          {
            "astId": 17137,
            "contract": "contracts/SingleIdentifierRegistry.sol:SingleIdentifierRegistry",
            "label": "schemaId",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          },
          {
            "astId": 17139,
            "contract": "contracts/SingleIdentifierRegistry.sol:SingleIdentifierRegistry",
            "label": "expirationDate",
            "offset": 0,
            "slot": "2",
            "type": "t_uint64"
          },
          {
            "astId": 17141,
            "contract": "contracts/SingleIdentifierRegistry.sol:SingleIdentifierRegistry",
            "label": "revocationDate",
            "offset": 8,
            "slot": "2",
            "type": "t_uint64"
          },
          {
            "astId": 17143,
            "contract": "contracts/SingleIdentifierRegistry.sol:SingleIdentifierRegistry",
            "label": "revoked",
            "offset": 16,
            "slot": "2",
            "type": "t_bool"
          },
          {
            "astId": 17145,
            "contract": "contracts/SingleIdentifierRegistry.sol:SingleIdentifierRegistry",
            "label": "user",
            "offset": 0,
            "slot": "3",
            "type": "t_address"
          },
          {
            "astId": 17147,
            "contract": "contracts/SingleIdentifierRegistry.sol:SingleIdentifierRegistry",
            "label": "data",
            "offset": 0,
            "slot": "4",
            "type": "t_bytes_storage"
          },
          {
            "astId": 17149,
            "contract": "contracts/SingleIdentifierRegistry.sol:SingleIdentifierRegistry",
            "label": "metadata",
            "offset": 0,
            "slot": "5",
            "type": "t_string_storage"
          }
        ],
        "numberOfBytes": "192"
      },
      "t_struct(SIDSchema)17161_storage": {
        "encoding": "inplace",
        "label": "struct SIDSchema",
        "members": [
          {
            "astId": 17152,
            "contract": "contracts/SingleIdentifierRegistry.sol:SingleIdentifierRegistry",
            "label": "schemaId",
            "offset": 0,
            "slot": "0",
            "type": "t_bytes32"
          },
          {
            "astId": 17154,
            "contract": "contracts/SingleIdentifierRegistry.sol:SingleIdentifierRegistry",
            "label": "name",
            "offset": 0,
            "slot": "1",
            "type": "t_string_storage"
          },
          {
            "astId": 17156,
            "contract": "contracts/SingleIdentifierRegistry.sol:SingleIdentifierRegistry",
            "label": "description",
            "offset": 0,
            "slot": "2",
            "type": "t_string_storage"
          },
          {
            "astId": 17158,
            "contract": "contracts/SingleIdentifierRegistry.sol:SingleIdentifierRegistry",
            "label": "schema",
            "offset": 0,
            "slot": "3",
            "type": "t_string_storage"
          },
          {
            "astId": 17160,
            "contract": "contracts/SingleIdentifierRegistry.sol:SingleIdentifierRegistry",
            "label": "emitter",
            "offset": 0,
            "slot": "4",
            "type": "t_address"
          }
        ],
        "numberOfBytes": "160"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint64": {
        "encoding": "inplace",
        "label": "uint64",
        "numberOfBytes": "8"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}