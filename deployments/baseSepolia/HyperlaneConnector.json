{
  "address": "0x3d52d95D58fCb53814ea37d580601D2AF2B4CC98",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_admin",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_operator",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_mailbox",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "igp",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_registry",
          "type": "address"
        },
        {
          "internalType": "uint128",
          "name": "_gasLimit",
          "type": "uint128"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "AccessControlBadConfirmation",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "neededRole",
          "type": "bytes32"
        }
      ],
      "name": "AccessControlUnauthorizedAccount",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "AddressIsZero",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "GasLimitInvalid",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "OwnableInvalidOwner",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "OwnableUnauthorizedAccount",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "eid",
          "type": "uint32"
        }
      ],
      "name": "SenderIsNotPeer",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "SenderIsNotRouter",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "previousAdminRole",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "newAdminRole",
          "type": "bytes32"
        }
      ],
      "name": "RoleAdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleRevoked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "chainId",
          "type": "address"
        }
      ],
      "name": "SetChainIds",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint32",
          "name": "connectorId",
          "type": "uint32"
        }
      ],
      "name": "SetConnectorId",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint128",
          "name": "gasLimit",
          "type": "uint128"
        }
      ],
      "name": "SetGasLimit",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "ipg",
          "type": "address"
        }
      ],
      "name": "SetIgp",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "mailbox",
          "type": "address"
        }
      ],
      "name": "SetMailbox",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "registry",
          "type": "address"
        }
      ],
      "name": "SetRegistry",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "router",
          "type": "address"
        }
      ],
      "name": "SetRouter",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "DEFAULT_ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "OPERATOR_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "connectorId",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "nativeChainId",
          "type": "uint256"
        }
      ],
      "name": "customChainIds",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "customChainId",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "gasLimit",
      "outputs": [
        {
          "internalType": "uint128",
          "name": "",
          "type": "uint128"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleAdmin",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "grantRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "_origin",
          "type": "uint32"
        },
        {
          "internalType": "bytes32",
          "name": "_sender",
          "type": "bytes32"
        },
        {
          "internalType": "bytes",
          "name": "_message",
          "type": "bytes"
        }
      ],
      "name": "handle",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "igp",
      "outputs": [
        {
          "internalType": "contract InterchainGasPaymaster",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "mailbox",
      "outputs": [
        {
          "internalType": "contract IMailbox",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "customChainId",
          "type": "uint256"
        }
      ],
      "name": "nativeChainIds",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "nativeChainId",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "_registryDst",
          "type": "uint32"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "quote",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "registry",
      "outputs": [
        {
          "internalType": "contract ISingleIdentifierRegistry",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "callerConfirmation",
          "type": "address"
        }
      ],
      "name": "renounceRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "revokeRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "router",
      "outputs": [
        {
          "internalType": "contract SingleRouter",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_registryDst",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "_payload",
          "type": "bytes"
        }
      ],
      "name": "sendMessage",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_nativeChainId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_customChainId",
          "type": "uint256"
        }
      ],
      "name": "setChainId",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "_nativeChainIds",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "_customChainIds",
          "type": "uint256[]"
        }
      ],
      "name": "setChainIds",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "_connectorId",
          "type": "uint32"
        }
      ],
      "name": "setConnectorId",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint128",
          "name": "_gasLimit",
          "type": "uint128"
        }
      ],
      "name": "setGasLimit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_igp",
          "type": "address"
        }
      ],
      "name": "setIgp",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_mailbox",
          "type": "address"
        }
      ],
      "name": "setMailbox",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_registry",
          "type": "address"
        }
      ],
      "name": "setRegistry",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_router",
          "type": "address"
        }
      ],
      "name": "setRouter",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "selector",
          "type": "bytes4"
        }
      ],
      "name": "supportMethod",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x7745ed1d9d3b06fb39fd0611ad186cac901c7fda38e4c660f8ffc9f97bf19d6f",
  "receipt": {
    "to": null,
    "from": "0x72f46FFBd3213218137015EBCcf70bFAaF619513",
    "contractAddress": "0x3d52d95D58fCb53814ea37d580601D2AF2B4CC98",
    "transactionIndex": 3,
    "gasUsed": "1605767",
    "logsBloom": "0x
    "blockHash": "0xd9a200672e7a8540e183d404dda202da71aa9b97485cce8e3b4e34351e35e98c",
    "transactionHash": "0x7745ed1d9d3b06fb39fd0611ad186cac901c7fda38e4c660f8ffc9f97bf19d6f",
    "logs": [
      {
        "transactionIndex": 3,
        "blockNumber": 18060246,
        "transactionHash": "0x7745ed1d9d3b06fb39fd0611ad186cac901c7fda38e4c660f8ffc9f97bf19d6f",
        "address": "0x3d52d95D58fCb53814ea37d580601D2AF2B4CC98",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000000d0d5ff3cfef8b7b2b1cac6b6c27fd0846c09361"
        ],
        "data": "0x",
        "logIndex": 1,
        "blockHash": "0xd9a200672e7a8540e183d404dda202da71aa9b97485cce8e3b4e34351e35e98c"
      },
      {
        "transactionIndex": 3,
        "blockNumber": 18060246,
        "transactionHash": "0x7745ed1d9d3b06fb39fd0611ad186cac901c7fda38e4c660f8ffc9f97bf19d6f",
        "address": "0x3d52d95D58fCb53814ea37d580601D2AF2B4CC98",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000000d0d5ff3cfef8b7b2b1cac6b6c27fd0846c09361",
          "0x00000000000000000000000072f46ffbd3213218137015ebccf70bfaaf619513"
        ],
        "data": "0x",
        "logIndex": 2,
        "blockHash": "0xd9a200672e7a8540e183d404dda202da71aa9b97485cce8e3b4e34351e35e98c"
      },
      {
        "transactionIndex": 3,
        "blockNumber": 18060246,
        "transactionHash": "0x7745ed1d9d3b06fb39fd0611ad186cac901c7fda38e4c660f8ffc9f97bf19d6f",
        "address": "0x3d52d95D58fCb53814ea37d580601D2AF2B4CC98",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0x97667070c54ef182b0f5858b034beac1b6f3089aa2d3188bb1e8929f4fa9b929",
          "0x00000000000000000000000072f46ffbd3213218137015ebccf70bfaaf619513",
          "0x00000000000000000000000072f46ffbd3213218137015ebccf70bfaaf619513"
        ],
        "data": "0x",
        "logIndex": 3,
        "blockHash": "0xd9a200672e7a8540e183d404dda202da71aa9b97485cce8e3b4e34351e35e98c"
      },
      {
        "transactionIndex": 3,
        "blockNumber": 18060246,
        "transactionHash": "0x7745ed1d9d3b06fb39fd0611ad186cac901c7fda38e4c660f8ffc9f97bf19d6f",
        "address": "0x3d52d95D58fCb53814ea37d580601D2AF2B4CC98",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0x97667070c54ef182b0f5858b034beac1b6f3089aa2d3188bb1e8929f4fa9b929",
          "0x000000000000000000000000381c031baa5995d0cc52386508050ac947780815",
          "0x00000000000000000000000072f46ffbd3213218137015ebccf70bfaaf619513"
        ],
        "data": "0x",
        "logIndex": 4,
        "blockHash": "0xd9a200672e7a8540e183d404dda202da71aa9b97485cce8e3b4e34351e35e98c"
      },
      {
        "transactionIndex": 3,
        "blockNumber": 18060246,
        "transactionHash": "0x7745ed1d9d3b06fb39fd0611ad186cac901c7fda38e4c660f8ffc9f97bf19d6f",
        "address": "0x3d52d95D58fCb53814ea37d580601D2AF2B4CC98",
        "topics": [
          "0x24ff87f37fffcf8010bd99a5170997e7ba0cb142148ad07cecfc1444f55bf924",
          "0x0000000000000000000000006966b0e55883d49bfb24539356a2f8a673e02039"
        ],
        "data": "0x",
        "logIndex": 5,
        "blockHash": "0xd9a200672e7a8540e183d404dda202da71aa9b97485cce8e3b4e34351e35e98c"
      },
      {
        "transactionIndex": 3,
        "blockNumber": 18060246,
        "transactionHash": "0x7745ed1d9d3b06fb39fd0611ad186cac901c7fda38e4c660f8ffc9f97bf19d6f",
        "address": "0x3d52d95D58fCb53814ea37d580601D2AF2B4CC98",
        "topics": [
          "0x1c71b0b8c071240d5960f42aa433d532b00a347608de270d2200adece7cc09a4"
        ],
        "data": "0x000000000000000000000000000000000000000000000000000000000000c350",
        "logIndex": 6,
        "blockHash": "0xd9a200672e7a8540e183d404dda202da71aa9b97485cce8e3b4e34351e35e98c"
      },
      {
        "transactionIndex": 3,
        "blockNumber": 18060246,
        "transactionHash": "0x7745ed1d9d3b06fb39fd0611ad186cac901c7fda38e4c660f8ffc9f97bf19d6f",
        "address": "0x3d52d95D58fCb53814ea37d580601D2AF2B4CC98",
        "topics": [
          "0x7a0fea380d7a6cd83f0f8ccad3c349cad10d42f760f63fd2492d5d407471a49c",
          "0x00000000000000000000000028b02b97a850872c4d33c3e024fab6499ad96564"
        ],
        "data": "0x",
        "logIndex": 7,
        "blockHash": "0xd9a200672e7a8540e183d404dda202da71aa9b97485cce8e3b4e34351e35e98c"
      }
    ],
    "blockNumber": 18060246,
    "cumulativeGasUsed": "2249829",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x0d0D5Ff3cFeF8B7B2b1cAC6B6C27Fd0846c09361",
    "0x381c031bAA5995D0Cc52386508050Ac947780815",
    "0x6966b0E55883d49BFB24539356a2f8A673E02039",
    "0x28B02B97a850872C4D33C3E024fab6499ad96564",
    "0x009DBFEe9E155766AF434ED1652CA3769B05E76f",
    50000
  ],
  "numDeployments": 1,
  "solcInputHash": "0cbf7cfbe136b839052e6e1e71a1c86a",
  "metadata": "{\"compiler\":{\"version\":\"0.8.24+commit.e11b9ed9\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_admin\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_mailbox\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"igp\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_registry\",\"type\":\"address\"},{\"internalType\":\"uint128\",\"name\":\"_gasLimit\",\"type\":\"uint128\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"AccessControlBadConfirmation\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"neededRole\",\"type\":\"bytes32\"}],\"name\":\"AccessControlUnauthorizedAccount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"AddressIsZero\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"GasLimitInvalid\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnableInvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"OwnableUnauthorizedAccount\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"eid\",\"type\":\"uint32\"}],\"name\":\"SenderIsNotPeer\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"SenderIsNotRouter\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"chainId\",\"type\":\"address\"}],\"name\":\"SetChainIds\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint32\",\"name\":\"connectorId\",\"type\":\"uint32\"}],\"name\":\"SetConnectorId\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"gasLimit\",\"type\":\"uint128\"}],\"name\":\"SetGasLimit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"ipg\",\"type\":\"address\"}],\"name\":\"SetIgp\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"mailbox\",\"type\":\"address\"}],\"name\":\"SetMailbox\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"registry\",\"type\":\"address\"}],\"name\":\"SetRegistry\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"router\",\"type\":\"address\"}],\"name\":\"SetRouter\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"OPERATOR_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"connectorId\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"nativeChainId\",\"type\":\"uint256\"}],\"name\":\"customChainIds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"customChainId\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"gasLimit\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_origin\",\"type\":\"uint32\"},{\"internalType\":\"bytes32\",\"name\":\"_sender\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"_message\",\"type\":\"bytes\"}],\"name\":\"handle\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"igp\",\"outputs\":[{\"internalType\":\"contract InterchainGasPaymaster\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mailbox\",\"outputs\":[{\"internalType\":\"contract IMailbox\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"customChainId\",\"type\":\"uint256\"}],\"name\":\"nativeChainIds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"nativeChainId\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_registryDst\",\"type\":\"uint32\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"quote\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"registry\",\"outputs\":[{\"internalType\":\"contract ISingleIdentifierRegistry\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"callerConfirmation\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"router\",\"outputs\":[{\"internalType\":\"contract SingleRouter\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_registryDst\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_payload\",\"type\":\"bytes\"}],\"name\":\"sendMessage\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_nativeChainId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_customChainId\",\"type\":\"uint256\"}],\"name\":\"setChainId\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_nativeChainIds\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_customChainIds\",\"type\":\"uint256[]\"}],\"name\":\"setChainIds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_connectorId\",\"type\":\"uint32\"}],\"name\":\"setConnectorId\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint128\",\"name\":\"_gasLimit\",\"type\":\"uint128\"}],\"name\":\"setGasLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_igp\",\"type\":\"address\"}],\"name\":\"setIgp\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_mailbox\",\"type\":\"address\"}],\"name\":\"setMailbox\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_registry\",\"type\":\"address\"}],\"name\":\"setRegistry\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_router\",\"type\":\"address\"}],\"name\":\"setRouter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"selector\",\"type\":\"bytes4\"}],\"name\":\"supportMethod\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"errors\":{\"AccessControlBadConfirmation()\":[{\"details\":\"The caller of a function is not the expected one. NOTE: Don't confuse with {AccessControlUnauthorizedAccount}.\"}],\"AccessControlUnauthorizedAccount(address,bytes32)\":[{\"details\":\"The `account` is missing a role.\"}],\"OwnableInvalidOwner(address)\":[{\"details\":\"The owner is not a valid owner account. (eg. `address(0)`)\"}],\"OwnableUnauthorizedAccount(address)\":[{\"details\":\"The caller account is not authorized to perform an operation.\"}]},\"events\":{\"RoleAdminChanged(bytes32,bytes32,bytes32)\":{\"details\":\"Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole` `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite {RoleAdminChanged} not being emitted signaling this.\"},\"RoleGranted(bytes32,address,address)\":{\"details\":\"Emitted when `account` is granted `role`. `sender` is the account that originated the contract call, an admin role bearer except when using {AccessControl-_setupRole}.\"},\"RoleRevoked(bytes32,address,address)\":{\"details\":\"Emitted when `account` is revoked `role`. `sender` is the account that originated the contract call:   - if using `revokeRole`, it is the admin role bearer   - if using `renounceRole`, it is the role bearer (i.e. `account`)\"}},\"kind\":\"dev\",\"methods\":{\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `callerConfirmation`. May emit a {RoleRevoked} event.\"},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/connectors/HyperlaneConnector.sol\":\"HyperlaneConnector\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@hyperlane-xyz/core/contracts/PackageVersioned.sol\":{\"content\":\"// SPDX-License-Identifier: MIT OR Apache-2.0\\npragma solidity >=0.6.11;\\n\\n/**\\n * @title PackageVersioned\\n * @notice Package version getter for contracts\\n **/\\nabstract contract PackageVersioned {\\n    // GENERATED CODE - DO NOT EDIT\\n    string public constant PACKAGE_VERSION = \\\"5.6.1\\\";\\n}\\n\",\"keccak256\":\"0xc4e42a532c6f0cb60ce502b81e646eb86a97835a9769b27fe8f8cd2e8ec2d352\",\"license\":\"MIT OR Apache-2.0\"},\"@hyperlane-xyz/core/contracts/hooks/igp/InterchainGasPaymaster.sol\":{\"content\":\"// SPDX-License-Identifier: MIT OR Apache-2.0\\npragma solidity >=0.8.0;\\n\\n/*@@@@@@@       @@@@@@@@@\\n @@@@@@@@@       @@@@@@@@@\\n  @@@@@@@@@       @@@@@@@@@\\n   @@@@@@@@@       @@@@@@@@@\\n    @@@@@@@@@@@@@@@@@@@@@@@@@\\n     @@@@@  HYPERLANE  @@@@@@@\\n    @@@@@@@@@@@@@@@@@@@@@@@@@\\n   @@@@@@@@@       @@@@@@@@@\\n  @@@@@@@@@       @@@@@@@@@\\n @@@@@@@@@       @@@@@@@@@\\n@@@@@@@@@       @@@@@@@@*/\\n\\n// ============ Internal Imports ============\\nimport {Message} from \\\"../../libs/Message.sol\\\";\\nimport {StandardHookMetadata} from \\\"../libs/StandardHookMetadata.sol\\\";\\nimport {IGasOracle} from \\\"../../interfaces/IGasOracle.sol\\\";\\nimport {IInterchainGasPaymaster} from \\\"../../interfaces/IInterchainGasPaymaster.sol\\\";\\nimport {IPostDispatchHook} from \\\"../../interfaces/hooks/IPostDispatchHook.sol\\\";\\nimport {AbstractPostDispatchHook} from \\\"../libs/AbstractPostDispatchHook.sol\\\";\\nimport {Indexed} from \\\"../../libs/Indexed.sol\\\";\\n\\n// ============ External Imports ============\\nimport {Strings} from \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\nimport {Address} from \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport {OwnableUpgradeable} from \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\n\\n/**\\n * @title InterchainGasPaymaster\\n * @notice Manages payments on a source chain to cover gas costs of relaying\\n * messages to destination chains and includes the gas overhead per destination\\n * @dev The intended use of this contract is to store overhead gas amounts for destination\\n * domains, e.g. Mailbox and ISM gas usage, such that users of this IGP are only required\\n * to specify the gas amount used by their own applications.\\n */\\ncontract InterchainGasPaymaster is\\n    IInterchainGasPaymaster,\\n    AbstractPostDispatchHook,\\n    IGasOracle,\\n    Indexed,\\n    OwnableUpgradeable\\n{\\n    using Address for address payable;\\n    using Message for bytes;\\n    using StandardHookMetadata for bytes;\\n    // ============ Constants ============\\n\\n    /// @notice The scale of gas oracle token exchange rates.\\n    uint256 internal constant TOKEN_EXCHANGE_RATE_SCALE = 1e10;\\n    /// @notice default for user call if metadata not provided\\n    uint256 internal immutable DEFAULT_GAS_USAGE = 50_000;\\n\\n    // ============ Public Storage ============\\n\\n    /// @notice Destination domain => gas oracle and overhead gas amount.\\n    mapping(uint32 => DomainGasConfig) public destinationGasConfigs;\\n\\n    /// @notice The benficiary that can receive native tokens paid into this contract.\\n    address public beneficiary;\\n\\n    // ============ Events ============\\n\\n    /**\\n     * @notice Emitted when the gas oracle for a remote domain is set.\\n     * @param remoteDomain The remote domain.\\n     * @param gasOracle The gas oracle.\\n     * @param gasOverhead The destination gas overhead.\\n     */\\n    event DestinationGasConfigSet(\\n        uint32 remoteDomain,\\n        address gasOracle,\\n        uint96 gasOverhead\\n    );\\n\\n    /**\\n     * @notice Emitted when the beneficiary is set.\\n     * @param beneficiary The new beneficiary.\\n     */\\n    event BeneficiarySet(address beneficiary);\\n\\n    struct DomainGasConfig {\\n        IGasOracle gasOracle;\\n        uint96 gasOverhead;\\n    }\\n\\n    struct GasParam {\\n        uint32 remoteDomain;\\n        DomainGasConfig config;\\n    }\\n\\n    // ============ External Functions ============\\n\\n    /// @inheritdoc IPostDispatchHook\\n    function hookType() external pure override returns (uint8) {\\n        return uint8(IPostDispatchHook.Types.INTERCHAIN_GAS_PAYMASTER);\\n    }\\n\\n    /**\\n     * @param _owner The owner of the contract.\\n     * @param _beneficiary The beneficiary.\\n     */\\n    function initialize(\\n        address _owner,\\n        address _beneficiary\\n    ) public initializer {\\n        __Ownable_init();\\n        _transferOwnership(_owner);\\n        _setBeneficiary(_beneficiary);\\n    }\\n\\n    /**\\n     * @notice Transfers the entire native token balance to the beneficiary.\\n     * @dev The beneficiary must be able to receive native tokens.\\n     */\\n    function claim() external {\\n        // Transfer the entire balance to the beneficiary.\\n        (bool success, ) = beneficiary.call{value: address(this).balance}(\\\"\\\");\\n        require(success, \\\"IGP: claim failed\\\");\\n    }\\n\\n    /**\\n     * @notice Sets the gas oracles for remote domains specified in the config array.\\n     * @param _configs An array of configs including the remote domain and gas oracles to set.\\n     */\\n    function setDestinationGasConfigs(\\n        GasParam[] calldata _configs\\n    ) external onlyOwner {\\n        uint256 _len = _configs.length;\\n        for (uint256 i = 0; i < _len; i++) {\\n            _setDestinationGasConfig(\\n                _configs[i].remoteDomain,\\n                _configs[i].config.gasOracle,\\n                _configs[i].config.gasOverhead\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @notice Sets the beneficiary.\\n     * @param _beneficiary The new beneficiary.\\n     */\\n    function setBeneficiary(address _beneficiary) external onlyOwner {\\n        _setBeneficiary(_beneficiary);\\n    }\\n\\n    // ============ Public Functions ============\\n\\n    /**\\n     * @notice Deposits msg.value as a payment for the relaying of a message\\n     * to its destination chain.\\n     * @dev Overpayment will result in a refund of native tokens to the _refundAddress.\\n     * Callers should be aware that this may present reentrancy issues.\\n     * @param _messageId The ID of the message to pay for.\\n     * @param _destinationDomain The domain of the message's destination chain.\\n     * @param _gasLimit The amount of destination gas to pay for.\\n     * @param _refundAddress The address to refund any overpayment to.\\n     */\\n    function payForGas(\\n        bytes32 _messageId,\\n        uint32 _destinationDomain,\\n        uint256 _gasLimit,\\n        address _refundAddress\\n    ) public payable override {\\n        uint256 _requiredPayment = quoteGasPayment(\\n            _destinationDomain,\\n            _gasLimit\\n        );\\n        require(\\n            msg.value >= _requiredPayment,\\n            \\\"IGP: insufficient interchain gas payment\\\"\\n        );\\n        uint256 _overpayment = msg.value - _requiredPayment;\\n        if (_overpayment > 0) {\\n            require(_refundAddress != address(0), \\\"no refund address\\\");\\n            payable(_refundAddress).sendValue(_overpayment);\\n        }\\n\\n        emit GasPayment(\\n            _messageId,\\n            _destinationDomain,\\n            _gasLimit,\\n            _requiredPayment\\n        );\\n    }\\n\\n    /**\\n     * @notice Quotes the amount of native tokens to pay for interchain gas.\\n     * @param _destinationDomain The domain of the message's destination chain.\\n     * @param _gasLimit The amount of destination gas to pay for.\\n     * @return The amount of native tokens required to pay for interchain gas.\\n     */\\n    function quoteGasPayment(\\n        uint32 _destinationDomain,\\n        uint256 _gasLimit\\n    ) public view virtual override returns (uint256) {\\n        // Get the gas data for the destination domain.\\n        (\\n            uint128 _tokenExchangeRate,\\n            uint128 _gasPrice\\n        ) = getExchangeRateAndGasPrice(_destinationDomain);\\n\\n        // The total cost quoted in destination chain's native token.\\n        uint256 _destinationGasCost = _gasLimit * uint256(_gasPrice);\\n\\n        // Convert to the local native token.\\n        return\\n            (_destinationGasCost * _tokenExchangeRate) /\\n            TOKEN_EXCHANGE_RATE_SCALE;\\n    }\\n\\n    /**\\n     * @notice Gets the token exchange rate and gas price from the configured gas oracle\\n     * for a given destination domain.\\n     * @param _destinationDomain The destination domain.\\n     * @return tokenExchangeRate The exchange rate of the remote native token quoted in the local native token.\\n     * @return gasPrice The gas price on the remote chain.\\n     */\\n    function getExchangeRateAndGasPrice(\\n        uint32 _destinationDomain\\n    )\\n        public\\n        view\\n        override\\n        returns (uint128 tokenExchangeRate, uint128 gasPrice)\\n    {\\n        IGasOracle _gasOracle = destinationGasConfigs[_destinationDomain]\\n            .gasOracle;\\n\\n        if (address(_gasOracle) == address(0)) {\\n            revert(\\n                string.concat(\\n                    \\\"Configured IGP doesn't support domain \\\",\\n                    Strings.toString(_destinationDomain)\\n                )\\n            );\\n        }\\n        return _gasOracle.getExchangeRateAndGasPrice(_destinationDomain);\\n    }\\n\\n    /**\\n     * @notice Returns the stored destinationGasOverhead added to the _gasLimit.\\n     * @dev If there is no stored destinationGasOverhead, 0 is used. This is useful in the case\\n     *      the ISM deployer wants to subsidize the overhead gas cost. Then, can specify the gas oracle\\n     *      they want to use with the destination domain, but set the overhead to 0.\\n     * @param _destinationDomain The domain of the message's destination chain.\\n     * @param _gasLimit The amount of destination gas to pay for. This is only for application gas usage as\\n     *      the gas usage for the mailbox and the ISM is already accounted in the DomainGasConfig.gasOverhead\\n     */\\n    function destinationGasLimit(\\n        uint32 _destinationDomain,\\n        uint256 _gasLimit\\n    ) public view returns (uint256) {\\n        return\\n            uint256(destinationGasConfigs[_destinationDomain].gasOverhead) +\\n            _gasLimit;\\n    }\\n\\n    // ============ Internal Functions ============\\n\\n    /// @inheritdoc AbstractPostDispatchHook\\n    function _postDispatch(\\n        bytes calldata metadata,\\n        bytes calldata message\\n    ) internal override {\\n        payForGas(\\n            message.id(),\\n            message.destination(),\\n            destinationGasLimit(\\n                message.destination(),\\n                metadata.gasLimit(DEFAULT_GAS_USAGE)\\n            ),\\n            metadata.refundAddress(message.senderAddress())\\n        );\\n    }\\n\\n    /// @inheritdoc AbstractPostDispatchHook\\n    function _quoteDispatch(\\n        bytes calldata metadata,\\n        bytes calldata message\\n    ) internal view override returns (uint256) {\\n        return\\n            quoteGasPayment(\\n                message.destination(),\\n                destinationGasLimit(\\n                    message.destination(),\\n                    metadata.gasLimit(DEFAULT_GAS_USAGE)\\n                )\\n            );\\n    }\\n\\n    /**\\n     * @notice Sets the beneficiary.\\n     * @param _beneficiary The new beneficiary.\\n     */\\n    function _setBeneficiary(address _beneficiary) internal {\\n        beneficiary = _beneficiary;\\n        emit BeneficiarySet(_beneficiary);\\n    }\\n\\n    /**\\n     * @notice Sets the gas oracle and destination gas overhead for a remote domain.\\n     * @param _remoteDomain The remote domain.\\n     * @param _gasOracle The gas oracle.\\n     * @param _gasOverhead The destination gas overhead.\\n     */\\n    function _setDestinationGasConfig(\\n        uint32 _remoteDomain,\\n        IGasOracle _gasOracle,\\n        uint96 _gasOverhead\\n    ) internal {\\n        destinationGasConfigs[_remoteDomain] = DomainGasConfig(\\n            _gasOracle,\\n            _gasOverhead\\n        );\\n        emit DestinationGasConfigSet(\\n            _remoteDomain,\\n            address(_gasOracle),\\n            _gasOverhead\\n        );\\n    }\\n}\\n\",\"keccak256\":\"0xa34dedcc51252f2e837ba513e39d72ad2f1a3ac3926fbdb2b6ac97f9911872af\",\"license\":\"MIT OR Apache-2.0\"},\"@hyperlane-xyz/core/contracts/hooks/libs/AbstractPostDispatchHook.sol\":{\"content\":\"// SPDX-License-Identifier: MIT OR Apache-2.0\\npragma solidity >=0.8.0;\\n\\n/*@@@@@@@       @@@@@@@@@\\n @@@@@@@@@       @@@@@@@@@\\n  @@@@@@@@@       @@@@@@@@@\\n   @@@@@@@@@       @@@@@@@@@\\n    @@@@@@@@@@@@@@@@@@@@@@@@@\\n     @@@@@  HYPERLANE  @@@@@@@\\n    @@@@@@@@@@@@@@@@@@@@@@@@@\\n   @@@@@@@@@       @@@@@@@@@\\n  @@@@@@@@@       @@@@@@@@@\\n @@@@@@@@@       @@@@@@@@@\\n@@@@@@@@@       @@@@@@@@*/\\n\\n// ============ Internal Imports ============\\nimport {StandardHookMetadata} from \\\"./StandardHookMetadata.sol\\\";\\nimport {IPostDispatchHook} from \\\"../../interfaces/hooks/IPostDispatchHook.sol\\\";\\nimport {PackageVersioned} from \\\"../../PackageVersioned.sol\\\";\\n\\n/**\\n * @title AbstractPostDispatch\\n * @notice Abstract post dispatch hook supporting the current global hook metadata variant.\\n */\\nabstract contract AbstractPostDispatchHook is\\n    IPostDispatchHook,\\n    PackageVersioned\\n{\\n    using StandardHookMetadata for bytes;\\n\\n    // ============ External functions ============\\n\\n    /// @inheritdoc IPostDispatchHook\\n    function supportsMetadata(\\n        bytes calldata metadata\\n    ) public pure virtual override returns (bool) {\\n        return\\n            metadata.length == 0 ||\\n            metadata.variant() == StandardHookMetadata.VARIANT;\\n    }\\n\\n    /// @inheritdoc IPostDispatchHook\\n    function postDispatch(\\n        bytes calldata metadata,\\n        bytes calldata message\\n    ) external payable override {\\n        require(\\n            supportsMetadata(metadata),\\n            \\\"AbstractPostDispatchHook: invalid metadata variant\\\"\\n        );\\n        _postDispatch(metadata, message);\\n    }\\n\\n    /// @inheritdoc IPostDispatchHook\\n    function quoteDispatch(\\n        bytes calldata metadata,\\n        bytes calldata message\\n    ) public view override returns (uint256) {\\n        require(\\n            supportsMetadata(metadata),\\n            \\\"AbstractPostDispatchHook: invalid metadata variant\\\"\\n        );\\n        return _quoteDispatch(metadata, message);\\n    }\\n\\n    // ============ Internal functions ============\\n\\n    /**\\n     * @notice Post dispatch hook implementation.\\n     * @param metadata The metadata of the message being dispatched.\\n     * @param message The message being dispatched.\\n     */\\n    function _postDispatch(\\n        bytes calldata metadata,\\n        bytes calldata message\\n    ) internal virtual;\\n\\n    /**\\n     * @notice Quote dispatch hook implementation.\\n     * @param metadata The metadata of the message being dispatched.\\n     * @param message The message being dispatched.\\n     * @return The quote for the dispatch.\\n     */\\n    function _quoteDispatch(\\n        bytes calldata metadata,\\n        bytes calldata message\\n    ) internal view virtual returns (uint256);\\n}\\n\",\"keccak256\":\"0xc595f5d590633e0edae3a066e572f98a152087255ecf74f56a9bcdb2033aabe5\",\"license\":\"MIT OR Apache-2.0\"},\"@hyperlane-xyz/core/contracts/hooks/libs/StandardHookMetadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT OR Apache-2.0\\npragma solidity >=0.8.0;\\n\\n/*@@@@@@@       @@@@@@@@@\\n @@@@@@@@@       @@@@@@@@@\\n  @@@@@@@@@       @@@@@@@@@\\n   @@@@@@@@@       @@@@@@@@@\\n    @@@@@@@@@@@@@@@@@@@@@@@@@\\n     @@@@@  HYPERLANE  @@@@@@@\\n    @@@@@@@@@@@@@@@@@@@@@@@@@\\n   @@@@@@@@@       @@@@@@@@@\\n  @@@@@@@@@       @@@@@@@@@\\n @@@@@@@@@       @@@@@@@@@\\n@@@@@@@@@       @@@@@@@@*/\\n\\n/**\\n * Format of metadata:\\n *\\n * [0:2] variant\\n * [2:34] msg.value\\n * [34:66] Gas limit for message (IGP)\\n * [66:86] Refund address for message (IGP)\\n * [86:] Custom metadata\\n */\\nlibrary StandardHookMetadata {\\n    struct Metadata {\\n        uint16 variant;\\n        uint256 msgValue;\\n        uint256 gasLimit;\\n        address refundAddress;\\n    }\\n\\n    uint8 private constant VARIANT_OFFSET = 0;\\n    uint8 private constant MSG_VALUE_OFFSET = 2;\\n    uint8 private constant GAS_LIMIT_OFFSET = 34;\\n    uint8 private constant REFUND_ADDRESS_OFFSET = 66;\\n    uint256 private constant MIN_METADATA_LENGTH = 86;\\n\\n    uint16 public constant VARIANT = 1;\\n\\n    /**\\n     * @notice Returns the variant of the metadata.\\n     * @param _metadata ABI encoded standard hook metadata.\\n     * @return variant of the metadata as uint8.\\n     */\\n    function variant(bytes calldata _metadata) internal pure returns (uint16) {\\n        if (_metadata.length < VARIANT_OFFSET + 2) return 0;\\n        return uint16(bytes2(_metadata[VARIANT_OFFSET:VARIANT_OFFSET + 2]));\\n    }\\n\\n    /**\\n     * @notice Returns the specified value for the message.\\n     * @param _metadata ABI encoded standard hook metadata.\\n     * @param _default Default fallback value.\\n     * @return Value for the message as uint256.\\n     */\\n    function msgValue(\\n        bytes calldata _metadata,\\n        uint256 _default\\n    ) internal pure returns (uint256) {\\n        if (_metadata.length < MSG_VALUE_OFFSET + 32) return _default;\\n        return\\n            uint256(bytes32(_metadata[MSG_VALUE_OFFSET:MSG_VALUE_OFFSET + 32]));\\n    }\\n\\n    /**\\n     * @notice Returns the specified gas limit for the message.\\n     * @param _metadata ABI encoded standard hook metadata.\\n     * @param _default Default fallback gas limit.\\n     * @return Gas limit for the message as uint256.\\n     */\\n    function gasLimit(\\n        bytes calldata _metadata,\\n        uint256 _default\\n    ) internal pure returns (uint256) {\\n        if (_metadata.length < GAS_LIMIT_OFFSET + 32) return _default;\\n        return\\n            uint256(bytes32(_metadata[GAS_LIMIT_OFFSET:GAS_LIMIT_OFFSET + 32]));\\n    }\\n\\n    /**\\n     * @notice Returns the specified refund address for the message.\\n     * @param _metadata ABI encoded standard hook metadata.\\n     * @param _default Default fallback refund address.\\n     * @return Refund address for the message as address.\\n     */\\n    function refundAddress(\\n        bytes calldata _metadata,\\n        address _default\\n    ) internal pure returns (address) {\\n        if (_metadata.length < REFUND_ADDRESS_OFFSET + 20) return _default;\\n        return\\n            address(\\n                bytes20(\\n                    _metadata[REFUND_ADDRESS_OFFSET:REFUND_ADDRESS_OFFSET + 20]\\n                )\\n            );\\n    }\\n\\n    /**\\n     * @notice Returns any custom metadata.\\n     * @param _metadata ABI encoded standard hook metadata.\\n     * @return Custom metadata.\\n     */\\n    function getCustomMetadata(\\n        bytes calldata _metadata\\n    ) internal pure returns (bytes calldata) {\\n        if (_metadata.length < MIN_METADATA_LENGTH) return _metadata[0:0];\\n        return _metadata[MIN_METADATA_LENGTH:];\\n    }\\n\\n    /**\\n     * @notice Formats the specified gas limit and refund address into standard hook metadata.\\n     * @param _msgValue msg.value for the message.\\n     * @param _gasLimit Gas limit for the message.\\n     * @param _refundAddress Refund address for the message.\\n     * @param _customMetadata Additional metadata to include in the standard hook metadata.\\n     * @return ABI encoded standard hook metadata.\\n     */\\n    function formatMetadata(\\n        uint256 _msgValue,\\n        uint256 _gasLimit,\\n        address _refundAddress,\\n        bytes memory _customMetadata\\n    ) internal pure returns (bytes memory) {\\n        return\\n            abi.encodePacked(\\n                VARIANT,\\n                _msgValue,\\n                _gasLimit,\\n                _refundAddress,\\n                _customMetadata\\n            );\\n    }\\n\\n    /**\\n     * @notice Formats the specified gas limit and refund address into standard hook metadata.\\n     * @param _msgValue msg.value for the message.\\n     * @return ABI encoded standard hook metadata.\\n     */\\n    function overrideMsgValue(\\n        uint256 _msgValue\\n    ) internal view returns (bytes memory) {\\n        return formatMetadata(_msgValue, uint256(0), msg.sender, \\\"\\\");\\n    }\\n\\n    /**\\n     * @notice Formats the specified gas limit and refund address into standard hook metadata.\\n     * @param _gasLimit Gas limit for the message.\\n     * @return ABI encoded standard hook metadata.\\n     */\\n    function overrideGasLimit(\\n        uint256 _gasLimit\\n    ) internal view returns (bytes memory) {\\n        return formatMetadata(uint256(0), _gasLimit, msg.sender, \\\"\\\");\\n    }\\n\\n    /**\\n     * @notice Formats the specified refund address into standard hook metadata.\\n     * @param _refundAddress Refund address for the message.\\n     * @return ABI encoded standard hook metadata.\\n     */\\n    function overrideRefundAddress(\\n        address _refundAddress\\n    ) internal pure returns (bytes memory) {\\n        return formatMetadata(uint256(0), uint256(0), _refundAddress, \\\"\\\");\\n    }\\n}\\n\",\"keccak256\":\"0x28e8be5b70f6b5b7c6a52c4906635639ae5ef3fe2ac970b7c30299e939b38e42\",\"license\":\"MIT OR Apache-2.0\"},\"@hyperlane-xyz/core/contracts/interfaces/IGasOracle.sol\":{\"content\":\"// SPDX-License-Identifier: MIT OR Apache-2.0\\npragma solidity >=0.8.0;\\n\\ninterface IGasOracle {\\n    struct RemoteGasData {\\n        // The exchange rate of the remote native token quoted in the local native token.\\n        // Scaled with 10 decimals, i.e. 1e10 is \\\"one\\\".\\n        uint128 tokenExchangeRate;\\n        uint128 gasPrice;\\n    }\\n\\n    function getExchangeRateAndGasPrice(\\n        uint32 _destinationDomain\\n    ) external view returns (uint128 tokenExchangeRate, uint128 gasPrice);\\n}\\n\",\"keccak256\":\"0x95d292b25a8d2dd81f5459e2e37867dd880984caa319506c7e02b64fdc91e73d\",\"license\":\"MIT OR Apache-2.0\"},\"@hyperlane-xyz/core/contracts/interfaces/IInterchainGasPaymaster.sol\":{\"content\":\"// SPDX-License-Identifier: MIT OR Apache-2.0\\npragma solidity >=0.6.11;\\n\\n/**\\n * @title IInterchainGasPaymaster\\n * @notice Manages payments on a source chain to cover gas costs of relaying\\n * messages to destination chains.\\n */\\ninterface IInterchainGasPaymaster {\\n    /**\\n     * @notice Emitted when a payment is made for a message's gas costs.\\n     * @param messageId The ID of the message to pay for.\\n     * @param destinationDomain The domain of the destination chain.\\n     * @param gasAmount The amount of destination gas paid for.\\n     * @param payment The amount of native tokens paid.\\n     */\\n    event GasPayment(\\n        bytes32 indexed messageId,\\n        uint32 indexed destinationDomain,\\n        uint256 gasAmount,\\n        uint256 payment\\n    );\\n\\n    function payForGas(\\n        bytes32 _messageId,\\n        uint32 _destinationDomain,\\n        uint256 _gasAmount,\\n        address _refundAddress\\n    ) external payable;\\n\\n    function quoteGasPayment(\\n        uint32 _destinationDomain,\\n        uint256 _gasAmount\\n    ) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xb76bb3b667ad90500a6f53939fccdab81ddb9eb056bc15991b747f1e4fa79570\",\"license\":\"MIT OR Apache-2.0\"},\"@hyperlane-xyz/core/contracts/interfaces/IInterchainSecurityModule.sol\":{\"content\":\"// SPDX-License-Identifier: MIT OR Apache-2.0\\npragma solidity >=0.6.11;\\n\\ninterface IInterchainSecurityModule {\\n    enum Types {\\n        UNUSED,\\n        ROUTING,\\n        AGGREGATION,\\n        LEGACY_MULTISIG,\\n        MERKLE_ROOT_MULTISIG,\\n        MESSAGE_ID_MULTISIG,\\n        NULL, // used with relayer carrying no metadata\\n        CCIP_READ,\\n        ARB_L2_TO_L1,\\n        WEIGHTED_MERKLE_ROOT_MULTISIG,\\n        WEIGHTED_MESSAGE_ID_MULTISIG,\\n        OP_L2_TO_L1\\n    }\\n\\n    /**\\n     * @notice Returns an enum that represents the type of security model\\n     * encoded by this ISM.\\n     * @dev Relayers infer how to fetch and format metadata.\\n     */\\n    function moduleType() external view returns (uint8);\\n\\n    /**\\n     * @notice Defines a security model responsible for verifying interchain\\n     * messages based on the provided metadata.\\n     * @param _metadata Off-chain metadata provided by a relayer, specific to\\n     * the security model encoded by the module (e.g. validator signatures)\\n     * @param _message Hyperlane encoded interchain message\\n     * @return True if the message was verified\\n     */\\n    function verify(\\n        bytes calldata _metadata,\\n        bytes calldata _message\\n    ) external returns (bool);\\n}\\n\\ninterface ISpecifiesInterchainSecurityModule {\\n    function interchainSecurityModule()\\n        external\\n        view\\n        returns (IInterchainSecurityModule);\\n}\\n\",\"keccak256\":\"0x1996b75eef35e7769ea2c6e76d4e8ae62a8db6176b1d0b5c5d2e9fcb0c237c9a\",\"license\":\"MIT OR Apache-2.0\"},\"@hyperlane-xyz/core/contracts/interfaces/IMailbox.sol\":{\"content\":\"// SPDX-License-Identifier: MIT OR Apache-2.0\\npragma solidity >=0.8.0;\\n\\nimport {IInterchainSecurityModule} from \\\"./IInterchainSecurityModule.sol\\\";\\nimport {IPostDispatchHook} from \\\"./hooks/IPostDispatchHook.sol\\\";\\n\\ninterface IMailbox {\\n    // ============ Events ============\\n    /**\\n     * @notice Emitted when a new message is dispatched via Hyperlane\\n     * @param sender The address that dispatched the message\\n     * @param destination The destination domain of the message\\n     * @param recipient The message recipient address on `destination`\\n     * @param message Raw bytes of message\\n     */\\n    event Dispatch(\\n        address indexed sender,\\n        uint32 indexed destination,\\n        bytes32 indexed recipient,\\n        bytes message\\n    );\\n\\n    /**\\n     * @notice Emitted when a new message is dispatched via Hyperlane\\n     * @param messageId The unique message identifier\\n     */\\n    event DispatchId(bytes32 indexed messageId);\\n\\n    /**\\n     * @notice Emitted when a Hyperlane message is processed\\n     * @param messageId The unique message identifier\\n     */\\n    event ProcessId(bytes32 indexed messageId);\\n\\n    /**\\n     * @notice Emitted when a Hyperlane message is delivered\\n     * @param origin The origin domain of the message\\n     * @param sender The message sender address on `origin`\\n     * @param recipient The address that handled the message\\n     */\\n    event Process(\\n        uint32 indexed origin,\\n        bytes32 indexed sender,\\n        address indexed recipient\\n    );\\n\\n    function localDomain() external view returns (uint32);\\n\\n    function delivered(bytes32 messageId) external view returns (bool);\\n\\n    function defaultIsm() external view returns (IInterchainSecurityModule);\\n\\n    function defaultHook() external view returns (IPostDispatchHook);\\n\\n    function requiredHook() external view returns (IPostDispatchHook);\\n\\n    function latestDispatchedId() external view returns (bytes32);\\n\\n    function dispatch(\\n        uint32 destinationDomain,\\n        bytes32 recipientAddress,\\n        bytes calldata messageBody\\n    ) external payable returns (bytes32 messageId);\\n\\n    function quoteDispatch(\\n        uint32 destinationDomain,\\n        bytes32 recipientAddress,\\n        bytes calldata messageBody\\n    ) external view returns (uint256 fee);\\n\\n    function dispatch(\\n        uint32 destinationDomain,\\n        bytes32 recipientAddress,\\n        bytes calldata body,\\n        bytes calldata defaultHookMetadata\\n    ) external payable returns (bytes32 messageId);\\n\\n    function quoteDispatch(\\n        uint32 destinationDomain,\\n        bytes32 recipientAddress,\\n        bytes calldata messageBody,\\n        bytes calldata defaultHookMetadata\\n    ) external view returns (uint256 fee);\\n\\n    function dispatch(\\n        uint32 destinationDomain,\\n        bytes32 recipientAddress,\\n        bytes calldata body,\\n        bytes calldata customHookMetadata,\\n        IPostDispatchHook customHook\\n    ) external payable returns (bytes32 messageId);\\n\\n    function quoteDispatch(\\n        uint32 destinationDomain,\\n        bytes32 recipientAddress,\\n        bytes calldata messageBody,\\n        bytes calldata customHookMetadata,\\n        IPostDispatchHook customHook\\n    ) external view returns (uint256 fee);\\n\\n    function process(\\n        bytes calldata metadata,\\n        bytes calldata message\\n    ) external payable;\\n\\n    function recipientIsm(\\n        address recipient\\n    ) external view returns (IInterchainSecurityModule module);\\n}\\n\",\"keccak256\":\"0x9cd728ba304279775818f8c7b4c02f8c5dd2b28e051ec466dbe36129be01a6ee\",\"license\":\"MIT OR Apache-2.0\"},\"@hyperlane-xyz/core/contracts/interfaces/hooks/IPostDispatchHook.sol\":{\"content\":\"// SPDX-License-Identifier: MIT OR Apache-2.0\\npragma solidity >=0.8.0;\\n\\n/*@@@@@@@       @@@@@@@@@\\n @@@@@@@@@       @@@@@@@@@\\n  @@@@@@@@@       @@@@@@@@@\\n   @@@@@@@@@       @@@@@@@@@\\n    @@@@@@@@@@@@@@@@@@@@@@@@@\\n     @@@@@  HYPERLANE  @@@@@@@\\n    @@@@@@@@@@@@@@@@@@@@@@@@@\\n   @@@@@@@@@       @@@@@@@@@\\n  @@@@@@@@@       @@@@@@@@@\\n @@@@@@@@@       @@@@@@@@@\\n@@@@@@@@@       @@@@@@@@*/\\n\\ninterface IPostDispatchHook {\\n    enum Types {\\n        UNUSED,\\n        ROUTING,\\n        AGGREGATION,\\n        MERKLE_TREE,\\n        INTERCHAIN_GAS_PAYMASTER,\\n        FALLBACK_ROUTING,\\n        ID_AUTH_ISM,\\n        PAUSABLE,\\n        PROTOCOL_FEE,\\n        LAYER_ZERO_V1,\\n        RATE_LIMITED,\\n        ARB_L2_TO_L1,\\n        OP_L2_TO_L1\\n    }\\n\\n    /**\\n     * @notice Returns an enum that represents the type of hook\\n     */\\n    function hookType() external view returns (uint8);\\n\\n    /**\\n     * @notice Returns whether the hook supports metadata\\n     * @param metadata metadata\\n     * @return Whether the hook supports metadata\\n     */\\n    function supportsMetadata(\\n        bytes calldata metadata\\n    ) external view returns (bool);\\n\\n    /**\\n     * @notice Post action after a message is dispatched via the Mailbox\\n     * @param metadata The metadata required for the hook\\n     * @param message The message passed from the Mailbox.dispatch() call\\n     */\\n    function postDispatch(\\n        bytes calldata metadata,\\n        bytes calldata message\\n    ) external payable;\\n\\n    /**\\n     * @notice Compute the payment required by the postDispatch call\\n     * @param metadata The metadata required for the hook\\n     * @param message The message passed from the Mailbox.dispatch() call\\n     * @return Quoted payment for the postDispatch call\\n     */\\n    function quoteDispatch(\\n        bytes calldata metadata,\\n        bytes calldata message\\n    ) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xb5df1226b2e73559f2577ef168b5f402df05b7d2bf6bd1d30baf44439aea537b\",\"license\":\"MIT OR Apache-2.0\"},\"@hyperlane-xyz/core/contracts/libs/Indexed.sol\":{\"content\":\"// SPDX-License-Identifier: MIT OR Apache-2.0\\npragma solidity >=0.8.0;\\n\\ncontract Indexed {\\n    uint256 public immutable deployedBlock;\\n\\n    constructor() {\\n        deployedBlock = block.number;\\n    }\\n}\\n\",\"keccak256\":\"0xd26c31976c35890709b1736fea29598ef9df51929066b79ceca42e155ce9867c\",\"license\":\"MIT OR Apache-2.0\"},\"@hyperlane-xyz/core/contracts/libs/Message.sol\":{\"content\":\"// SPDX-License-Identifier: MIT OR Apache-2.0\\npragma solidity >=0.8.0;\\n\\nimport {TypeCasts} from \\\"./TypeCasts.sol\\\";\\n\\n/**\\n * @title Hyperlane Message Library\\n * @notice Library for formatted messages used by Mailbox\\n **/\\nlibrary Message {\\n    using TypeCasts for bytes32;\\n\\n    uint256 private constant VERSION_OFFSET = 0;\\n    uint256 private constant NONCE_OFFSET = 1;\\n    uint256 private constant ORIGIN_OFFSET = 5;\\n    uint256 private constant SENDER_OFFSET = 9;\\n    uint256 private constant DESTINATION_OFFSET = 41;\\n    uint256 private constant RECIPIENT_OFFSET = 45;\\n    uint256 private constant BODY_OFFSET = 77;\\n\\n    /**\\n     * @notice Returns formatted (packed) Hyperlane message with provided fields\\n     * @dev This function should only be used in memory message construction.\\n     * @param _version The version of the origin and destination Mailboxes\\n     * @param _nonce A nonce to uniquely identify the message on its origin chain\\n     * @param _originDomain Domain of origin chain\\n     * @param _sender Address of sender as bytes32\\n     * @param _destinationDomain Domain of destination chain\\n     * @param _recipient Address of recipient on destination chain as bytes32\\n     * @param _messageBody Raw bytes of message body\\n     * @return Formatted message\\n     */\\n    function formatMessage(\\n        uint8 _version,\\n        uint32 _nonce,\\n        uint32 _originDomain,\\n        bytes32 _sender,\\n        uint32 _destinationDomain,\\n        bytes32 _recipient,\\n        bytes calldata _messageBody\\n    ) internal pure returns (bytes memory) {\\n        return\\n            abi.encodePacked(\\n                _version,\\n                _nonce,\\n                _originDomain,\\n                _sender,\\n                _destinationDomain,\\n                _recipient,\\n                _messageBody\\n            );\\n    }\\n\\n    /**\\n     * @notice Returns the message ID.\\n     * @param _message ABI encoded Hyperlane message.\\n     * @return ID of `_message`\\n     */\\n    function id(bytes memory _message) internal pure returns (bytes32) {\\n        return keccak256(_message);\\n    }\\n\\n    /**\\n     * @notice Returns the message version.\\n     * @param _message ABI encoded Hyperlane message.\\n     * @return Version of `_message`\\n     */\\n    function version(bytes calldata _message) internal pure returns (uint8) {\\n        return uint8(bytes1(_message[VERSION_OFFSET:NONCE_OFFSET]));\\n    }\\n\\n    /**\\n     * @notice Returns the message nonce.\\n     * @param _message ABI encoded Hyperlane message.\\n     * @return Nonce of `_message`\\n     */\\n    function nonce(bytes calldata _message) internal pure returns (uint32) {\\n        return uint32(bytes4(_message[NONCE_OFFSET:ORIGIN_OFFSET]));\\n    }\\n\\n    /**\\n     * @notice Returns the message origin domain.\\n     * @param _message ABI encoded Hyperlane message.\\n     * @return Origin domain of `_message`\\n     */\\n    function origin(bytes calldata _message) internal pure returns (uint32) {\\n        return uint32(bytes4(_message[ORIGIN_OFFSET:SENDER_OFFSET]));\\n    }\\n\\n    /**\\n     * @notice Returns the message sender as bytes32.\\n     * @param _message ABI encoded Hyperlane message.\\n     * @return Sender of `_message` as bytes32\\n     */\\n    function sender(bytes calldata _message) internal pure returns (bytes32) {\\n        return bytes32(_message[SENDER_OFFSET:DESTINATION_OFFSET]);\\n    }\\n\\n    /**\\n     * @notice Returns the message sender as address.\\n     * @param _message ABI encoded Hyperlane message.\\n     * @return Sender of `_message` as address\\n     */\\n    function senderAddress(\\n        bytes calldata _message\\n    ) internal pure returns (address) {\\n        return sender(_message).bytes32ToAddress();\\n    }\\n\\n    /**\\n     * @notice Returns the message destination domain.\\n     * @param _message ABI encoded Hyperlane message.\\n     * @return Destination domain of `_message`\\n     */\\n    function destination(\\n        bytes calldata _message\\n    ) internal pure returns (uint32) {\\n        return uint32(bytes4(_message[DESTINATION_OFFSET:RECIPIENT_OFFSET]));\\n    }\\n\\n    /**\\n     * @notice Returns the message recipient as bytes32.\\n     * @param _message ABI encoded Hyperlane message.\\n     * @return Recipient of `_message` as bytes32\\n     */\\n    function recipient(\\n        bytes calldata _message\\n    ) internal pure returns (bytes32) {\\n        return bytes32(_message[RECIPIENT_OFFSET:BODY_OFFSET]);\\n    }\\n\\n    /**\\n     * @notice Returns the message recipient as address.\\n     * @param _message ABI encoded Hyperlane message.\\n     * @return Recipient of `_message` as address\\n     */\\n    function recipientAddress(\\n        bytes calldata _message\\n    ) internal pure returns (address) {\\n        return recipient(_message).bytes32ToAddress();\\n    }\\n\\n    /**\\n     * @notice Returns the message body.\\n     * @param _message ABI encoded Hyperlane message.\\n     * @return Body of `_message`\\n     */\\n    function body(\\n        bytes calldata _message\\n    ) internal pure returns (bytes calldata) {\\n        return bytes(_message[BODY_OFFSET:]);\\n    }\\n}\\n\",\"keccak256\":\"0x5319af5ade07bcb021d6373f0713f24f34431def78cda16fea6755f580fb5e78\",\"license\":\"MIT OR Apache-2.0\"},\"@hyperlane-xyz/core/contracts/libs/TypeCasts.sol\":{\"content\":\"// SPDX-License-Identifier: MIT OR Apache-2.0\\npragma solidity >=0.6.11;\\n\\nlibrary TypeCasts {\\n    // alignment preserving cast\\n    function addressToBytes32(address _addr) internal pure returns (bytes32) {\\n        return bytes32(uint256(uint160(_addr)));\\n    }\\n\\n    // alignment preserving cast\\n    function bytes32ToAddress(bytes32 _buf) internal pure returns (address) {\\n        require(\\n            uint256(_buf) <= uint256(type(uint160).max),\\n            \\\"TypeCasts: bytes32ToAddress overflow\\\"\\n        );\\n        return address(uint160(uint256(_buf)));\\n    }\\n}\\n\",\"keccak256\":\"0xa4329f368c22062ccc725593c5c552796ce923cf66191cb9681f4f17fea8631f\",\"license\":\"MIT OR Apache-2.0\"},\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport {Initializable} from \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal onlyInitializing {\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x359a1ab89b46b9aba7bcad3fb651924baf4893d15153049b9976b0fc9be1358e\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```solidity\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n *\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized != type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\",\"keccak256\":\"0x89be10e757d242e9b18d5a32c9fbe2019f6d63052bbe46397a430a1d60d7f794\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9c80f545915582e63fe206c6ce27cbe85a86fc10b9cd2a0e8c9488fb7c2ee422\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.4) (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport {Initializable} from \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x75097e35253e7fb282ee4d7f27a80eaacfa759923185bf17302a89cbc059c5ef\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/AccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IAccessControl} from \\\"./IAccessControl.sol\\\";\\nimport {Context} from \\\"../utils/Context.sol\\\";\\nimport {ERC165} from \\\"../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```solidity\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```solidity\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it. We recommend using {AccessControlDefaultAdminRules}\\n * to enforce additional security measures for this role.\\n */\\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\\n    struct RoleData {\\n        mapping(address account => bool) hasRole;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 role => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with an {AccessControlUnauthorizedAccount} error including the required role.\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual returns (bool) {\\n        return _roles[role].hasRole[account];\\n    }\\n\\n    /**\\n     * @dev Reverts with an {AccessControlUnauthorizedAccount} error if `_msgSender()`\\n     * is missing `role`. Overriding this function changes the behavior of the {onlyRole} modifier.\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Reverts with an {AccessControlUnauthorizedAccount} error if `account`\\n     * is missing `role`.\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert AccessControlUnauthorizedAccount(account, role);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `callerConfirmation`.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function renounceRole(bytes32 role, address callerConfirmation) public virtual {\\n        if (callerConfirmation != _msgSender()) {\\n            revert AccessControlBadConfirmation();\\n        }\\n\\n        _revokeRole(role, callerConfirmation);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Attempts to grant `role` to `account` and returns a boolean indicating if `role` was granted.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual returns (bool) {\\n        if (!hasRole(role, account)) {\\n            _roles[role].hasRole[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Attempts to revoke `role` to `account` and returns a boolean indicating if `role` was revoked.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual returns (bool) {\\n        if (hasRole(role, account)) {\\n            _roles[role].hasRole[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa0e92d42942f4f57c5be50568dac11e9d00c93efcb458026e18d2d9b9b2e7308\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/IAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev The `account` is missing a role.\\n     */\\n    error AccessControlUnauthorizedAccount(address account, bytes32 neededRole);\\n\\n    /**\\n     * @dev The caller of a function is not the expected one.\\n     *\\n     * NOTE: Don't confuse with {AccessControlUnauthorizedAccount}.\\n     */\\n    error AccessControlBadConfirmation();\\n\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `callerConfirmation`.\\n     */\\n    function renounceRole(bytes32 role, address callerConfirmation) external;\\n}\\n\",\"keccak256\":\"0xb6b36edd6a2999fd243ff226d6cbf84bd71af2432bbd0dfe19392996a1d9cb41\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Context} from \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * The initial owner is set to the address provided by the deployer. This can\\n * later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    /**\\n     * @dev The caller account is not authorized to perform an operation.\\n     */\\n    error OwnableUnauthorizedAccount(address account);\\n\\n    /**\\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\\n     */\\n    error OwnableInvalidOwner(address owner);\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\\n     */\\n    constructor(address initialOwner) {\\n        if (initialOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(initialOwner);\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        if (owner() != _msgSender()) {\\n            revert OwnableUnauthorizedAccount(_msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        if (newOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xff6d0bb2e285473e5311d9d3caacb525ae3538a80758c10649a4d61029b017bb\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev The ETH balance of the account is not enough to perform the operation.\\n     */\\n    error AddressInsufficientBalance(address account);\\n\\n    /**\\n     * @dev There's no code at `target` (it is not a contract).\\n     */\\n    error AddressEmptyCode(address target);\\n\\n    /**\\n     * @dev A call to an address target failed. The target may have reverted.\\n     */\\n    error FailedInnerCall();\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.20/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        if (address(this).balance < amount) {\\n            revert AddressInsufficientBalance(address(this));\\n        }\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        if (!success) {\\n            revert FailedInnerCall();\\n        }\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason or custom error, it is bubbled\\n     * up by this function (like regular Solidity function calls). However, if\\n     * the call reverted with no returned reason, this function reverts with a\\n     * {FailedInnerCall} error.\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        if (address(this).balance < value) {\\n            revert AddressInsufficientBalance(address(this));\\n        }\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and reverts if the target\\n     * was not a contract or bubbling up the revert reason (falling back to {FailedInnerCall}) in case of an\\n     * unsuccessful call.\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata\\n    ) internal view returns (bytes memory) {\\n        if (!success) {\\n            _revert(returndata);\\n        } else {\\n            // only check if target is a contract if the call was successful and the return data is empty\\n            // otherwise we already know that it was a contract\\n            if (returndata.length == 0 && target.code.length == 0) {\\n                revert AddressEmptyCode(target);\\n            }\\n            return returndata;\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and reverts if it wasn't, either by bubbling the\\n     * revert reason or with a default {FailedInnerCall} error.\\n     */\\n    function verifyCallResult(bool success, bytes memory returndata) internal pure returns (bytes memory) {\\n        if (!success) {\\n            _revert(returndata);\\n        } else {\\n            return returndata;\\n        }\\n    }\\n\\n    /**\\n     * @dev Reverts with returndata if present. Otherwise reverts with {FailedInnerCall}.\\n     */\\n    function _revert(bytes memory returndata) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert FailedInnerCall();\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xaf28a975a78550e45f65e559a3ad6a5ad43b9b8a37366999abd1b7084eb70721\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Math} from \\\"./math/Math.sol\\\";\\nimport {SignedMath} from \\\"./math/SignedMath.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant HEX_DIGITS = \\\"0123456789abcdef\\\";\\n    uint8 private constant ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev The `value` string doesn't fit in the specified `length`.\\n     */\\n    error StringsInsufficientHexLength(uint256 value, uint256 length);\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), HEX_DIGITS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toStringSigned(int256 value) internal pure returns (string memory) {\\n        return string.concat(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMath.abs(value)));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        uint256 localValue = value;\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = HEX_DIGITS[localValue & 0xf];\\n            localValue >>= 4;\\n        }\\n        if (localValue != 0) {\\n            revert StringsInsufficientHexLength(value, length);\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal\\n     * representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return bytes(a).length == bytes(b).length && keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\",\"keccak256\":\"0x55f102ea785d8399c0e58d1108e2d289506dde18abc6db1b7f68c1f9f9bc5792\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0x9e8778b14317ba9e256c30a76fd6c32b960af621987f56069e1e819c77c6a133\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x4296879f55019b23e135000eb36896057e7101fb7fb859c5ef690cf14643757b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    /**\\n     * @dev Muldiv operation overflow.\\n     */\\n    error MathOverflowedMulDiv();\\n\\n    enum Rounding {\\n        Floor, // Toward negative infinity\\n        Ceil, // Toward positive infinity\\n        Trunc, // Toward zero\\n        Expand // Away from zero\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds towards infinity instead\\n     * of rounding towards zero.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (b == 0) {\\n            // Guarantee the same behavior as in a regular Solidity division.\\n            return a / b;\\n        }\\n\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or\\n     * denominator == 0.\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv) with further edits by\\n     * Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0 = x * y; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            if (denominator <= prod1) {\\n                revert MathOverflowedMulDiv();\\n            }\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator.\\n            // Always >= 1. See https://cs.stackexchange.com/q/138556/92363.\\n\\n            uint256 twos = denominator & (0 - denominator);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also\\n            // works in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (unsignedRoundsUp(rounding) && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded\\n     * towards zero.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (unsignedRoundsUp(rounding) && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (unsignedRoundsUp(rounding) && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (unsignedRoundsUp(rounding) && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (unsignedRoundsUp(rounding) && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns whether a provided rounding mode is considered rounding up for unsigned integers.\\n     */\\n    function unsignedRoundsUp(Rounding rounding) internal pure returns (bool) {\\n        return uint8(rounding) % 2 == 1;\\n    }\\n}\\n\",\"keccak256\":\"0x005ec64c6313f0555d59e278f9a7a5ab2db5bdc72a027f255a37c327af1ec02d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SignedMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x5f7e4076e175393767754387c962926577f1660dd9b810187b9002407656be72\",\"license\":\"MIT\"},\"contracts/SingleRouter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity =0.8.24;\\n\\nimport {IConnector} from \\\"./interfaces/IConnector.sol\\\";\\nimport {Destination} from \\\"./types/Structs.sol\\\";\\nimport {AccessControl} from \\\"@openzeppelin/contracts/access/AccessControl.sol\\\";\\n\\n\\ncontract SingleRouter is AccessControl {\\n    bytes32 public constant OPERATOR_ROLE = keccak256(\\\"OPERATOR_ROLE\\\");\\n\\n    address[] public connectorsList;\\n\\n    mapping(uint32 connectorId => IConnector connector) public connectors;\\n    mapping(uint256 chainId => mapping(uint32 connectorId => bytes32 peer)) public peers;\\n\\n    function getRoute(uint32 _connectorId, uint256 _destinationChainId) external view returns (IConnector) {\\n        IConnector connector;\\n\\n        if (block.chainid == _destinationChainId) {\\n            connector = connectors[0];\\n        } else {\\n            connector = connectors[_connectorId];\\n        }\\n\\n        return connector;\\n    }\\n\\n    function getPeer(uint32 _connectorId, uint256 _chainId) external view returns (bytes32) {\\n        bytes32 peer = peers[_chainId][_connectorId];\\n        if (peer == bytes32(0)) revert PeerNotExist(_chainId);\\n\\n        return peer;\\n    }\\n\\n    function isAvailablePeer(uint256 _chainId, uint32 _connectorId, address _sender) external view returns (bool) {\\n        bytes32 senderInBytes32 = bytes32(uint256(uint160(_sender)));\\n\\n        bytes32 peer = peers[_chainId][_connectorId];\\n\\n        return senderInBytes32 == peer;\\n    }\\n\\n    event PeerSet(uint256 indexed chainId, uint32 indexed _connectorId, bytes32 peer);\\n    event SetConnector(uint32 indexed connectorId, address indexed transferProtocol);\\n    event SetProtocolChainId(uint32 protocolChainId, uint256 chainId);\\n\\n    error PeerNotExist(uint256 chainId);\\n    error PeerInvalid();\\n\\n    constructor(address _operator) {\\n\\n        _grantRole(OPERATOR_ROLE, msg.sender);\\n        _grantRole(OPERATOR_ROLE, _operator);\\n    }\\n\\n    function setPeer(uint256 _chainId, uint32 _connectorId, bytes32 _peer) external onlyRole(OPERATOR_ROLE) {\\n        _setPeer(_chainId, _connectorId, _peer);\\n    }\\n\\n    function setPeers(uint32 _connectorId, uint256[]  calldata _chainIds, bytes32[]  calldata _peers) external onlyRole(OPERATOR_ROLE) {\\n        require(_chainIds.length == _peers.length, \\\"Invalid arrays length.\\\");\\n\\n        for (uint256 i = 0; i < _chainIds.length; i++) {\\n            _setPeer(_chainIds[i], _connectorId, _peers[i]);\\n        }\\n    }\\n\\n    function setConnectors(uint32[] calldata _connectorIds, address[] calldata _connectors) external onlyRole(OPERATOR_ROLE) {\\n        require(_connectorIds.length == _connectors.length, \\\"Invalid arrays length.\\\");\\n\\n        for (uint256 i = 0; i < _connectors.length; i++) {\\n            _setConnector(_connectorIds[i], _connectors[i]);\\n        }\\n    }\\n\\n    function setConnector(uint32 connectorId, address _connector) external onlyRole(OPERATOR_ROLE) {\\n        _setConnector(connectorId, _connector);\\n    }\\n\\n    function _setConnector(uint32 _connectorId, address _connector) private {\\n        connectors[_connectorId] = IConnector(_connector);\\n\\n        IConnector(_connector).setConnectorId(_connectorId);\\n        emit SetConnector(_connectorId, _connector);\\n    }\\n\\n    function _setConnector(address _connector) private {\\n        uint32 connectorId = uint32(connectorsList.length);\\n\\n        connectors[connectorId] = IConnector(_connector);\\n\\n        IConnector(_connector).setConnectorId(connectorId);\\n        emit SetConnector(connectorId, _connector);\\n    }\\n\\n    function _setPeer(uint256 _chainId, uint32 _connectorId, bytes32 _peer) private {\\n        if (_peer == bytes32(0)) revert PeerInvalid();\\n\\n        peers[_chainId][_connectorId] = _peer;\\n        emit PeerSet(_chainId, _connectorId, _peer);\\n    }\\n}\\n\",\"keccak256\":\"0xc16d153092e9fefb68faa2a86bbfd833d0eecabe05a08155d65c194673438704\",\"license\":\"MIT\"},\"contracts/connectors/BaseConnector.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity =0.8.24;\\n\\nimport {SingleRouter} from \\\"../SingleRouter.sol\\\";\\nimport {MessageLib} from \\\"../lib/MessageLib.sol\\\";\\nimport {AccessControl} from \\\"@openzeppelin/contracts/access/AccessControl.sol\\\";\\nimport {ISingleIdentifierRegistry} from \\\"../interfaces/ISingleIdentifierRegistry.sol\\\";\\n\\nabstract contract BaseConnector is AccessControl {\\n    bytes32 public constant OPERATOR_ROLE = keccak256(\\\"OPERATOR_ROLE\\\");\\n    SingleRouter public router;\\n    ISingleIdentifierRegistry public registry;\\n    uint32 public connectorId;\\n\\n    mapping(uint256 nativeChainId => uint256 customChainId) public customChainIds;\\n    mapping(uint256 customChainId => uint256 nativeChainId) public nativeChainIds;\\n\\n    event SetRouter(address indexed router);\\n    event SetRegistry(address indexed registry);\\n    event SetChainIds(address indexed chainId);\\n    event SetConnectorId(uint32 indexed connectorId);\\n\\n    error SenderIsNotPeer(uint32 eid);\\n    error SenderIsNotRouter(address sender);\\n    error AddressIsZero();\\n\\n    constructor(address _admin, address _operator, address _registry) {\\n        _grantRole(DEFAULT_ADMIN_ROLE, _admin);\\n        _grantRole(OPERATOR_ROLE, msg.sender);\\n        _grantRole(OPERATOR_ROLE, _operator);\\n\\n        _setRegistry(_registry);\\n    }\\n\\n    function setRegistry(address _registry) external onlyRole(OPERATOR_ROLE) {\\n        _setRegistry(_registry);\\n        emit SetRegistry(_registry);\\n    }\\n\\n    function setRouter(address _router) external onlyRole(OPERATOR_ROLE) {\\n        if (_router == address(0)) revert AddressIsZero();\\n\\n        router = SingleRouter(_router);\\n        emit SetRouter(_router);\\n    }\\n\\n    function setChainIds(uint256[] calldata _nativeChainIds, uint256[] calldata _customChainIds) external onlyRole(OPERATOR_ROLE) {\\n        require(_nativeChainIds.length == _customChainIds.length, \\\"Invalid arrays length.\\\");\\n\\n        for (uint256 i = 0; i < _nativeChainIds.length; i++) {\\n            _setChainId(_nativeChainIds[i], customChainIds[i]);\\n        }\\n    }\\n\\n    function setChainId(uint256 _nativeChainId, uint256 _customChainId) external onlyRole(OPERATOR_ROLE) {\\n        nativeChainIds[_customChainId] = _nativeChainId;\\n        nativeChainIds[_nativeChainId] = _customChainId;\\n    }\\n\\n    function setConnectorId(uint32 _connectorId) external {\\n        if (msg.sender != address(router)) revert SenderIsNotRouter(msg.sender);\\n\\n        connectorId = _connectorId;\\n        emit SetConnectorId(_connectorId);\\n    }\\n\\n    function _setChainId(uint256 _nativeChainId, uint256 _customChainId) private {\\n        nativeChainIds[_customChainId] = _nativeChainId;\\n        nativeChainIds[_nativeChainId] = _customChainId;\\n    }\\n\\n    function _setRegistry(address _registry) private {\\n        if (_registry == address(0)) revert AddressIsZero();\\n\\n        registry = ISingleIdentifierRegistry(_registry);\\n    }\\n\\n    function supportMethod(bytes4 selector) external pure virtual returns (bool);\\n}\\n\",\"keccak256\":\"0xb02c444ddda04e7091e7b67aadb8fa1684289e5898c0a7dfe54bf09cb36f7685\",\"license\":\"MIT\"},\"contracts/connectors/HyperlaneConnector.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity =0.8.24;\\n\\nimport {Ownable} from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport {IMailbox} from \\\"@hyperlane-xyz/core/contracts/interfaces/IMailbox.sol\\\";\\nimport {InterchainGasPaymaster} from \\\"@hyperlane-xyz/core/contracts/hooks/igp/InterchainGasPaymaster.sol\\\";\\nimport {MessageLib} from \\\"../lib/MessageLib.sol\\\";\\nimport {BaseConnector} from \\\"./BaseConnector.sol\\\";\\n\\ncontract HyperlaneConnector is Ownable, BaseConnector {\\n\\n    IMailbox public mailbox;\\n    InterchainGasPaymaster public igp;\\n    uint128 public gasLimit;\\n\\n    event SetMailbox(address indexed mailbox);\\n    event SetIgp(address indexed ipg);\\n    event SetGasLimit(uint128 gasLimit);\\n\\n    error GasLimitInvalid();\\n\\n    function quote(uint32 _registryDst, bytes memory /*_payload*/) public virtual view returns (uint256) {\\n        uint32 destination = uint32(customChainIds[_registryDst]);\\n        uint256 gasPayment = igp.quoteGasPayment(destination, gasLimit);\\n\\n        return gasPayment;\\n    }\\n\\n    function supportMethod(bytes4 selector) external pure override returns (bool) {\\n        return selector == this.handle.selector;\\n    }\\n\\n    constructor(address _admin, address _operator, address _mailbox, address igp, address _registry, uint128 _gasLimit) BaseConnector(_admin, _operator, _registry) Ownable(_admin) {\\n        _setMailbox(_mailbox);\\n        _setGasLimit(_gasLimit);\\n        _setIgp(igp);\\n    }\\n\\n    function handle(uint32 _origin, bytes32 _sender, bytes calldata _message) external {\\n        require(msg.sender == address(mailbox), \\\"ChainRumble: caller is not mailbox\\\");\\n\\n        uint256 srcChainId = nativeChainIds[uint256(_origin)];\\n        bytes32 peer = router.getPeer(connectorId, srcChainId);\\n\\n        require(_sender == peer, \\\"ChainRumble: sender is not peer\\\");\\n\\n        MessageLib.DecodedMessage memory decodedPayload = MessageLib.decodeMessage(_message);\\n\\n        if (decodedPayload.messageType == MessageLib.MessageType.TYPE_SEND_REGISTER) {\\n            registry.registrySID(decodedPayload.sendMessage);\\n        } else if (decodedPayload.messageType == MessageLib.MessageType.TYPE_SEND_UPDATE) {\\n            registry.updateSID(decodedPayload.renewalMessage);\\n        }\\n    }\\n\\n    function sendMessage(uint256 _registryDst, bytes calldata _payload) external payable {\\n        uint32 destination = uint32(customChainIds[_registryDst]);\\n        bytes32 peer = router.getPeer(connectorId, _registryDst);\\n\\n        IMailbox(mailbox).dispatch{value: msg.value}(destination, peer, _payload, \\\"\\\");\\n    }\\n\\n    function setMailbox(address _mailbox) external onlyOwner {\\n        _setMailbox(_mailbox);\\n    }\\n\\n    function setIgp(address _igp) external onlyOwner {\\n        _setIgp(_igp);\\n    }\\n\\n    function setGasLimit(uint128 _gasLimit) external onlyOwner {\\n        _setGasLimit(_gasLimit);\\n    }\\n\\n    function _setMailbox(address _mailbox) private {\\n        if (_mailbox == address(0)) revert AddressIsZero();\\n\\n        mailbox = IMailbox(_mailbox);\\n        emit SetMailbox(_mailbox);\\n    }\\n\\n    function _setIgp(address _igp) private {\\n        if (_igp == address(0)) revert AddressIsZero();\\n\\n        igp = InterchainGasPaymaster(_igp);\\n        emit SetIgp(_igp);\\n    }\\n\\n    function _setGasLimit(uint128 _gasLimit) private {\\n        if (_gasLimit == 0) revert GasLimitInvalid();\\n\\n        gasLimit = _gasLimit;\\n        emit SetGasLimit(_gasLimit);\\n    }\\n}\\n\",\"keccak256\":\"0xa8bed24d1ad990c74bd6666ed785c1561a78abead1c6b0ef00fb4c3c90a61474\",\"license\":\"MIT\"},\"contracts/interfaces/IConnector.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity =0.8.24;\\n\\ninterface IConnector {\\n\\n    function sendMessage(uint256 _registryDst, bytes calldata _payload) external payable;\\n\\n    function quote(uint256 _registryDst, bytes memory _payload) external view returns (uint256);\\n\\n    function getProtocolId() external view returns (bytes32);\\n\\n    function getDestinationChainId(uint256 nativeChainId) external view returns (uint256);\\n\\n    function setConnectorId(uint32 _connectorId) external;\\n\\n    function connectorId() external view returns (uint32);\\n}\\n\",\"keccak256\":\"0x82b004b53b048e3ee386962fcf3362f53282da8a122018dcd841f7092cbdd7df\",\"license\":\"MIT\"},\"contracts/interfaces/ISingleIdentifierRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity =0.8.24;\\n\\nimport {SIDSchema, SID} from \\\"../types/Structs.sol\\\";\\nimport {MessageLib} from \\\"../lib/MessageLib.sol\\\";\\n\\ninterface ISingleIdentifierRegistry {\\n\\n    function registrySID(MessageLib.SendMessage memory _payload) external;\\n\\n    function updateSID(MessageLib.UpdateMessage memory _payload) external;\\n\\n    function schemaRegistry(SIDSchema calldata _passportSchema, bytes calldata _signature) external;\\n\\n    function updateSchemaEmitter(bytes32 _schemaId, address _emitter) external;\\n\\n    function revoke(bytes32 _passportId) external;\\n}\\n\",\"keccak256\":\"0x126fab85543450d721389c70be5d4cc079ba9cac069f1e956ce78b86e0f4a0bd\",\"license\":\"MIT\"},\"contracts/lib/MessageLib.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity =0.8.24;\\n\\nlibrary MessageLib {\\n\\n    struct SendMessage {\\n        bytes32 schemaId;\\n        address user;\\n        uint64 expirationDate;\\n        bytes data;\\n        string metadata;\\n    }\\n\\n    struct UpdateMessage {\\n        bytes32 id;\\n        uint64 expirationDate;\\n        bytes data;\\n        string metadata;\\n    }\\n\\n    enum MessageType {TYPE_SEND_REGISTER, TYPE_SEND_UPDATE}\\n\\n    struct DecodedMessage {\\n        MessageType messageType;\\n        SendMessage sendMessage;\\n        UpdateMessage renewalMessage;\\n    }\\n\\n    uint8 public constant TYPE_SEND_REGISTER = 1;\\n    uint8 public constant TYPE_SEND_UPDATE = 2;\\n\\n    function encodeMessage(SendMessage memory _message) internal pure returns (bytes memory) {\\n        return abi.encode(TYPE_SEND_REGISTER, _message.schemaId, _message.user, _message.expirationDate, _message.data, _message.metadata);\\n    }\\n\\n    function encodeMessage(UpdateMessage memory _message) internal pure returns (bytes memory) {\\n        return abi.encode(TYPE_SEND_UPDATE, _message.id, _message.expirationDate, _message.data, _message.metadata);\\n    }\\n\\n    function decodeMessage(bytes memory _rawData) internal pure returns (DecodedMessage memory) {\\n        uint8 messageType;\\n        assembly {\\n            messageType := mload(add(_rawData, 1))\\n        }\\n\\n        if (messageType == TYPE_SEND_REGISTER) {\\n            (,bytes32 schemaId,\\n                address user,\\n                uint64 expirationDate,\\n                bytes memory registerData,\\n                string memory metadata\\n            ) = abi.decode(_rawData, (uint8, bytes32, address, uint64, bytes, string));\\n\\n            SendMessage memory sendMessage = SendMessage(schemaId, user, expirationDate, registerData, metadata);\\n            return DecodedMessage(MessageType.TYPE_SEND_REGISTER, sendMessage, UpdateMessage(bytes32(0), 0, \\\"\\\", \\\"\\\"));\\n        } else if (messageType == TYPE_SEND_UPDATE) {\\n            (, bytes32 id, uint64 expirationDate, bytes memory updateData, string memory metadata) = abi.decode(_rawData, (uint8, bytes32, uint64, bytes, string));\\n\\n            UpdateMessage memory renewalMessage = UpdateMessage(id, expirationDate, updateData, metadata);\\n            return DecodedMessage(MessageType.TYPE_SEND_UPDATE, SendMessage(bytes32(0), address(0), 0, \\\"\\\", \\\"\\\"), renewalMessage);\\n        } else {\\n            revert(\\\"Unknown message type\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x94b769e8d5657230bc15e5d5b96741a783f2453dfa0de54506d86648e241ea79\",\"license\":\"MIT\"},\"contracts/types/Structs.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity =0.8.24;\\n\\n    struct SID {\\n        bytes32 SIDId;\\n        bytes32 schemaId;\\n        uint64 expirationDate;\\n        uint64 revocationDate;\\n        bool revoked;\\n        address user;\\n        bytes data;\\n        string metadata;\\n    }\\n\\n    struct SIDSchema {\\n        bytes32 schemaId;\\n        string name;\\n        string description;\\n        string schema;\\n        address emitter;\\n    }\\n\\n    struct Emitter {\\n        bytes32 emitterId;\\n        bytes32 schemaId;\\n        uint64 expirationDate;\\n        uint256 fee;\\n        uint256 registryChainId;\\n        address owner;\\n    }\\n\\n    struct Destination {\\n        uint256 chainId;\\n        uint32 layerZero;\\n        uint32 hyperlane;\\n    }\\n\\n    struct Peers {\\n        bytes32 sender;\\n        bytes32 receiver;\\n    }\\n\",\"keccak256\":\"0x92f3154973a3fdf4df4e5e8af680e6dc0c4f660c70d1a06425b23b259f55a7f1\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x6080346200025357601f62001c1f38819003918201601f191683019291906001600160401b0384118385101762000258578160c09284926040968752833981010312620002535762000051816200026e565b9162000060602083016200026e565b916200006e8282016200026e565b6200007c606083016200026e565b9060a06200008d608085016200026e565b9301516001600160801b038116919082900362000253576001600160a01b038781169690949087156200023b57600080546001600160a01b03198082168b178355919a9199889493929185167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08d80a3620001089062000283565b50620001143362000304565b50620001209062000304565b501680156200022a579084918760035416176003551680156200021957808660065416176006558451907f24ff87f37fffcf8010bd99a5170997e7ba0cb142148ad07cecfc1444f55bf9248880a281156200020a5750600880546001600160801b0319168217905583519081527f1c71b0b8c071240d5960f42aa433d532b00a347608de270d2200adece7cc09a490602090a116918215620001f95790827f7a0fea380d7a6cd83f0f8ccad3c349cad10d42f760f63fd2492d5d407471a49c926007541617600755519280a26118579081620003a88239f35b815163867915ab60e01b8152600490fd5b632b2acf8b60e01b8152600490fd5b845163867915ab60e01b8152600490fd5b855163867915ab60e01b8152600490fd5b8651631e4fbdf760e01b815260006004820152602490fd5b600080fd5b634e487b7160e01b600052604160045260246000fd5b51906001600160a01b03821682036200025357565b6001600160a01b031660008181527fa6eef7e35abe7026729641147f7915573c7e97b47efa546f5f6e3230263bcb49602052604081205490919060ff16620003005781805260016020526040822081835260205260408220600160ff19825416179055339160008051602062001bff8339815191528180a4600190565b5090565b6001600160a01b031660008181527f31c1e66639f421f1853aeefe8ad6b62a3b96f3287efe23106923cd924aa025c260205260408120549091907f97667070c54ef182b0f5858b034beac1b6f3089aa2d3188bb1e8929f4fa9b9299060ff16620003a25780835260016020526040832082845260205260408320600160ff1982541617905560008051602062001bff833981519152339380a4600190565b50509056fe6080604052600436101561001257600080fd5b60003560e01c806301ffc9a7146102075780630c6a04371461020257806321f93b1e146101fd578063248a9ca3146101f85780632f2ff15d146101f35780633152d807146101ee57806336568abe146101e957806337528ffa146101e45780633e42d4a4146101df5780634214d2e5146101da57806356d5d475146101d55780636d4c9cd6146101d0578063715018a6146101cb5780637b103999146101c65780638da5cb5b146101c157806391d14854146101bc578063a1da9dae146101b7578063a217fddf146101b2578063a91ee0dc146101ad578063b00899cf146101a8578063b3d63288146101a3578063c0d786551461019e578063d5438eae14610199578063d547741f14610194578063e289adcd1461018f578063f28b2daa1461018a578063f2fde38b14610185578063f3c61d6b14610180578063f5b541a61461017b578063f68016b7146101765763f887ea401461017157600080fd5b611072565b61104b565b611010565b610fa3565b610f17565b610eee565b610db4565b610d72565b610d49565b610cdc565b610cb5565b610c89565b610c1c565b610c00565b610b7c565b610b26565b610afd565b610ad4565b610a76565b610a3f565b610843565b6106f5565b6105c1565b610532565b6104d4565b610455565b610413565b6103d3565b610394565b6102ac565b610234565b602090600319011261022f576004356001600160e01b03198116810361022f5790565b600080fd5b3461022f5760206001600160e01b031961024d3661020c565b16637965db0b60e01b811490811561026b575b506040519015158152f35b6301ffc9a760e01b14905038610260565b9181601f8401121561022f578235916001600160401b03831161022f576020808501948460051b01011161022f57565b3461022f57604036600319011261022f576001600160401b0360043581811161022f576102dd90369060040161027c565b909160243590811161022f576102f790369060040161027c565b90506103016112c9565b81036103565760005b81811061031357005b8061035061032d6001936000526004602052604060002090565b548260051b86013581600052600560205280604060002055600052604060002055565b0161030a565b60405162461bcd60e51b815260206004820152601660248201527524b73b30b634b21030b93930bcb9903632b733ba341760511b6044820152606490fd5b3461022f57604036600319011261022f576103ad6112c9565b6103d160243560043581600052600560205280604060002055600052604060002055565b005b3461022f57602036600319011261022f5760043560005260016020526020600160406000200154604051908152f35b6001600160a01b0381160361022f57565b3461022f57604036600319011261022f576103d160243560043561043682610402565b806000526001602052610450600160406000200154611345565b611366565b3461022f57602036600319011261022f5760043561047281610402565b61047a611400565b6001600160a01b031680156104c257600780546001600160a01b031916821790557f7a0fea380d7a6cd83f0f8ccad3c349cad10d42f760f63fd2492d5d407471a49c600080a2005b60405163867915ab60e01b8152600490fd5b3461022f57604036600319011261022f576024356104f181610402565b336001600160a01b0382160361050d576103d19060043561142c565b60405163334bd91960e11b8152600490fd5b6004359063ffffffff8216820361022f57565b3461022f57602036600319011261022f5761054b61051f565b6002546001600160a01b031633036105a9576003805463ffffffff60a01b191660a083901b63ffffffff60a01b1617905563ffffffff167f47333240c37caed3a1253ddbea098806bb1baf7280274b495d478f95b28dd06d600080a2005b604051633d5e603f60e01b8152336004820152602490fd5b3461022f5760206356d5d47560e01b6001600160e01b03196105e23661020c565b1614604051908152f35b634e487b7160e01b600052604160045260246000fd5b6001600160401b03811161061557604052565b6105ec565b608081019081106001600160401b0382111761061557604052565b90601f801991011681019081106001600160401b0382111761061557604052565b604051906106638261061a565b565b6040519060a082018281106001600160401b0382111761061557604052565b60405190606082018281106001600160401b0382111761061557604052565b6001600160401b03811161061557601f01601f191660200190565b9291926106ca826106a3565b916106d86040519384610635565b82948184528183011161022f578281602093846000960137010152565b3461022f57604036600319011261022f5761070e61051f565b6024356001600160401b03811161022f573660238201121561022f576107b79161074460209236906024816004013591016106be565b5063ffffffff809116600052600482526040600020541661077b61076f60075460018060a01b031690565b6001600160a01b031690565b60085460405163a692979360e01b815263ffffffff9390931660048401526001600160801b031660248301529092839190829081906044820190565b03915afa8015610811576107de916000916107e2575b506040519081529081906020820190565b0390f35b610804915060203d60201161080a575b6107fc8183610635565b81019061109b565b386107cd565b503d6107f2565b6110aa565b9181601f8401121561022f578235916001600160401b03831161022f576020838186019501011161022f57565b3461022f57606036600319011261022f5761085c61051f565b6044356001600160401b03811161022f5761087e61090b913690600401610816565b906108a061089961076f61076f60065460018060a01b031690565b33146110b6565b60206108bd63ffffffff8096166000526005602052604060002090565b546002546108d3906001600160a01b031661076f565b6003549660405180978194829363bd3eb98f60e01b84528b60a01c16600484016020909392919363ffffffff60408201951681520152565b03915afa9182156108115761093361093a9361093f95600091610a20575b506024351461110d565b36916106be565b611695565b90815161094b81611159565b61095481611159565b6109c55750600354602090610971906001600160a01b031661076f565b91015190803b1561022f5760405163797266f560e11b81529160009183918290849082906109a29060048301611216565b03925af18015610811576109b257005b806109bf6103d192610602565b80610a6b565b600182516109d281611159565b6109db81611159565b146109e257005b60409190910151906001600160a01b0316803b1561022f576040516328f2f2c960e21b81529160009183918290849082906109a290600483016111c1565b610a39915060203d60201161080a576107fc8183610635565b38610929565b3461022f57602036600319011261022f5760043560005260046020526020604060002054604051908152f35b600091031261022f57565b3461022f57600080600319360112610ad157610a90611400565b80546001600160a01b03198116825581906001600160a01b03167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08280a380f35b80fd5b3461022f57600036600319011261022f576003546040516001600160a01b039091168152602090f35b3461022f57600036600319011261022f576000546040516001600160a01b039091168152602090f35b3461022f57604036600319011261022f57602060ff610b70602435610b4a81610402565b6004356000526001845260406000209060018060a01b0316600052602052604060002090565b54166040519015158152f35b3461022f57602036600319011261022f576004356001600160801b03811680910361022f57610ba9611400565b8015610bee576020817f1c71b0b8c071240d5960f42aa433d532b00a347608de270d2200adece7cc09a4926001600160801b03196008541617600855604051908152a1005b604051632b2acf8b60e01b8152600490fd5b3461022f57600036600319011261022f57602060405160008152f35b3461022f57602036600319011261022f57600435610c3981610402565b610c416112c9565b6001600160a01b031680156104c257600380546001600160a01b031916821790557f278c70ced5f3e0e5eeb385b5ff9cb735748ba00a625147e66065ed48fc1562cd600080a2005b3461022f57602036600319011261022f5760043560005260056020526020604060002054604051908152f35b3461022f57600036600319011261022f57602063ffffffff60035460a01c16604051908152f35b3461022f57602036600319011261022f57600435610cf981610402565b610d016112c9565b6001600160a01b031680156104c257600280546001600160a01b031916821790557f6de4326a8b9054d72d9dbab97d27bc4edffadee7d966f5af9cc4eafdaf8e5455600080a2005b3461022f57600036600319011261022f576006546040516001600160a01b039091168152602090f35b3461022f57604036600319011261022f576103d1602435600435610d9582610402565b806000526001602052610daf600160406000200154611345565b61142c565b604036600319011261022f576004356024356001600160401b03811161022f57610de2903690600401610816565b90610e04610dfa846000526004602052604060002090565b5463ffffffff1690565b600254909190610e1c906001600160a01b031661076f565b91610e3060035463ffffffff9060a01c1690565b60405163bd3eb98f60e01b815263ffffffff9190911660048201526024810195909552602094928590849060449082905afa8015610811578593600091610ed1575b50600654610e88906001600160a01b031661076f565b91610ea96040519687958694859463122bba3560e21b86526004860161127a565b039134905af1801561081157610ebb57005b816103d192903d1061080a576107fc8183610635565b610ee89150843d861161080a576107fc8183610635565b38610e72565b3461022f57600036600319011261022f576007546040516001600160a01b039091168152602090f35b3461022f57602036600319011261022f57600435610f3481610402565b610f3c611400565b6001600160a01b039081168015610f8a57600080546001600160a01b03198116831782559092167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08380a380f35b604051631e4fbdf760e01b815260006004820152602490fd5b3461022f57602036600319011261022f57600435610fc081610402565b610fc8611400565b6001600160a01b031680156104c257600680546001600160a01b031916821790557f24ff87f37fffcf8010bd99a5170997e7ba0cb142148ad07cecfc1444f55bf924600080a2005b3461022f57600036600319011261022f5760206040517f97667070c54ef182b0f5858b034beac1b6f3089aa2d3188bb1e8929f4fa9b9298152f35b3461022f57600036600319011261022f5760206001600160801b0360085416604051908152f35b3461022f57600036600319011261022f576002546040516001600160a01b039091168152602090f35b9081602091031261022f575190565b6040513d6000823e3d90fd5b156110bd57565b60405162461bcd60e51b815260206004820152602260248201527f436861696e52756d626c653a2063616c6c6572206973206e6f74206d61696c626044820152610def60f31b6064820152608490fd5b1561111457565b60405162461bcd60e51b815260206004820152601f60248201527f436861696e52756d626c653a2073656e646572206973206e6f742070656572006044820152606490fd5b6002111561116357565b634e487b7160e01b600052602160045260246000fd5b60005b83811061118c5750506000910152565b818101518382015260200161117c565b906020916111b581518092818552858086019101611179565b601f01601f1916010190565b906112139160208152815160208201526001600160401b03602083015116604082015260606111fe604084015160808385015260a084019061119c565b920151906080601f198285030191015261119c565b90565b9061121391602081528151602082015260018060a01b0360208301511660408201526001600160401b0360408301511660608201526080611265606084015160a08385015260c084019061119c565b9201519060a0601f198285030191015261119c565b92849263ffffffff60c0969316855260208501526080604085015281608085015260a0840137600060a08284010152601f8019910116810190606060a082840301910152600060a08201520190565b3360009081527f31c1e66639f421f1853aeefe8ad6b62a3b96f3287efe23106923cd924aa025c2602052604090207f97667070c54ef182b0f5858b034beac1b6f3089aa2d3188bb1e8929f4fa9b9299060ff905b5416156113275750565b6044906040519063e2517d3f60e01b82523360048301526024820152fd5b6000818152600160209081526040808320338452909152902060ff9061131d565b600090808252600160205260ff61139284604085209060018060a01b0316600052602052604060002090565b54166113fa578082526001602090815260408084206001600160a01b038616600090815292529020805460ff1916600117905533926001600160a01b0316917f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d9080a4600190565b50905090565b6000546001600160a01b0316330361141457565b60405163118cdaa760e01b8152336004820152602490fd5b600090808252600160205260ff61145884604085209060018060a01b0316600052602052604060002090565b5416156113fa578082526001602090815260408084206001600160a01b038616600090815292529020805460ff1916905533926001600160a01b0316917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9080a4600190565b60408051606092916001600160401b039184810183811182821017610615578252809460009384835283519060a0820190828210908211176106155784528481528460208201528484820152818082015281608082015260208301528251936115268561061a565b80855260208501528083850152808401520152565b519060ff8216820361022f57565b51906001600160401b038216820361022f57565b81601f8201121561022f578051611573816106a3565b926115816040519485610635565b8184526020828401011161022f576112139160208085019101611179565b91909160a08184031261022f576115b58161153b565b926020820151926115c860408401611549565b926060810151926001600160401b039384811161022f57816115eb91840161155d565b93608083015190811161022f57611213920161155d565b60405190602082018281106001600160401b038211176106155760405260008252565b9160c08383031261022f576116398361153b565b92602081015192604082015161164e81610402565b9261165b60608401611549565b926080810151926001600160401b039384811161022f578161167e91840161155d565b9360a083015190811161022f57611213920161155d565b61169d6114be565b5060ff6001820151166001811460001461174f57506116fe6116cb826020806116ee95518301019101611625565b95939691929094506116db610665565b9687526001600160a01b03166020870152565b6001600160401b03166040850152565b60608301526080820152611710610656565b6000815260006020820152611723611602565b6040820152611730611602565b606082015261173d610684565b91600083526020830152604082015290565b6002036117e55761176c8160208061178c9451830101910161159f565b9350919390611779610656565b9485526001600160401b03166020850152565b6040830152606082015261179e610665565b906000825260006020830152600060408301526117b9611602565b60608301526117c6611602565b60808301526117d3610684565b60018152916020830152604082015290565b60405162461bcd60e51b8152602060048201526014602482015273556e6b6e6f776e206d657373616765207479706560601b6044820152606490fdfea2646970667358221220db72755981afd0010daf808113dcd5d5a69ea09ab9bd83cf5174ad28028527b064736f6c634300081800332f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
  "deployedBytecode": "0x6080604052600436101561001257600080fd5b60003560e01c806301ffc9a7146102075780630c6a04371461020257806321f93b1e146101fd578063248a9ca3146101f85780632f2ff15d146101f35780633152d807146101ee57806336568abe146101e957806337528ffa146101e45780633e42d4a4146101df5780634214d2e5146101da57806356d5d475146101d55780636d4c9cd6146101d0578063715018a6146101cb5780637b103999146101c65780638da5cb5b146101c157806391d14854146101bc578063a1da9dae146101b7578063a217fddf146101b2578063a91ee0dc146101ad578063b00899cf146101a8578063b3d63288146101a3578063c0d786551461019e578063d5438eae14610199578063d547741f14610194578063e289adcd1461018f578063f28b2daa1461018a578063f2fde38b14610185578063f3c61d6b14610180578063f5b541a61461017b578063f68016b7146101765763f887ea401461017157600080fd5b611072565b61104b565b611010565b610fa3565b610f17565b610eee565b610db4565b610d72565b610d49565b610cdc565b610cb5565b610c89565b610c1c565b610c00565b610b7c565b610b26565b610afd565b610ad4565b610a76565b610a3f565b610843565b6106f5565b6105c1565b610532565b6104d4565b610455565b610413565b6103d3565b610394565b6102ac565b610234565b602090600319011261022f576004356001600160e01b03198116810361022f5790565b600080fd5b3461022f5760206001600160e01b031961024d3661020c565b16637965db0b60e01b811490811561026b575b506040519015158152f35b6301ffc9a760e01b14905038610260565b9181601f8401121561022f578235916001600160401b03831161022f576020808501948460051b01011161022f57565b3461022f57604036600319011261022f576001600160401b0360043581811161022f576102dd90369060040161027c565b909160243590811161022f576102f790369060040161027c565b90506103016112c9565b81036103565760005b81811061031357005b8061035061032d6001936000526004602052604060002090565b548260051b86013581600052600560205280604060002055600052604060002055565b0161030a565b60405162461bcd60e51b815260206004820152601660248201527524b73b30b634b21030b93930bcb9903632b733ba341760511b6044820152606490fd5b3461022f57604036600319011261022f576103ad6112c9565b6103d160243560043581600052600560205280604060002055600052604060002055565b005b3461022f57602036600319011261022f5760043560005260016020526020600160406000200154604051908152f35b6001600160a01b0381160361022f57565b3461022f57604036600319011261022f576103d160243560043561043682610402565b806000526001602052610450600160406000200154611345565b611366565b3461022f57602036600319011261022f5760043561047281610402565b61047a611400565b6001600160a01b031680156104c257600780546001600160a01b031916821790557f7a0fea380d7a6cd83f0f8ccad3c349cad10d42f760f63fd2492d5d407471a49c600080a2005b60405163867915ab60e01b8152600490fd5b3461022f57604036600319011261022f576024356104f181610402565b336001600160a01b0382160361050d576103d19060043561142c565b60405163334bd91960e11b8152600490fd5b6004359063ffffffff8216820361022f57565b3461022f57602036600319011261022f5761054b61051f565b6002546001600160a01b031633036105a9576003805463ffffffff60a01b191660a083901b63ffffffff60a01b1617905563ffffffff167f47333240c37caed3a1253ddbea098806bb1baf7280274b495d478f95b28dd06d600080a2005b604051633d5e603f60e01b8152336004820152602490fd5b3461022f5760206356d5d47560e01b6001600160e01b03196105e23661020c565b1614604051908152f35b634e487b7160e01b600052604160045260246000fd5b6001600160401b03811161061557604052565b6105ec565b608081019081106001600160401b0382111761061557604052565b90601f801991011681019081106001600160401b0382111761061557604052565b604051906106638261061a565b565b6040519060a082018281106001600160401b0382111761061557604052565b60405190606082018281106001600160401b0382111761061557604052565b6001600160401b03811161061557601f01601f191660200190565b9291926106ca826106a3565b916106d86040519384610635565b82948184528183011161022f578281602093846000960137010152565b3461022f57604036600319011261022f5761070e61051f565b6024356001600160401b03811161022f573660238201121561022f576107b79161074460209236906024816004013591016106be565b5063ffffffff809116600052600482526040600020541661077b61076f60075460018060a01b031690565b6001600160a01b031690565b60085460405163a692979360e01b815263ffffffff9390931660048401526001600160801b031660248301529092839190829081906044820190565b03915afa8015610811576107de916000916107e2575b506040519081529081906020820190565b0390f35b610804915060203d60201161080a575b6107fc8183610635565b81019061109b565b386107cd565b503d6107f2565b6110aa565b9181601f8401121561022f578235916001600160401b03831161022f576020838186019501011161022f57565b3461022f57606036600319011261022f5761085c61051f565b6044356001600160401b03811161022f5761087e61090b913690600401610816565b906108a061089961076f61076f60065460018060a01b031690565b33146110b6565b60206108bd63ffffffff8096166000526005602052604060002090565b546002546108d3906001600160a01b031661076f565b6003549660405180978194829363bd3eb98f60e01b84528b60a01c16600484016020909392919363ffffffff60408201951681520152565b03915afa9182156108115761093361093a9361093f95600091610a20575b506024351461110d565b36916106be565b611695565b90815161094b81611159565b61095481611159565b6109c55750600354602090610971906001600160a01b031661076f565b91015190803b1561022f5760405163797266f560e11b81529160009183918290849082906109a29060048301611216565b03925af18015610811576109b257005b806109bf6103d192610602565b80610a6b565b600182516109d281611159565b6109db81611159565b146109e257005b60409190910151906001600160a01b0316803b1561022f576040516328f2f2c960e21b81529160009183918290849082906109a290600483016111c1565b610a39915060203d60201161080a576107fc8183610635565b38610929565b3461022f57602036600319011261022f5760043560005260046020526020604060002054604051908152f35b600091031261022f57565b3461022f57600080600319360112610ad157610a90611400565b80546001600160a01b03198116825581906001600160a01b03167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08280a380f35b80fd5b3461022f57600036600319011261022f576003546040516001600160a01b039091168152602090f35b3461022f57600036600319011261022f576000546040516001600160a01b039091168152602090f35b3461022f57604036600319011261022f57602060ff610b70602435610b4a81610402565b6004356000526001845260406000209060018060a01b0316600052602052604060002090565b54166040519015158152f35b3461022f57602036600319011261022f576004356001600160801b03811680910361022f57610ba9611400565b8015610bee576020817f1c71b0b8c071240d5960f42aa433d532b00a347608de270d2200adece7cc09a4926001600160801b03196008541617600855604051908152a1005b604051632b2acf8b60e01b8152600490fd5b3461022f57600036600319011261022f57602060405160008152f35b3461022f57602036600319011261022f57600435610c3981610402565b610c416112c9565b6001600160a01b031680156104c257600380546001600160a01b031916821790557f278c70ced5f3e0e5eeb385b5ff9cb735748ba00a625147e66065ed48fc1562cd600080a2005b3461022f57602036600319011261022f5760043560005260056020526020604060002054604051908152f35b3461022f57600036600319011261022f57602063ffffffff60035460a01c16604051908152f35b3461022f57602036600319011261022f57600435610cf981610402565b610d016112c9565b6001600160a01b031680156104c257600280546001600160a01b031916821790557f6de4326a8b9054d72d9dbab97d27bc4edffadee7d966f5af9cc4eafdaf8e5455600080a2005b3461022f57600036600319011261022f576006546040516001600160a01b039091168152602090f35b3461022f57604036600319011261022f576103d1602435600435610d9582610402565b806000526001602052610daf600160406000200154611345565b61142c565b604036600319011261022f576004356024356001600160401b03811161022f57610de2903690600401610816565b90610e04610dfa846000526004602052604060002090565b5463ffffffff1690565b600254909190610e1c906001600160a01b031661076f565b91610e3060035463ffffffff9060a01c1690565b60405163bd3eb98f60e01b815263ffffffff9190911660048201526024810195909552602094928590849060449082905afa8015610811578593600091610ed1575b50600654610e88906001600160a01b031661076f565b91610ea96040519687958694859463122bba3560e21b86526004860161127a565b039134905af1801561081157610ebb57005b816103d192903d1061080a576107fc8183610635565b610ee89150843d861161080a576107fc8183610635565b38610e72565b3461022f57600036600319011261022f576007546040516001600160a01b039091168152602090f35b3461022f57602036600319011261022f57600435610f3481610402565b610f3c611400565b6001600160a01b039081168015610f8a57600080546001600160a01b03198116831782559092167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08380a380f35b604051631e4fbdf760e01b815260006004820152602490fd5b3461022f57602036600319011261022f57600435610fc081610402565b610fc8611400565b6001600160a01b031680156104c257600680546001600160a01b031916821790557f24ff87f37fffcf8010bd99a5170997e7ba0cb142148ad07cecfc1444f55bf924600080a2005b3461022f57600036600319011261022f5760206040517f97667070c54ef182b0f5858b034beac1b6f3089aa2d3188bb1e8929f4fa9b9298152f35b3461022f57600036600319011261022f5760206001600160801b0360085416604051908152f35b3461022f57600036600319011261022f576002546040516001600160a01b039091168152602090f35b9081602091031261022f575190565b6040513d6000823e3d90fd5b156110bd57565b60405162461bcd60e51b815260206004820152602260248201527f436861696e52756d626c653a2063616c6c6572206973206e6f74206d61696c626044820152610def60f31b6064820152608490fd5b1561111457565b60405162461bcd60e51b815260206004820152601f60248201527f436861696e52756d626c653a2073656e646572206973206e6f742070656572006044820152606490fd5b6002111561116357565b634e487b7160e01b600052602160045260246000fd5b60005b83811061118c5750506000910152565b818101518382015260200161117c565b906020916111b581518092818552858086019101611179565b601f01601f1916010190565b906112139160208152815160208201526001600160401b03602083015116604082015260606111fe604084015160808385015260a084019061119c565b920151906080601f198285030191015261119c565b90565b9061121391602081528151602082015260018060a01b0360208301511660408201526001600160401b0360408301511660608201526080611265606084015160a08385015260c084019061119c565b9201519060a0601f198285030191015261119c565b92849263ffffffff60c0969316855260208501526080604085015281608085015260a0840137600060a08284010152601f8019910116810190606060a082840301910152600060a08201520190565b3360009081527f31c1e66639f421f1853aeefe8ad6b62a3b96f3287efe23106923cd924aa025c2602052604090207f97667070c54ef182b0f5858b034beac1b6f3089aa2d3188bb1e8929f4fa9b9299060ff905b5416156113275750565b6044906040519063e2517d3f60e01b82523360048301526024820152fd5b6000818152600160209081526040808320338452909152902060ff9061131d565b600090808252600160205260ff61139284604085209060018060a01b0316600052602052604060002090565b54166113fa578082526001602090815260408084206001600160a01b038616600090815292529020805460ff1916600117905533926001600160a01b0316917f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d9080a4600190565b50905090565b6000546001600160a01b0316330361141457565b60405163118cdaa760e01b8152336004820152602490fd5b600090808252600160205260ff61145884604085209060018060a01b0316600052602052604060002090565b5416156113fa578082526001602090815260408084206001600160a01b038616600090815292529020805460ff1916905533926001600160a01b0316917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9080a4600190565b60408051606092916001600160401b039184810183811182821017610615578252809460009384835283519060a0820190828210908211176106155784528481528460208201528484820152818082015281608082015260208301528251936115268561061a565b80855260208501528083850152808401520152565b519060ff8216820361022f57565b51906001600160401b038216820361022f57565b81601f8201121561022f578051611573816106a3565b926115816040519485610635565b8184526020828401011161022f576112139160208085019101611179565b91909160a08184031261022f576115b58161153b565b926020820151926115c860408401611549565b926060810151926001600160401b039384811161022f57816115eb91840161155d565b93608083015190811161022f57611213920161155d565b60405190602082018281106001600160401b038211176106155760405260008252565b9160c08383031261022f576116398361153b565b92602081015192604082015161164e81610402565b9261165b60608401611549565b926080810151926001600160401b039384811161022f578161167e91840161155d565b9360a083015190811161022f57611213920161155d565b61169d6114be565b5060ff6001820151166001811460001461174f57506116fe6116cb826020806116ee95518301019101611625565b95939691929094506116db610665565b9687526001600160a01b03166020870152565b6001600160401b03166040850152565b60608301526080820152611710610656565b6000815260006020820152611723611602565b6040820152611730611602565b606082015261173d610684565b91600083526020830152604082015290565b6002036117e55761176c8160208061178c9451830101910161159f565b9350919390611779610656565b9485526001600160401b03166020850152565b6040830152606082015261179e610665565b906000825260006020830152600060408301526117b9611602565b60608301526117c6611602565b60808301526117d3610684565b60018152916020830152604082015290565b60405162461bcd60e51b8152602060048201526014602482015273556e6b6e6f776e206d657373616765207479706560601b6044820152606490fdfea2646970667358221220db72755981afd0010daf808113dcd5d5a69ea09ab9bd83cf5174ad28028527b064736f6c63430008180033",
  "devdoc": {
    "errors": {
      "AccessControlBadConfirmation()": [
        {
          "details": "The caller of a function is not the expected one. NOTE: Don't confuse with {AccessControlUnauthorizedAccount}."
        }
      ],
      "AccessControlUnauthorizedAccount(address,bytes32)": [
        {
          "details": "The `account` is missing a role."
        }
      ],
      "OwnableInvalidOwner(address)": [
        {
          "details": "The owner is not a valid owner account. (eg. `address(0)`)"
        }
      ],
      "OwnableUnauthorizedAccount(address)": [
        {
          "details": "The caller account is not authorized to perform an operation."
        }
      ]
    },
    "events": {
      "RoleAdminChanged(bytes32,bytes32,bytes32)": {
        "details": "Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole` `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite {RoleAdminChanged} not being emitted signaling this."
      },
      "RoleGranted(bytes32,address,address)": {
        "details": "Emitted when `account` is granted `role`. `sender` is the account that originated the contract call, an admin role bearer except when using {AccessControl-_setupRole}."
      },
      "RoleRevoked(bytes32,address,address)": {
        "details": "Emitted when `account` is revoked `role`. `sender` is the account that originated the contract call:   - if using `revokeRole`, it is the admin role bearer   - if using `renounceRole`, it is the role bearer (i.e. `account`)"
      }
    },
    "kind": "dev",
    "methods": {
      "getRoleAdmin(bytes32)": {
        "details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."
      },
      "grantRole(bytes32,address)": {
        "details": "Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event."
      },
      "hasRole(bytes32,address)": {
        "details": "Returns `true` if `account` has been granted `role`."
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "renounceRole(bytes32,address)": {
        "details": "Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `callerConfirmation`. May emit a {RoleRevoked} event."
      },
      "revokeRole(bytes32,address)": {
        "details": "Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event."
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 5279,
        "contract": "contracts/connectors/HyperlaneConnector.sol:HyperlaneConnector",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 4918,
        "contract": "contracts/connectors/HyperlaneConnector.sol:HyperlaneConnector",
        "label": "_roles",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_bytes32,t_struct(RoleData)4913_storage)"
      },
      {
        "astId": 12454,
        "contract": "contracts/connectors/HyperlaneConnector.sol:HyperlaneConnector",
        "label": "router",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(SingleRouter)12434"
      },
      {
        "astId": 12457,
        "contract": "contracts/connectors/HyperlaneConnector.sol:HyperlaneConnector",
        "label": "registry",
        "offset": 0,
        "slot": "3",
        "type": "t_contract(ISingleIdentifierRegistry)13683"
      },
      {
        "astId": 12459,
        "contract": "contracts/connectors/HyperlaneConnector.sol:HyperlaneConnector",
        "label": "connectorId",
        "offset": 20,
        "slot": "3",
        "type": "t_uint32"
      },
      {
        "astId": 12463,
        "contract": "contracts/connectors/HyperlaneConnector.sol:HyperlaneConnector",
        "label": "customChainIds",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 12467,
        "contract": "contracts/connectors/HyperlaneConnector.sol:HyperlaneConnector",
        "label": "nativeChainIds",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 12732,
        "contract": "contracts/connectors/HyperlaneConnector.sol:HyperlaneConnector",
        "label": "mailbox",
        "offset": 0,
        "slot": "6",
        "type": "t_contract(IMailbox)1118"
      },
      {
        "astId": 12735,
        "contract": "contracts/connectors/HyperlaneConnector.sol:HyperlaneConnector",
        "label": "igp",
        "offset": 0,
        "slot": "7",
        "type": "t_contract(InterchainGasPaymaster)487"
      },
      {
        "astId": 12737,
        "contract": "contracts/connectors/HyperlaneConnector.sol:HyperlaneConnector",
        "label": "gasLimit",
        "offset": 0,
        "slot": "8",
        "type": "t_uint128"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(IMailbox)1118": {
        "encoding": "inplace",
        "label": "contract IMailbox",
        "numberOfBytes": "20"
      },
      "t_contract(ISingleIdentifierRegistry)13683": {
        "encoding": "inplace",
        "label": "contract ISingleIdentifierRegistry",
        "numberOfBytes": "20"
      },
      "t_contract(InterchainGasPaymaster)487": {
        "encoding": "inplace",
        "label": "contract InterchainGasPaymaster",
        "numberOfBytes": "20"
      },
      "t_contract(SingleRouter)12434": {
        "encoding": "inplace",
        "label": "contract SingleRouter",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_bytes32,t_struct(RoleData)4913_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct AccessControl.RoleData)",
        "numberOfBytes": "32",
        "value": "t_struct(RoleData)4913_storage"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_struct(RoleData)4913_storage": {
        "encoding": "inplace",
        "label": "struct AccessControl.RoleData",
        "members": [
          {
            "astId": 4910,
            "contract": "contracts/connectors/HyperlaneConnector.sol:HyperlaneConnector",
            "label": "hasRole",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_address,t_bool)"
          },
          {
            "astId": 4912,
            "contract": "contracts/connectors/HyperlaneConnector.sol:HyperlaneConnector",
            "label": "adminRole",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint128": {
        "encoding": "inplace",
        "label": "uint128",
        "numberOfBytes": "16"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint32": {
        "encoding": "inplace",
        "label": "uint32",
        "numberOfBytes": "4"
      }
    }
  }
}