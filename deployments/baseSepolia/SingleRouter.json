{
  "address": "0x9456E02Ef02C0F5256a559ecf7535356Aeab8647",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_operator",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "AccessControlBadConfirmation",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "neededRole",
          "type": "bytes32"
        }
      ],
      "name": "AccessControlUnauthorizedAccount",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "PeerInvalid",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "chainId",
          "type": "uint256"
        }
      ],
      "name": "PeerNotExist",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "chainId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint32",
          "name": "_connectorId",
          "type": "uint32"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "peer",
          "type": "bytes32"
        }
      ],
      "name": "PeerSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "previousAdminRole",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "newAdminRole",
          "type": "bytes32"
        }
      ],
      "name": "RoleAdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleRevoked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint32",
          "name": "connectorId",
          "type": "uint32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "transferProtocol",
          "type": "address"
        }
      ],
      "name": "SetConnector",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint32",
          "name": "protocolChainId",
          "type": "uint32"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "chainId",
          "type": "uint256"
        }
      ],
      "name": "SetProtocolChainId",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "DEFAULT_ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "OPERATOR_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "connectorId",
          "type": "uint32"
        }
      ],
      "name": "connectors",
      "outputs": [
        {
          "internalType": "contract IConnector",
          "name": "connector",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "connectorsList",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "_connectorId",
          "type": "uint32"
        },
        {
          "internalType": "uint256",
          "name": "_chainId",
          "type": "uint256"
        }
      ],
      "name": "getPeer",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleAdmin",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "_connectorId",
          "type": "uint32"
        },
        {
          "internalType": "uint256",
          "name": "_destinationChainId",
          "type": "uint256"
        }
      ],
      "name": "getRoute",
      "outputs": [
        {
          "internalType": "contract IConnector",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "grantRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_chainId",
          "type": "uint256"
        },
        {
          "internalType": "uint32",
          "name": "_connectorId",
          "type": "uint32"
        },
        {
          "internalType": "address",
          "name": "_sender",
          "type": "address"
        }
      ],
      "name": "isAvailablePeer",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "chainId",
          "type": "uint256"
        },
        {
          "internalType": "uint32",
          "name": "connectorId",
          "type": "uint32"
        }
      ],
      "name": "peers",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "peer",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "callerConfirmation",
          "type": "address"
        }
      ],
      "name": "renounceRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "revokeRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "connectorId",
          "type": "uint32"
        },
        {
          "internalType": "address",
          "name": "_connector",
          "type": "address"
        }
      ],
      "name": "setConnector",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32[]",
          "name": "_connectorIds",
          "type": "uint32[]"
        },
        {
          "internalType": "address[]",
          "name": "_connectors",
          "type": "address[]"
        }
      ],
      "name": "setConnectors",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_chainId",
          "type": "uint256"
        },
        {
          "internalType": "uint32",
          "name": "_connectorId",
          "type": "uint32"
        },
        {
          "internalType": "bytes32",
          "name": "_peer",
          "type": "bytes32"
        }
      ],
      "name": "setPeer",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "_connectorId",
          "type": "uint32"
        },
        {
          "internalType": "uint256[]",
          "name": "_chainIds",
          "type": "uint256[]"
        },
        {
          "internalType": "bytes32[]",
          "name": "_peers",
          "type": "bytes32[]"
        }
      ],
      "name": "setPeers",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x1a207f40cb31512bf4c45106305294b195791e6f2594da6bf973cef6da61910e",
  "receipt": {
    "to": null,
    "from": "0x72f46FFBd3213218137015EBCcf70bFAaF619513",
    "contractAddress": "0x9456E02Ef02C0F5256a559ecf7535356Aeab8647",
    "transactionIndex": 3,
    "gasUsed": "684693",
    "logsBloom": "0x
    "blockHash": "0xdecf8b3c2ec27ab7dfa30dbcebff5d0e601699448dd18db019c3ec082a0d0f44",
    "transactionHash": "0x1a207f40cb31512bf4c45106305294b195791e6f2594da6bf973cef6da61910e",
    "logs": [
      {
        "transactionIndex": 3,
        "blockNumber": 18060258,
        "transactionHash": "0x1a207f40cb31512bf4c45106305294b195791e6f2594da6bf973cef6da61910e",
        "address": "0x9456E02Ef02C0F5256a559ecf7535356Aeab8647",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0x97667070c54ef182b0f5858b034beac1b6f3089aa2d3188bb1e8929f4fa9b929",
          "0x00000000000000000000000072f46ffbd3213218137015ebccf70bfaaf619513",
          "0x00000000000000000000000072f46ffbd3213218137015ebccf70bfaaf619513"
        ],
        "data": "0x",
        "logIndex": 1,
        "blockHash": "0xdecf8b3c2ec27ab7dfa30dbcebff5d0e601699448dd18db019c3ec082a0d0f44"
      },
      {
        "transactionIndex": 3,
        "blockNumber": 18060258,
        "transactionHash": "0x1a207f40cb31512bf4c45106305294b195791e6f2594da6bf973cef6da61910e",
        "address": "0x9456E02Ef02C0F5256a559ecf7535356Aeab8647",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0x97667070c54ef182b0f5858b034beac1b6f3089aa2d3188bb1e8929f4fa9b929",
          "0x000000000000000000000000381c031baa5995d0cc52386508050ac947780815",
          "0x00000000000000000000000072f46ffbd3213218137015ebccf70bfaaf619513"
        ],
        "data": "0x",
        "logIndex": 2,
        "blockHash": "0xdecf8b3c2ec27ab7dfa30dbcebff5d0e601699448dd18db019c3ec082a0d0f44"
      }
    ],
    "blockNumber": 18060258,
    "cumulativeGasUsed": "1269885",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x381c031bAA5995D0Cc52386508050Ac947780815"
  ],
  "numDeployments": 1,
  "solcInputHash": "0cbf7cfbe136b839052e6e1e71a1c86a",
  "metadata": "{\"compiler\":{\"version\":\"0.8.24+commit.e11b9ed9\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"AccessControlBadConfirmation\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"neededRole\",\"type\":\"bytes32\"}],\"name\":\"AccessControlUnauthorizedAccount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"PeerInvalid\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"}],\"name\":\"PeerNotExist\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint32\",\"name\":\"_connectorId\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"peer\",\"type\":\"bytes32\"}],\"name\":\"PeerSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint32\",\"name\":\"connectorId\",\"type\":\"uint32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"transferProtocol\",\"type\":\"address\"}],\"name\":\"SetConnector\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"protocolChainId\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"}],\"name\":\"SetProtocolChainId\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"OPERATOR_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"connectorId\",\"type\":\"uint32\"}],\"name\":\"connectors\",\"outputs\":[{\"internalType\":\"contract IConnector\",\"name\":\"connector\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"connectorsList\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_connectorId\",\"type\":\"uint32\"},{\"internalType\":\"uint256\",\"name\":\"_chainId\",\"type\":\"uint256\"}],\"name\":\"getPeer\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_connectorId\",\"type\":\"uint32\"},{\"internalType\":\"uint256\",\"name\":\"_destinationChainId\",\"type\":\"uint256\"}],\"name\":\"getRoute\",\"outputs\":[{\"internalType\":\"contract IConnector\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_chainId\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"_connectorId\",\"type\":\"uint32\"},{\"internalType\":\"address\",\"name\":\"_sender\",\"type\":\"address\"}],\"name\":\"isAvailablePeer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"connectorId\",\"type\":\"uint32\"}],\"name\":\"peers\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"peer\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"callerConfirmation\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"connectorId\",\"type\":\"uint32\"},{\"internalType\":\"address\",\"name\":\"_connector\",\"type\":\"address\"}],\"name\":\"setConnector\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32[]\",\"name\":\"_connectorIds\",\"type\":\"uint32[]\"},{\"internalType\":\"address[]\",\"name\":\"_connectors\",\"type\":\"address[]\"}],\"name\":\"setConnectors\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_chainId\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"_connectorId\",\"type\":\"uint32\"},{\"internalType\":\"bytes32\",\"name\":\"_peer\",\"type\":\"bytes32\"}],\"name\":\"setPeer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_connectorId\",\"type\":\"uint32\"},{\"internalType\":\"uint256[]\",\"name\":\"_chainIds\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"_peers\",\"type\":\"bytes32[]\"}],\"name\":\"setPeers\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"errors\":{\"AccessControlBadConfirmation()\":[{\"details\":\"The caller of a function is not the expected one. NOTE: Don't confuse with {AccessControlUnauthorizedAccount}.\"}],\"AccessControlUnauthorizedAccount(address,bytes32)\":[{\"details\":\"The `account` is missing a role.\"}]},\"events\":{\"RoleAdminChanged(bytes32,bytes32,bytes32)\":{\"details\":\"Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole` `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite {RoleAdminChanged} not being emitted signaling this.\"},\"RoleGranted(bytes32,address,address)\":{\"details\":\"Emitted when `account` is granted `role`. `sender` is the account that originated the contract call, an admin role bearer except when using {AccessControl-_setupRole}.\"},\"RoleRevoked(bytes32,address,address)\":{\"details\":\"Emitted when `account` is revoked `role`. `sender` is the account that originated the contract call:   - if using `revokeRole`, it is the admin role bearer   - if using `renounceRole`, it is the role bearer (i.e. `account`)\"}},\"kind\":\"dev\",\"methods\":{\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `callerConfirmation`. May emit a {RoleRevoked} event.\"},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/SingleRouter.sol\":\"SingleRouter\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts/access/AccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IAccessControl} from \\\"./IAccessControl.sol\\\";\\nimport {Context} from \\\"../utils/Context.sol\\\";\\nimport {ERC165} from \\\"../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```solidity\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```solidity\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it. We recommend using {AccessControlDefaultAdminRules}\\n * to enforce additional security measures for this role.\\n */\\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\\n    struct RoleData {\\n        mapping(address account => bool) hasRole;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 role => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with an {AccessControlUnauthorizedAccount} error including the required role.\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual returns (bool) {\\n        return _roles[role].hasRole[account];\\n    }\\n\\n    /**\\n     * @dev Reverts with an {AccessControlUnauthorizedAccount} error if `_msgSender()`\\n     * is missing `role`. Overriding this function changes the behavior of the {onlyRole} modifier.\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Reverts with an {AccessControlUnauthorizedAccount} error if `account`\\n     * is missing `role`.\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert AccessControlUnauthorizedAccount(account, role);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `callerConfirmation`.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function renounceRole(bytes32 role, address callerConfirmation) public virtual {\\n        if (callerConfirmation != _msgSender()) {\\n            revert AccessControlBadConfirmation();\\n        }\\n\\n        _revokeRole(role, callerConfirmation);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Attempts to grant `role` to `account` and returns a boolean indicating if `role` was granted.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual returns (bool) {\\n        if (!hasRole(role, account)) {\\n            _roles[role].hasRole[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Attempts to revoke `role` to `account` and returns a boolean indicating if `role` was revoked.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual returns (bool) {\\n        if (hasRole(role, account)) {\\n            _roles[role].hasRole[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa0e92d42942f4f57c5be50568dac11e9d00c93efcb458026e18d2d9b9b2e7308\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/IAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev The `account` is missing a role.\\n     */\\n    error AccessControlUnauthorizedAccount(address account, bytes32 neededRole);\\n\\n    /**\\n     * @dev The caller of a function is not the expected one.\\n     *\\n     * NOTE: Don't confuse with {AccessControlUnauthorizedAccount}.\\n     */\\n    error AccessControlBadConfirmation();\\n\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `callerConfirmation`.\\n     */\\n    function renounceRole(bytes32 role, address callerConfirmation) external;\\n}\\n\",\"keccak256\":\"0xb6b36edd6a2999fd243ff226d6cbf84bd71af2432bbd0dfe19392996a1d9cb41\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0x9e8778b14317ba9e256c30a76fd6c32b960af621987f56069e1e819c77c6a133\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x4296879f55019b23e135000eb36896057e7101fb7fb859c5ef690cf14643757b\",\"license\":\"MIT\"},\"contracts/SingleRouter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity =0.8.24;\\n\\nimport {IConnector} from \\\"./interfaces/IConnector.sol\\\";\\nimport {Destination} from \\\"./types/Structs.sol\\\";\\nimport {AccessControl} from \\\"@openzeppelin/contracts/access/AccessControl.sol\\\";\\n\\n\\ncontract SingleRouter is AccessControl {\\n    bytes32 public constant OPERATOR_ROLE = keccak256(\\\"OPERATOR_ROLE\\\");\\n\\n    address[] public connectorsList;\\n\\n    mapping(uint32 connectorId => IConnector connector) public connectors;\\n    mapping(uint256 chainId => mapping(uint32 connectorId => bytes32 peer)) public peers;\\n\\n    function getRoute(uint32 _connectorId, uint256 _destinationChainId) external view returns (IConnector) {\\n        IConnector connector;\\n\\n        if (block.chainid == _destinationChainId) {\\n            connector = connectors[0];\\n        } else {\\n            connector = connectors[_connectorId];\\n        }\\n\\n        return connector;\\n    }\\n\\n    function getPeer(uint32 _connectorId, uint256 _chainId) external view returns (bytes32) {\\n        bytes32 peer = peers[_chainId][_connectorId];\\n        if (peer == bytes32(0)) revert PeerNotExist(_chainId);\\n\\n        return peer;\\n    }\\n\\n    function isAvailablePeer(uint256 _chainId, uint32 _connectorId, address _sender) external view returns (bool) {\\n        bytes32 senderInBytes32 = bytes32(uint256(uint160(_sender)));\\n\\n        bytes32 peer = peers[_chainId][_connectorId];\\n\\n        return senderInBytes32 == peer;\\n    }\\n\\n    event PeerSet(uint256 indexed chainId, uint32 indexed _connectorId, bytes32 peer);\\n    event SetConnector(uint32 indexed connectorId, address indexed transferProtocol);\\n    event SetProtocolChainId(uint32 protocolChainId, uint256 chainId);\\n\\n    error PeerNotExist(uint256 chainId);\\n    error PeerInvalid();\\n\\n    constructor(address _operator) {\\n\\n        _grantRole(OPERATOR_ROLE, msg.sender);\\n        _grantRole(OPERATOR_ROLE, _operator);\\n    }\\n\\n    function setPeer(uint256 _chainId, uint32 _connectorId, bytes32 _peer) external onlyRole(OPERATOR_ROLE) {\\n        _setPeer(_chainId, _connectorId, _peer);\\n    }\\n\\n    function setPeers(uint32 _connectorId, uint256[]  calldata _chainIds, bytes32[]  calldata _peers) external onlyRole(OPERATOR_ROLE) {\\n        require(_chainIds.length == _peers.length, \\\"Invalid arrays length.\\\");\\n\\n        for (uint256 i = 0; i < _chainIds.length; i++) {\\n            _setPeer(_chainIds[i], _connectorId, _peers[i]);\\n        }\\n    }\\n\\n    function setConnectors(uint32[] calldata _connectorIds, address[] calldata _connectors) external onlyRole(OPERATOR_ROLE) {\\n        require(_connectorIds.length == _connectors.length, \\\"Invalid arrays length.\\\");\\n\\n        for (uint256 i = 0; i < _connectors.length; i++) {\\n            _setConnector(_connectorIds[i], _connectors[i]);\\n        }\\n    }\\n\\n    function setConnector(uint32 connectorId, address _connector) external onlyRole(OPERATOR_ROLE) {\\n        _setConnector(connectorId, _connector);\\n    }\\n\\n    function _setConnector(uint32 _connectorId, address _connector) private {\\n        connectors[_connectorId] = IConnector(_connector);\\n\\n        IConnector(_connector).setConnectorId(_connectorId);\\n        emit SetConnector(_connectorId, _connector);\\n    }\\n\\n    function _setConnector(address _connector) private {\\n        uint32 connectorId = uint32(connectorsList.length);\\n\\n        connectors[connectorId] = IConnector(_connector);\\n\\n        IConnector(_connector).setConnectorId(connectorId);\\n        emit SetConnector(connectorId, _connector);\\n    }\\n\\n    function _setPeer(uint256 _chainId, uint32 _connectorId, bytes32 _peer) private {\\n        if (_peer == bytes32(0)) revert PeerInvalid();\\n\\n        peers[_chainId][_connectorId] = _peer;\\n        emit PeerSet(_chainId, _connectorId, _peer);\\n    }\\n}\\n\",\"keccak256\":\"0xc16d153092e9fefb68faa2a86bbfd833d0eecabe05a08155d65c194673438704\",\"license\":\"MIT\"},\"contracts/interfaces/IConnector.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity =0.8.24;\\n\\ninterface IConnector {\\n\\n    function sendMessage(uint256 _registryDst, bytes calldata _payload) external payable;\\n\\n    function quote(uint256 _registryDst, bytes memory _payload) external view returns (uint256);\\n\\n    function getProtocolId() external view returns (bytes32);\\n\\n    function getDestinationChainId(uint256 nativeChainId) external view returns (uint256);\\n\\n    function setConnectorId(uint32 _connectorId) external;\\n\\n    function connectorId() external view returns (uint32);\\n}\\n\",\"keccak256\":\"0x82b004b53b048e3ee386962fcf3362f53282da8a122018dcd841f7092cbdd7df\",\"license\":\"MIT\"},\"contracts/types/Structs.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity =0.8.24;\\n\\n    struct SID {\\n        bytes32 SIDId;\\n        bytes32 schemaId;\\n        uint64 expirationDate;\\n        uint64 revocationDate;\\n        bool revoked;\\n        address user;\\n        bytes data;\\n        string metadata;\\n    }\\n\\n    struct SIDSchema {\\n        bytes32 schemaId;\\n        string name;\\n        string description;\\n        string schema;\\n        address emitter;\\n    }\\n\\n    struct Emitter {\\n        bytes32 emitterId;\\n        bytes32 schemaId;\\n        uint64 expirationDate;\\n        uint256 fee;\\n        uint256 registryChainId;\\n        address owner;\\n    }\\n\\n    struct Destination {\\n        uint256 chainId;\\n        uint32 layerZero;\\n        uint32 hyperlane;\\n    }\\n\\n    struct Peers {\\n        bytes32 sender;\\n        bytes32 receiver;\\n    }\\n\",\"keccak256\":\"0x92f3154973a3fdf4df4e5e8af680e6dc0c4f660c70d1a06425b23b259f55a7f1\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60803461007257601f610baf38819003918201601f19168301916001600160401b038311848410176100775780849260209460405283398101031261007257516001600160a01b0381168103610072576100629061005c3361008d565b5061008d565b50604051610a6f90816101408239f35b600080fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b031660008181527fee57cd81e84075558e8fcc182a1f4393f91fc97f963a136e66b7f949a62f319f60205260408120549091907f97667070c54ef182b0f5858b034beac1b6f3089aa2d3188bb1e8929f4fa9b9299060ff1661013a57808352826020526040832082845260205260408320600160ff198254161790557f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d339380a4600190565b50509056fe608060408181526004918236101561001657600080fd5b600092833560e01c91826301ffc9a71461063057508163248a9ca3146106065781632f2ff15d146105dc57816336568abe146105965781634918d76b1461052a578163531d5455146104695781636575ab69146103c3578163809863b814610392578163852ad19c146103545781639051f55a146102fd57816391d14854146102b7578163a217fddf1461029c578163bd3eb98f1461023b578163c14bad4a146101fc578163d5019b8a146101a2578163d547741f1461015f57508063e63b6b30146101285763f5b541a6146100eb57600080fd5b34610124578160031936011261012457602090517f97667070c54ef182b0f5858b034beac1b6f3089aa2d3188bb1e8929f4fa9b9298152f35b5080fd5b50346101245736600319011261015c5761015961014361069e565b61014b610683565b90610154610760565b6108f3565b80f35b80fd5b9190503461019e578060031936011261019e5761019a91356101956001610184610683565b9383875286602052862001546107da565b61087e565b5080f35b8280fd5b90503461019e57606036600319011261019e576101bd6106b1565b6044356001600160a01b03811692908390036101f8579383916020953582526003865263ffffffff8383209116825285522054149051908152f35b8480fd5b5050346101245760203660031901126101245760209163ffffffff61021f61069e565b168152600283528190205490516001600160a01b039091168152f35b839150346101245782600319360112610124578261025761069e565b9260243593848252600360205263ffffffff838320911682526020522054918215610286576020838551908152f35b835163ab61dc1360e01b81529182015260249150fd5b50503461012457816003193601126101245751908152602090f35b90503461019e578160031936011261019e578160209360ff926102d8610683565b903582528186528282206001600160a01b039091168252855220549151911615158152f35b90503461019e57602036600319011261019e573560015481101561019e5760016020935260018060a01b03907fb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cf60154169051908152f35b90503461019e578160031936011261019e5760209282916103736106b1565b903582526003855263ffffffff83832091168252845220549051908152f35b83903461012457606036600319011261012457610159906103b16106b1565b6103b9610760565b60443591356109d0565b839034610124576060366003190112610124576103de61069e565b67ffffffffffffffff906024358281116101f8576103ff90369085016106c4565b92909360443591821161046557610418913691016106c4565b9092610422610760565b61042d8282146106f5565b855b81811061043a578680f35b8061045f61044b600193858a61073a565b358661045884888b61073a565b35916109d0565b0161042f565b8580fd5b9190503461019e573660031901126101245767ffffffffffffffff81358181116105265761049a90369084016106c4565b9190926024359182116101f8576104b3913691016106c4565b90916104bd610760565b6104c88282146106f5565b845b8281106104d5578580f35b6104e081838761073a565b359063ffffffff82168203610522576104fa81858761073a565b35916001600160a01b038316830361051e57600192610518916108f3565b016104ca565b8780fd5b8680fd5b8380fd5b50503461012457806003193601126101245760209161054761069e565b4660243503610577575080805260028352819020546001600160a01b0316905b516001600160a01b039091168152f35b63ffffffff16815260028352819020546001600160a01b031690610567565b8383346101245780600319360112610124576105b0610683565b90336001600160a01b038316036105cd575061019a91923561087e565b5163334bd91960e11b81528390fd5b9190503461019e578060031936011261019e5761019a91356106016001610184610683565b610800565b90503461019e57602036600319011261019e57816020936001923581528085522001549051908152f35b84913461019e57602036600319011261019e573563ffffffff60e01b811680910361019e5760209250637965db0b60e01b8114908115610672575b5015158152f35b6301ffc9a760e01b1490508361066b565b602435906001600160a01b038216820361069957565b600080fd5b6004359063ffffffff8216820361069957565b6024359063ffffffff8216820361069957565b9181601f840112156106995782359167ffffffffffffffff8311610699576020808501948460051b01011161069957565b156106fc57565b60405162461bcd60e51b815260206004820152601660248201527524b73b30b634b21030b93930bcb9903632b733ba341760511b6044820152606490fd5b919081101561074a5760051b0190565b634e487b7160e01b600052603260045260246000fd5b3360009081527fee57cd81e84075558e8fcc182a1f4393f91fc97f963a136e66b7f949a62f319f60205260409020547f97667070c54ef182b0f5858b034beac1b6f3089aa2d3188bb1e8929f4fa9b9299060ff16156107bc5750565b6044906040519063e2517d3f60e01b82523360048301526024820152fd5b80600052600060205260406000203360005260205260ff60406000205416156107bc5750565b9060009180835282602052604083209160018060a01b03169182845260205260ff6040842054161560001461087957808352826020526040832082845260205260408320600160ff198254161790557f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d339380a4600190565b505090565b9060009180835282602052604083209160018060a01b03169182845260205260ff6040842054166000146108795780835282602052604083208284526020526040832060ff1981541690557ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b339380a4600190565b63ffffffff16600081815260026020526040812080546001600160a01b0319166001600160a01b039094169384179055823b1561015c57604051631ba947fd60e11b815260048101839052818160248183885af180156109c557610979575b50807f36a35518f7abbe498881f0401d188d73bc8d4cb46872369f550f2fb5bdd4b03991a3565b67ffffffffffffffff81116109b1576040527f36a35518f7abbe498881f0401d188d73bc8d4cb46872369f550f2fb5bdd4b039610952565b634e487b7160e01b82526041600452602482fd5b6040513d84823e3d90fd5b90918015610a275760207f0400efcc7f41a25687cc4f40c6e8369fc7dbf8c156e1f534b9f054ae58d9a49891836000526003825263ffffffff604060002095169485600052825280604060002055604051908152a3565b6040516353630cbd60e01b8152600490fdfea2646970667358221220b363aedebf8ef76586546cc9af8c66c913b7cb3249393b731fd03ac1dd6d1a3364736f6c63430008180033",
  "deployedBytecode": "0x608060408181526004918236101561001657600080fd5b600092833560e01c91826301ffc9a71461063057508163248a9ca3146106065781632f2ff15d146105dc57816336568abe146105965781634918d76b1461052a578163531d5455146104695781636575ab69146103c3578163809863b814610392578163852ad19c146103545781639051f55a146102fd57816391d14854146102b7578163a217fddf1461029c578163bd3eb98f1461023b578163c14bad4a146101fc578163d5019b8a146101a2578163d547741f1461015f57508063e63b6b30146101285763f5b541a6146100eb57600080fd5b34610124578160031936011261012457602090517f97667070c54ef182b0f5858b034beac1b6f3089aa2d3188bb1e8929f4fa9b9298152f35b5080fd5b50346101245736600319011261015c5761015961014361069e565b61014b610683565b90610154610760565b6108f3565b80f35b80fd5b9190503461019e578060031936011261019e5761019a91356101956001610184610683565b9383875286602052862001546107da565b61087e565b5080f35b8280fd5b90503461019e57606036600319011261019e576101bd6106b1565b6044356001600160a01b03811692908390036101f8579383916020953582526003865263ffffffff8383209116825285522054149051908152f35b8480fd5b5050346101245760203660031901126101245760209163ffffffff61021f61069e565b168152600283528190205490516001600160a01b039091168152f35b839150346101245782600319360112610124578261025761069e565b9260243593848252600360205263ffffffff838320911682526020522054918215610286576020838551908152f35b835163ab61dc1360e01b81529182015260249150fd5b50503461012457816003193601126101245751908152602090f35b90503461019e578160031936011261019e578160209360ff926102d8610683565b903582528186528282206001600160a01b039091168252855220549151911615158152f35b90503461019e57602036600319011261019e573560015481101561019e5760016020935260018060a01b03907fb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cf60154169051908152f35b90503461019e578160031936011261019e5760209282916103736106b1565b903582526003855263ffffffff83832091168252845220549051908152f35b83903461012457606036600319011261012457610159906103b16106b1565b6103b9610760565b60443591356109d0565b839034610124576060366003190112610124576103de61069e565b67ffffffffffffffff906024358281116101f8576103ff90369085016106c4565b92909360443591821161046557610418913691016106c4565b9092610422610760565b61042d8282146106f5565b855b81811061043a578680f35b8061045f61044b600193858a61073a565b358661045884888b61073a565b35916109d0565b0161042f565b8580fd5b9190503461019e573660031901126101245767ffffffffffffffff81358181116105265761049a90369084016106c4565b9190926024359182116101f8576104b3913691016106c4565b90916104bd610760565b6104c88282146106f5565b845b8281106104d5578580f35b6104e081838761073a565b359063ffffffff82168203610522576104fa81858761073a565b35916001600160a01b038316830361051e57600192610518916108f3565b016104ca565b8780fd5b8680fd5b8380fd5b50503461012457806003193601126101245760209161054761069e565b4660243503610577575080805260028352819020546001600160a01b0316905b516001600160a01b039091168152f35b63ffffffff16815260028352819020546001600160a01b031690610567565b8383346101245780600319360112610124576105b0610683565b90336001600160a01b038316036105cd575061019a91923561087e565b5163334bd91960e11b81528390fd5b9190503461019e578060031936011261019e5761019a91356106016001610184610683565b610800565b90503461019e57602036600319011261019e57816020936001923581528085522001549051908152f35b84913461019e57602036600319011261019e573563ffffffff60e01b811680910361019e5760209250637965db0b60e01b8114908115610672575b5015158152f35b6301ffc9a760e01b1490508361066b565b602435906001600160a01b038216820361069957565b600080fd5b6004359063ffffffff8216820361069957565b6024359063ffffffff8216820361069957565b9181601f840112156106995782359167ffffffffffffffff8311610699576020808501948460051b01011161069957565b156106fc57565b60405162461bcd60e51b815260206004820152601660248201527524b73b30b634b21030b93930bcb9903632b733ba341760511b6044820152606490fd5b919081101561074a5760051b0190565b634e487b7160e01b600052603260045260246000fd5b3360009081527fee57cd81e84075558e8fcc182a1f4393f91fc97f963a136e66b7f949a62f319f60205260409020547f97667070c54ef182b0f5858b034beac1b6f3089aa2d3188bb1e8929f4fa9b9299060ff16156107bc5750565b6044906040519063e2517d3f60e01b82523360048301526024820152fd5b80600052600060205260406000203360005260205260ff60406000205416156107bc5750565b9060009180835282602052604083209160018060a01b03169182845260205260ff6040842054161560001461087957808352826020526040832082845260205260408320600160ff198254161790557f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d339380a4600190565b505090565b9060009180835282602052604083209160018060a01b03169182845260205260ff6040842054166000146108795780835282602052604083208284526020526040832060ff1981541690557ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b339380a4600190565b63ffffffff16600081815260026020526040812080546001600160a01b0319166001600160a01b039094169384179055823b1561015c57604051631ba947fd60e11b815260048101839052818160248183885af180156109c557610979575b50807f36a35518f7abbe498881f0401d188d73bc8d4cb46872369f550f2fb5bdd4b03991a3565b67ffffffffffffffff81116109b1576040527f36a35518f7abbe498881f0401d188d73bc8d4cb46872369f550f2fb5bdd4b039610952565b634e487b7160e01b82526041600452602482fd5b6040513d84823e3d90fd5b90918015610a275760207f0400efcc7f41a25687cc4f40c6e8369fc7dbf8c156e1f534b9f054ae58d9a49891836000526003825263ffffffff604060002095169485600052825280604060002055604051908152a3565b6040516353630cbd60e01b8152600490fdfea2646970667358221220b363aedebf8ef76586546cc9af8c66c913b7cb3249393b731fd03ac1dd6d1a3364736f6c63430008180033",
  "devdoc": {
    "errors": {
      "AccessControlBadConfirmation()": [
        {
          "details": "The caller of a function is not the expected one. NOTE: Don't confuse with {AccessControlUnauthorizedAccount}."
        }
      ],
      "AccessControlUnauthorizedAccount(address,bytes32)": [
        {
          "details": "The `account` is missing a role."
        }
      ]
    },
    "events": {
      "RoleAdminChanged(bytes32,bytes32,bytes32)": {
        "details": "Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole` `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite {RoleAdminChanged} not being emitted signaling this."
      },
      "RoleGranted(bytes32,address,address)": {
        "details": "Emitted when `account` is granted `role`. `sender` is the account that originated the contract call, an admin role bearer except when using {AccessControl-_setupRole}."
      },
      "RoleRevoked(bytes32,address,address)": {
        "details": "Emitted when `account` is revoked `role`. `sender` is the account that originated the contract call:   - if using `revokeRole`, it is the admin role bearer   - if using `renounceRole`, it is the role bearer (i.e. `account`)"
      }
    },
    "kind": "dev",
    "methods": {
      "getRoleAdmin(bytes32)": {
        "details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."
      },
      "grantRole(bytes32,address)": {
        "details": "Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event."
      },
      "hasRole(bytes32,address)": {
        "details": "Returns `true` if `account` has been granted `role`."
      },
      "renounceRole(bytes32,address)": {
        "details": "Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `callerConfirmation`. May emit a {RoleRevoked} event."
      },
      "revokeRole(bytes32,address)": {
        "details": "Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event."
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 4918,
        "contract": "contracts/SingleRouter.sol:SingleRouter",
        "label": "_roles",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_bytes32,t_struct(RoleData)4913_storage)"
      },
      {
        "astId": 12053,
        "contract": "contracts/SingleRouter.sol:SingleRouter",
        "label": "connectorsList",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 12058,
        "contract": "contracts/SingleRouter.sol:SingleRouter",
        "label": "connectors",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_uint32,t_contract(IConnector)13643)"
      },
      {
        "astId": 12064,
        "contract": "contracts/SingleRouter.sol:SingleRouter",
        "label": "peers",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_uint256,t_mapping(t_uint32,t_bytes32))"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(IConnector)13643": {
        "encoding": "inplace",
        "label": "contract IConnector",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_bytes32,t_struct(RoleData)4913_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct AccessControl.RoleData)",
        "numberOfBytes": "32",
        "value": "t_struct(RoleData)4913_storage"
      },
      "t_mapping(t_uint256,t_mapping(t_uint32,t_bytes32))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(uint32 => bytes32))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint32,t_bytes32)"
      },
      "t_mapping(t_uint32,t_bytes32)": {
        "encoding": "mapping",
        "key": "t_uint32",
        "label": "mapping(uint32 => bytes32)",
        "numberOfBytes": "32",
        "value": "t_bytes32"
      },
      "t_mapping(t_uint32,t_contract(IConnector)13643)": {
        "encoding": "mapping",
        "key": "t_uint32",
        "label": "mapping(uint32 => contract IConnector)",
        "numberOfBytes": "32",
        "value": "t_contract(IConnector)13643"
      },
      "t_struct(RoleData)4913_storage": {
        "encoding": "inplace",
        "label": "struct AccessControl.RoleData",
        "members": [
          {
            "astId": 4910,
            "contract": "contracts/SingleRouter.sol:SingleRouter",
            "label": "hasRole",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_address,t_bool)"
          },
          {
            "astId": 4912,
            "contract": "contracts/SingleRouter.sol:SingleRouter",
            "label": "adminRole",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint32": {
        "encoding": "inplace",
        "label": "uint32",
        "numberOfBytes": "4"
      }
    }
  }
}